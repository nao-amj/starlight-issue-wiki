---
import { findBacklinks, loadZettelkastenSettings, convertWikiLinksToHtml, findBidirectionalLinks } from '../lib/zettelkasten';
import BacklinkList from './BacklinkList.astro';
import KnowledgeGraph from './KnowledgeGraph.astro';
import MarkdownRenderer from './MarkdownRenderer.astro';
import type { GitHubIssue } from '../data/types';
import { BASE_PATH } from '../config';

export interface Props {
  content: string;
  issueUrl: string;
  currentIssue: GitHubIssue;
  allIssues: GitHubIssue[];
}

const { content, issueUrl, currentIssue, allIssues } = Astro.props;

// Zettelkasten設定を読み込み
const zettelkastenConfig = {
  ...loadZettelkastenSettings(),
  enabled: true // 常に有効として処理
};

// バックリンクを検索
let backlinks = [];
try {
  if (zettelkastenConfig.showBacklinks) {
    backlinks = findBacklinks(currentIssue.number, allIssues);
  }
} catch (error) {
  console.error('バックリンク検索中にエラーが発生しました:', error);
}

// 現在のIssueの全タグを収集
const tags = new Set();
if (currentIssue.body) {
  const tagMatches = currentIssue.body.match(/#([a-zA-Z0-9_-]+)/g);
  if (tagMatches) {
    tagMatches.forEach(tag => {
      tags.add(tag.substring(1).toLowerCase());
    });
  }
}
---

<div class="wiki-content">
  <MarkdownRenderer content={content} />
  
  {tags.size > 0 && (
    <div class="tags-container">
      <div class="tags-header">タグ:</div>
      <div class="tag-list">
        {Array.from(tags).map(tag => (
          <a href={`${BASE_PATH}/tag/${tag}`} class="content-tag">#{tag}</a>
        ))}
      </div>
    </div>
  )}
  
  <div class="knowledge-graph-section">
    <h3>Knowledge Graph (Connected Nodes)</h3>
    <KnowledgeGraph 
      issues={allIssues} 
      currentIssueNumber={currentIssue.number} 
      showFullGraph={false} 
    />
    <div class="graph-link-container">
      <a href={`${BASE_PATH}/knowledge-graph`} class="graph-link">全体の知識グラフを表示</a>
    </div>
  </div>
  
  <div class="backlinks-container" style={!zettelkastenConfig.showBacklinks ? 'display: none;' : ''}>
    {backlinks.length > 0 && (
      <BacklinkList backlinks={backlinks} currentIssueNumber={currentIssue.number} />
    )}
  </div>
  
  <div class="edit-links">
    <a href={issueUrl} target="_blank" rel="noopener noreferrer">
      GitHubでこのページを編集する
    </a>
  </div>
</div>

<style>
  .wiki-content {
    width: 100%;
    overflow-wrap: break-word;
    word-wrap: break-word;
    word-break: break-word;
    hyphens: auto;
  }
  
  /* タグセクション */
  .tags-container {
    margin: 1.5rem 0;
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background-color: var(--sl-color-gray-7);
    border-radius: var(--border-radius);
    border: 1px solid var(--sl-color-border);
  }
  
  .tags-header {
    font-weight: 500;
    color: var(--sl-color-text-accent);
    margin-right: 0.5rem;
  }
  
  .tag-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .content-tag {
    display: inline-block;
    text-decoration: none;
    color: var(--sl-color-accent);
    background-color: var(--color-primary-light);
    padding: 0.2em 0.5em;
    border-radius: 0.25em;
    font-size: 0.9em;
    transition: all 0.2s;
    word-break: break-all;
  }
  
  .content-tag:hover {
    background-color: var(--color-primary-light);
    opacity: 0.8;
    transform: translateY(-1px);
  }
  
  .knowledge-graph-section {
    margin: 2rem 0;
    padding: 1rem 0;
    border-top: 1px solid var(--sl-color-border);
  }
  
  .knowledge-graph-section h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.2rem;
  }
  
  .graph-link-container {
    text-align: center;
    margin-top: 0.5rem;
  }
  
  .graph-link {
    display: inline-block;
    padding: 0.5rem 1rem;
    background-color: var(--color-primary);
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-size: 0.9rem;
    transition: all 0.2s;
  }
  
  .graph-link:hover {
    background-color: var(--color-primary-dark);
    transform: translateY(-2px);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  
  .dark .graph-link:hover {
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.3);
  }
  
  .edit-links {
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid var(--sl-color-border);
    font-size: 0.9rem;
  }
  
  .edit-links a {
    color: var(--sl-color-accent);
    text-decoration: none;
  }
  
  .edit-links a:hover {
    text-decoration: underline;
  }
  
  /* レスポンシブ対応 */
  @media (max-width: 768px) {
    .wiki-content {
      padding: 0;
    }
    
    .tags-container {
      flex-direction: column;
      align-items: flex-start;
    }
    
    .tag-list {
      width: 100%;
    }
    
    .knowledge-graph-section {
      margin: 1.5rem 0;
      padding-top: 1.5rem;
    }
  }
</style>

<script>
  // ハッシュタグとバックリンクの表示/非表示のクライアントサイド機能
  document.addEventListener('DOMContentLoaded', () => {
    // 設定変更を検知して即時反映
    window.addEventListener('zettelkasten-settings-changed', (event) => {
      console.log('Zettelkasten settings changed, applying changes', event.detail);
      if (event.detail) {
        applySettingsToPage(event.detail);
      }
    });
    
    // 設定をコンテンツに適用する関数
    function applySettingsToPage(config) {
      // バックリンクの表示/非表示
      const backlinksContainer = document.querySelector('.backlinks-container');
      if (backlinksContainer) {
        backlinksContainer.style.display = config.showBacklinks ? 'block' : 'none';
      }
    }
    
    // テーマ変更イベントのリスナー
    window.addEventListener('theme-change', (event) => {
      if (window.mermaid && typeof window.mermaid.initialize === 'function') {
        window.mermaid.initialize({
          startOnLoad: true,
          theme: event.detail.theme === 'dark' ? 'dark' : 'default',
        });
      }
    });
    
    // 現在の設定を読み込んで適用
    try {
      const savedConfig = localStorage.getItem('zettelkastenConfig');
      if (savedConfig) {
        const config = JSON.parse(savedConfig);
        applySettingsToPage(config);
      }
    } catch (error) {
      console.error('設定の読み込みに失敗しました:', error);
    }
  });
</script>
