---
import { findBacklinks, loadZettelkastenSettings, convertWikiLinksToHtml, findBidirectionalLinks } from '../lib/zettelkasten';
import BacklinkList from './BacklinkList.astro';
import KnowledgeGraph from './KnowledgeGraph.astro';
import type { GitHubIssue } from '../data/types';
import { BASE_PATH } from '../config';

export interface Props {
  content: string;
  issueUrl: string;
  currentIssue: GitHubIssue;
  allIssues: GitHubIssue[];
}

const { content, issueUrl, currentIssue, allIssues } = Astro.props;

// Zettelkasten設定を読み込み
const zettelkastenConfig = {
  ...loadZettelkastenSettings(),
  enabled: true // 常に有効として処理
};

// バックリンクを検索
let backlinks = [];
try {
  if (zettelkastenConfig.showBacklinks) {
    backlinks = findBacklinks(currentIssue.number, allIssues);
  }
} catch (error) {
  console.error('バックリンク検索中にエラーが発生しました:', error);
}
---

<div class="wiki-content">
  <div class="content" set:html={content} />
  
  <div class="knowledge-graph-section">
    <h3>知識グラフ（接続ノード）</h3>
    <KnowledgeGraph 
      issues={allIssues} 
      currentIssueNumber={currentIssue.number} 
      showFullGraph={false} 
    />
    <div class="graph-link-container">
      <a href={`${BASE_PATH}/knowledge-graph`} class="graph-link">全体の知識グラフを表示</a>
    </div>
  </div>
  
  <div class="backlinks-container" style={!zettelkastenConfig.showBacklinks ? 'display: none;' : ''}>
    {backlinks.length > 0 && (
      <BacklinkList backlinks={backlinks} currentIssueNumber={currentIssue.number} />
    )}
  </div>
  
  <div class="edit-links">
    <a href={issueUrl} target="_blank" rel="noopener noreferrer">
      GitHubでこのページを編集する
    </a>
  </div>
</div>

<style>
  .wiki-content {
    width: 100%;
  }
  
  .content :global(img) {
    max-width: 100%;
    height: auto;
  }
  
  .content :global(pre) {
    padding: 1rem;
    border-radius: 0.5rem;
    background-color: var(--sl-color-gray-6);
    overflow-x: auto;
  }
  
  /* Zettelkastenモード用のスタイル */
  .content :global(.wiki-link) {
    text-decoration: none;
    border-bottom: 1px dashed var(--color-primary, #4f6df5);
    color: var(--color-primary, #4f6df5);
    transition: all 0.2s;
  }
  
  .content :global(.wiki-link:hover) {
    background-color: rgba(79, 109, 245, 0.1);
    border-bottom-style: solid;
  }
  
  .content :global(.wiki-link.bidirectional) {
    border-bottom: 2px solid var(--color-success, #0fa968);
    color: var(--color-success, #0fa968);
    font-weight: 500;
  }
  
  .content :global(.wiki-link.bidirectional:hover) {
    background-color: rgba(15, 169, 104, 0.1);
  }
  
  .content :global(.wiki-link-unlinked) {
    text-decoration: none;
    border-bottom: 1px dotted #999;
    color: #666;
  }
  
  /* ハッシュタグスタイル */
  .content :global(.hash-tag) {
    text-decoration: none;
    color: #1a73e8;
    background-color: rgba(26, 115, 232, 0.1);
    padding: 0.1em 0.4em;
    border-radius: 0.25em;
    font-size: 0.9em;
    transition: all 0.2s;
  }
  
  .content :global(.hash-tag:hover) {
    background-color: rgba(26, 115, 232, 0.2);
  }
  
  .dark .content :global(.hash-tag) {
    color: #64b5f6;
    background-color: rgba(100, 181, 246, 0.1);
  }
  
  .dark .content :global(.hash-tag:hover) {
    background-color: rgba(100, 181, 246, 0.2);
  }
  
  .knowledge-graph-section {
    margin: 2rem 0;
    padding: 1rem 0;
    border-top: 1px solid var(--sl-color-gray-5);
  }
  
  .knowledge-graph-section h3 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.2rem;
  }
  
  .graph-link-container {
    text-align: center;
    margin-top: 0.5rem;
  }
  
  .graph-link {
    display: inline-block;
    padding: 0.5rem 1rem;
    background-color: var(--color-primary, #4f6df5);
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-size: 0.9rem;
    transition: all 0.2s;
  }
  
  .graph-link:hover {
    background-color: var(--color-primary-dark, #3a50c5);
    transform: translateY(-2px);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  
  .edit-links {
    margin-top: 2rem;
    padding-top: 1rem;
    border-top: 1px solid var(--sl-color-gray-5);
    font-size: 0.9rem;
  }
  
  .edit-links a {
    color: var(--sl-color-text-accent);
    text-decoration: none;
  }
  
  .edit-links a:hover {
    text-decoration: underline;
  }
</style>

<script define:vars={{ BASE_PATH }}>
  // WikiリンクとハッシュタグのクライアントサイドでのフォールバックとUI改善
  document.addEventListener('DOMContentLoaded', () => {
    // 設定変更を検知して即時反映
    window.addEventListener('zettelkasten-settings-changed', (event) => {
      console.log('Zettelkasten settings changed, applying changes', event.detail);
      if (event.detail) {
        applySettingsToPage(event.detail);
      }
    });
    
    // 設定をコンテンツに適用する関数
    function applySettingsToPage(config) {
      // バックリンクの表示/非表示
      const backlinksContainer = document.querySelector('.backlinks-container');
      if (backlinksContainer) {
        backlinksContainer.style.display = config.showBacklinks ? 'block' : 'none';
      }
      
      // 双方向リンクのスタイル調整
      const bidirectionalLinks = document.querySelectorAll('.wiki-link.bidirectional');
      bidirectionalLinks.forEach(link => {
        if (config.highlightBidirectional) {
          link.style.borderBottom = '2px solid var(--color-success, #0fa968)';
          link.style.color = 'var(--color-success, #0fa968)';
          link.style.fontWeight = '500';
        } else {
          link.style.borderBottom = '1px dashed var(--color-primary, #4f6df5)';
          link.style.color = 'var(--color-primary, #4f6df5)';
          link.style.fontWeight = 'normal';
        }
      });
    }
    
    // ログ: Wikiリンクの確認
    const wikiLinks = document.querySelectorAll('.wiki-link');
    console.log(`${wikiLinks.length} WikiLinks found`);
    
    // 双方向リンクの確認
    const bidirectionalLinks = document.querySelectorAll('.wiki-link.bidirectional');
    console.log(`${bidirectionalLinks.length} Bidirectional links found`);
    
    const contentDiv = document.querySelector('.content');
    if (contentDiv) {
      // 未処理のWikiリンクを検出（フォールバック）
      const html = contentDiv.innerHTML;
      let modified = false;
      let modifiedHtml = html;
      
      // [[...]]形式のテキストを検索し、リンクに変換
      const wikiLinkPattern = /\[\[(.*?)\]\]/g;
      if (wikiLinkPattern.test(html)) {
        console.log('Found unconverted wiki links, applying client-side conversion');
        modifiedHtml = modifiedHtml.replace(wikiLinkPattern, (match, title) => {
          const linkedTitle = title.trim();
          return `<a href="${BASE_PATH}/wiki?title=${encodeURIComponent(linkedTitle)}" class="wiki-link">${linkedTitle}</a>`;
        });
        modified = true;
      }
      
      // ハッシュタグを検出してリンクに変換
      const hashTagPattern = /#([a-zA-Z0-9_-]+)/g;
      if (hashTagPattern.test(modifiedHtml)) {
        console.log('Found hashtags, applying client-side conversion');
        modifiedHtml = modifiedHtml.replace(hashTagPattern, (match, tag) => {
          return `<a href="${BASE_PATH}/tag/${tag.toLowerCase()}" class="hash-tag">#${tag}</a>`;
        });
        modified = true;
      }
      
      // 変更があった場合のみHTMLを更新
      if (modified) {
        contentDiv.innerHTML = modifiedHtml;
        console.log('Client-side link conversion completed');
      }
    }
    
    // 現在の設定を読み込んで適用
    try {
      const savedConfig = localStorage.getItem('zettelkastenConfig');
      if (savedConfig) {
        const config = JSON.parse(savedConfig);
        applySettingsToPage(config);
      }
    } catch (error) {
      console.error('設定の読み込みに失敗しました:', error);
    }
  });
</script>
