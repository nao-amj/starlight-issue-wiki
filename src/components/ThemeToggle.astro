---
---

<theme-toggle>
  <button id="theme-toggle" title="テーマ切り替え">
    <!-- Sun icon (shown in dark mode) -->
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="sun-icon">
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>
    <!-- Moon icon (shown in light mode) -->
    <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="moon-icon">
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
  </button>
</theme-toggle>

<style>
  #theme-toggle {
    display: flex;
    align-items: center;
    justify-content: center;
    border: none;
    background-color: transparent;
    padding: 0.5rem;
    border-radius: 0.5rem;
    cursor: pointer;
    transition: background-color 0.2s;
    color: var(--sl-color-text);
  }

  #theme-toggle:hover {
    background-color: var(--sl-color-gray-6);
  }

  .sun-icon, .moon-icon {
    stroke: currentColor;
    transition: opacity 0.2s, transform 0.3s ease;
  }

  :global(:root:not(.dark)) .sun-icon {
    opacity: 0;
    transform: rotate(90deg) scale(0);
    position: absolute;
  }

  :global(:root:not(.dark)) .moon-icon {
    opacity: 1;
    transform: scale(1);
  }

  :global(:root.dark) .sun-icon {
    opacity: 1;
    transform: scale(1);
  }

  :global(:root.dark) .moon-icon {
    opacity: 0;
    transform: rotate(-90deg) scale(0);
    position: absolute;
  }

  @media (prefers-reduced-motion: reduce) {
    .sun-icon, .moon-icon {
      transition: opacity 0.2s;
      transform: none !important;
    }
  }
</style>

<script>
  class ThemeToggle extends HTMLElement {
    constructor() {
      super();
      
      const button = this.querySelector('button')!;
      
      // 初期化時はdocumentBodyのdataset.themeとhtmlのクラスを同期
      if (typeof localStorage !== 'undefined') {
        const storedTheme = localStorage.getItem('theme');
        const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
        
        const isDark = storedTheme === 'dark' || (!storedTheme && prefersDark);
        this.setTheme(isDark ? 'dark' : 'light');
      }
      
      button.addEventListener('click', () => {
        // 現在のテーマを確認
        const currentTheme = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
        // 反対のテーマを設定
        this.setTheme(currentTheme === 'dark' ? 'light' : 'dark');
      });
    }
    
    setTheme(theme) {
      // ルート要素のクラスを設定
      document.documentElement.classList.toggle('dark', theme === 'dark');
      
      // デフォルトのStarlightテーマ設定用にdata-themeも設定
      document.documentElement.dataset.theme = theme;
      
      // 保存
      localStorage.setItem('theme', theme);
      
      // Mermaidのテーマを更新
      if (window.mermaid && typeof window.mermaid.initialize === 'function') {
        window.mermaid.initialize({
          startOnLoad: true,
          theme: theme === 'dark' ? 'dark' : 'default'
        });
      }
      
      // テーマ変更イベントを発行
      window.dispatchEvent(new CustomEvent('theme-change', {
        detail: { theme }
      }));
    }
  }
  
  // Define the custom element
  customElements.define('theme-toggle', ThemeToggle);
  
  // テーマ切り替えのためのグローバル関数を設定
  window.setTheme = (theme) => {
    const themeToggle = document.querySelector('theme-toggle');
    if (themeToggle) {
      themeToggle.setTheme(theme);
    } else {
      // ThemeToggleがまだロードされていない場合は直接設定
      document.documentElement.classList.toggle('dark', theme === 'dark');
      document.documentElement.dataset.theme = theme;
      localStorage.setItem('theme', theme);
    }
  };
  
  // システムテーマの変更を監視
  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', ({ matches }) => {
    // 明示的に設定されていない場合のみシステム設定を反映
    if (!localStorage.getItem('theme')) {
      window.setTheme(matches ? 'dark' : 'light');
    }
  });
</script>
