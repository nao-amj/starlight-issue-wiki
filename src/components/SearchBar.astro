---
// Ê§úÁ¥¢„Éê„Éº„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
import { BASE_PATH } from '../config';
---

<div class="search-container">
  <div class="search-form">
    <span class="search-icon">üîç</span>
    <input 
      type="text" 
      id="search-input" 
      class="search-input" 
      placeholder="Wiki„Éö„Éº„Ç∏„ÇíÊ§úÁ¥¢..."
      aria-label="Ê§úÁ¥¢"
    />
  </div>
  <div id="search-results" class="search-results"></div>
</div>

<script define:vars={{ BASE_PATH }}>
  // „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çµ„Ç§„ÉâÊ§úÁ¥¢Ê©üËÉΩ
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    let issues = [];

    // GitHub API„Åã„Çâissue„Éá„Éº„Çø„ÇíÂèñÂæó
    async function fetchIssues() {
      try {
        const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues?state=all&per_page=100');
        if (!response.ok) throw new Error('GitHub API error');
        issues = await response.json();
      } catch (error) {
        console.error('Error fetching issues:', error);
      }
    }

    // Ê§úÁ¥¢Ê©üËÉΩ
    function performSearch(query) {
      if (!query || query.length < 2) {
        searchResults.innerHTML = '';
        searchResults.style.display = 'none';
        return;
      }

      const lowerQuery = query.toLowerCase();
      const matches = issues.filter(issue => 
        issue.title.toLowerCase().includes(lowerQuery) || 
        (issue.body && issue.body.toLowerCase().includes(lowerQuery))
      );

      if (matches.length === 0) {
        searchResults.innerHTML = '<div class="no-results">Ê§úÁ¥¢ÁµêÊûú„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>';
      } else {
        searchResults.innerHTML = matches.slice(0, 5).map(issue => {
          // „Çø„Ç§„Éà„É´ÂÜÖ„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ„Çí„Éè„Ç§„É©„Ç§„Éà
          const highlightedTitle = highlightText(issue.title, lowerQuery);
          
          // Êú¨Êñá„ÅÆÈñ¢ÈÄ£ÁÆáÊâÄ„ÇíÊäΩÂá∫„Åó„Å¶„Éè„Ç§„É©„Ç§„Éà
          let excerptHtml = '';
          if (issue.body) {
            const matchIndex = issue.body.toLowerCase().indexOf(lowerQuery);
            if (matchIndex >= 0) {
              // „Ç≠„Éº„ÉØ„Éº„Éâ„ÅÆÂâçÂæå„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíÂèñÂæó
              const startPos = Math.max(0, matchIndex - 50);
              const endPos = Math.min(issue.body.length, matchIndex + lowerQuery.length + 50);
              let excerpt = issue.body.substring(startPos, endPos);
              
              // ÂâçÂæå„ÅåÂàá„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÁúÅÁï•Ë®òÂè∑„ÇíËøΩÂä†
              if (startPos > 0) excerpt = '...' + excerpt;
              if (endPos < issue.body.length) excerpt = excerpt + '...';
              
              // „Ç≠„Éº„ÉØ„Éº„Éâ„Çí„Éè„Ç§„É©„Ç§„Éà
              excerptHtml = highlightText(excerpt, lowerQuery);
            } else {
              // Êú¨Êñá„Å´„Ç≠„Éº„ÉØ„Éº„Éâ„ÅåÂê´„Åæ„Çå„Å™„ÅÑÂ†¥Âêà„ÅØÂÖàÈ†≠„ÇíË°®Á§∫
              excerptHtml = issue.body.substring(0, 100) + (issue.body.length > 100 ? '...' : '');
            }
          }
          
          return `
            <a href="${BASE_PATH}/wiki/${issue.number}" class="search-result-item">
              <div class="search-result-title">${highlightedTitle}</div>
              <div class="search-result-meta">
                <span class="search-result-number">#${issue.number}</span>
                <span class="search-result-date">Êõ¥Êñ∞: ${new Date(issue.updated_at).toLocaleDateString('ja-JP')}</span>
              </div>
              ${excerptHtml ? `<div class="search-result-excerpt">${excerptHtml}</div>` : ''}
              ${issue.labels && issue.labels.length > 0 ? `
                <div class="search-result-labels">
                  ${issue.labels.map(label => `
                    <span class="search-tag" style="background-color: #${label.color}20; color: #${label.color}; border: 1px solid #${label.color}40;">
                      ${label.name}
                    </span>
                  `).join('')}
                </div>
              ` : ''}
            </a>
          `;
        }).join('');
      }

      searchResults.style.display = 'block';
    }
    
    // „ÉÜ„Ç≠„Çπ„ÉàÂÜÖ„ÅÆÊ§úÁ¥¢„Ç≠„Éº„ÉØ„Éº„Éâ„Çí„Éè„Ç§„É©„Ç§„Éà„Åô„ÇãÈñ¢Êï∞
    function highlightText(text, query) {
      if (!text) return '';
      const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
      return text.replace(regex, '<mark class="search-highlight">$1</mark>');
    }
    
    // Ê≠£Ë¶èË°®ÁèæÁî®„Å´ÊñáÂ≠óÂàó„Çí„Ç®„Çπ„Ç±„Éº„Éó„Åô„ÇãÈñ¢Êï∞
    function escapeRegExp(string) {
      return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
    }

    // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        performSearch(e.target.value.trim());
      });

      searchInput.addEventListener('focus', () => {
        if (issues.length === 0) fetchIssues();
      });

      // „ÇØ„É™„ÉÉ„ÇØ‰ª•Â§ñ„ÅÆÂ†¥ÊâÄ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Åü„ÇâÁµêÊûú„ÇíÈùûË°®Á§∫
      document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
          searchResults.style.display = 'none';
        }
      });
    }

    // ÂàùÊúü„É≠„Éº„Éâ
    fetchIssues();
  });
</script>

<style>
  .search-container {
    position: relative;
    margin: var(--space-md) 0;
    z-index: 100;
  }

  .search-form {
    position: relative;
  }

  .search-input {
    width: 100%;
    padding: var(--space-sm) var(--space-md);
    padding-left: 2.5rem;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    font-size: var(--font-size-md);
    background-color: var(--color-background-panel);
    transition: all var(--transition-speed);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.2);
  }

  .search-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    opacity: 0.6;
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 10;
    width: 100%;
    max-height: 500px;
    overflow-y: auto;
    background: var(--color-background-panel);
    border-radius: 0 0 var(--border-radius-md) var(--border-radius-md);
    box-shadow: var(--box-shadow-lg);
    border: 1px solid var(--color-border);
    border-top: none;
    display: none;
    margin-top: -2px;
  }

  .search-result-item {
    display: block;
    padding: var(--space-md);
    border-bottom: 1px solid var(--color-border);
    text-decoration: none;
    color: var(--color-text);
    transition: all var(--transition-speed);
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  .search-result-item:hover {
    background-color: rgba(37, 99, 235, 0.05);
    text-decoration: none;
    transform: translateY(-2px);
  }

  .search-result-title {
    font-weight: 500;
    margin-bottom: 0.5rem;
    color: var(--color-primary);
    font-size: 1.1rem;
  }

  .search-result-meta {
    display: flex;
    justify-content: space-between;
    font-size: var(--font-size-sm);
    color: var(--color-text-light);
    margin-bottom: 0.75rem;
  }
  
  .search-result-number {
    font-weight: 500;
    opacity: 0.7;
  }
  
  .search-result-date {
    font-style: italic;
  }
  
  .search-result-excerpt {
    font-size: 0.95rem;
    line-height: 1.6;
    margin-bottom: 0.75rem;
    border-left: 3px solid var(--color-primary-light);
    padding-left: 0.75rem;
    color: var(--color-text);
  }
  
  .search-result-labels {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }
  
  .search-tag {
    display: inline-block;
    padding: 0.2em 0.5em;
    border-radius: 0.25rem;
    font-size: 0.8rem;
    font-weight: 500;
    line-height: 1.2;
  }
  
  .search-highlight {
    background-color: rgba(255, 213, 79, 0.4);
    padding: 0.1em 0.2em;
    border-radius: 0.2em;
    font-weight: bold;
  }

  .no-results {
    padding: var(--space-md);
    text-align: center;
    color: var(--color-text-light);
    font-style: italic;
  }
</style>
