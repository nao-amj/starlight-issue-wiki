---
// 検索バーコンポーネント - 拡張版
import { BASE_PATH } from '../config';
---

<div class="search-container">
  <div class="search-form">
    <span class="search-icon">🔍</span>
    <input 
      type="text" 
      id="search-input" 
      class="search-input" 
      placeholder="Wikiページを検索..."
      aria-label="検索"
    />
    <button id="search-advanced-toggle" class="search-advanced-toggle" aria-label="詳細検索">
      <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
        <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3"></polygon>
      </svg>
    </button>
  </div>
  <div id="advanced-search-options" class="advanced-search-options" style="display: none;">
    <div class="options-grid">
      <div class="option-group">
        <label>検索範囲</label>
        <div class="options-row">
          <label class="option-checkbox">
            <input type="checkbox" id="search-title" checked> タイトル
          </label>
          <label class="option-checkbox">
            <input type="checkbox" id="search-body" checked> 本文
          </label>
          <label class="option-checkbox">
            <input type="checkbox" id="search-labels"> ラベル
          </label>
          <label class="option-checkbox">
            <input type="checkbox" id="search-comments"> コメント
          </label>
        </div>
      </div>
      
      <div class="option-group">
        <label>ラベル</label>
        <div id="label-filters" class="filter-container">
          <!-- ラベルは動的に追加されます -->
          <div class="filter-loading">ラベルを読み込み中...</div>
        </div>
      </div>
      
      <div class="option-group">
        <label>担当者</label>
        <div id="assignee-filters" class="filter-container">
          <!-- 担当者は動的に追加されます -->
          <div class="filter-loading">担当者を読み込み中...</div>
        </div>
      </div>
      
      <div class="option-group">
        <label>ソート順</label>
        <select id="search-sort" class="search-select">
          <option value="relevance">関連性</option>
          <option value="newest">新しい順</option>
          <option value="oldest">古い順</option>
        </select>
      </div>
      <div class="option-group">
        <label>表示件数</label>
        <select id="search-limit" class="search-select">
          <option value="5">5件</option>
          <option value="10">10件</option>
          <option value="20">20件</option>
        </select>
      </div>
      <div class="option-buttons">
        <button id="search-reset" class="option-button option-button-secondary">リセット</button>
        <button id="search-execute" class="option-button option-button-primary">検索</button>
      </div>
    </div>
  </div>
  <div id="search-results" class="search-results" role="listbox" tabindex="-1"></div>
</div>

<script is:inline>
  // 拡張検索ユーティリティを実装
  function filterIssuesByQuery(issues, query, options = {}) {
    if (!Array.isArray(issues)) {
      return [];
    }

    // 空のクエリでもフィルタリングオプションがある場合は処理を続行
    if ((!query || query.length < 2) && 
        !options.selectedLabels?.length && 
        !options.selectedAssignees?.length) {
      return [];
    }
    
    const {
      searchInTitle = true,
      searchInBody = true,
      searchInLabels = false,
      searchInComments = false,
      selectedLabels = [],
      selectedAssignees = [],
      sortBy = 'relevance',
      limit = 5
    } = options;
    
    // フィルター適用前の初期リスト
    let filteredIssues = [...issues];
    
    // ラベルフィルタリング
    if (selectedLabels.length > 0) {
      filteredIssues = filteredIssues.filter(issue => {
        if (!issue.labels || issue.labels.length === 0) return false;
        return selectedLabels.every(selectedLabel => 
          issue.labels.some(label => label.name === selectedLabel)
        );
      });
    }
    
    // 担当者フィルタリング
    if (selectedAssignees.length > 0) {
      filteredIssues = filteredIssues.filter(issue => {
        if (!issue.assignees || issue.assignees.length === 0) return false;
        return selectedAssignees.some(selectedAssignee => 
          issue.assignees.some(assignee => assignee.login === selectedAssignee)
        );
      });
    }
    
    // 検索クエリによるフィルタリング（クエリが存在する場合のみ）
    if (query && query.length >= 2) {
      const lowerQuery = query.toLowerCase();
      const terms = lowerQuery.split(/\s+/).filter(term => term.length > 1);
      
      filteredIssues = filteredIssues.filter(issue => {
        let score = 0;
        
        // タイトル検索
        if (searchInTitle && issue.title) {
          const titleLower = issue.title.toLowerCase();
          // 完全一致は高いスコア
          if (titleLower === lowerQuery) {
            score += 100;
          }
          // 部分一致
          else if (titleLower.includes(lowerQuery)) {
            score += 50;
          }
          // 個別の単語一致
          terms.forEach(term => {
            if (titleLower.includes(term)) {
              score += 20;
            }
          });
        }
        
        // 本文検索
        if (searchInBody && issue.body) {
          const bodyLower = issue.body.toLowerCase();
          // 完全一致
          if (bodyLower.includes(lowerQuery)) {
            score += 30;
          }
          // 個別の単語一致
          terms.forEach(term => {
            if (bodyLower.includes(term)) {
              score += 10;
              
              // 出現回数も考慮
              const occurrences = (bodyLower.match(new RegExp(escapeRegExp(term), 'g')) || []).length;
              if (occurrences > 1) {
                score += Math.min(occurrences, 5) * 2; // 最大10点まで
              }
            }
          });
        }
        
        // ラベル検索
        if (searchInLabels && issue.labels && issue.labels.length > 0) {
          issue.labels.forEach(label => {
            if (label.name && label.name.toLowerCase().includes(lowerQuery)) {
              score += 40;
            }
            
            terms.forEach(term => {
              if (label.name && label.name.toLowerCase().includes(term)) {
                score += 15;
              }
            });
          });
        }
        
        // コメント数でのフィルタリング（コメント内容の検索はAPI制限により実装が難しい）
        if (searchInComments) {
          // コメントがあるIssueにスコアを追加
          if (issue.comments > 0) {
            score += 5;
          }
        }
        
        // スコアが0以上なら検索結果として含める
        issue.searchScore = score;
        return score > 0;
      });
    }
    
    // 結果のソート
    let sortedIssues = [...filteredIssues];
    
    switch (sortBy) {
      case 'newest':
        sortedIssues.sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));
        break;
      case 'oldest':
        sortedIssues.sort((a, b) => new Date(a.updated_at) - new Date(b.updated_at));
        break;
      case 'relevance':
      default:
        // クエリが空の場合は新しい順にする
        if (!query || query.length < 2) {
          sortedIssues.sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));
        } else {
          sortedIssues.sort((a, b) => b.searchScore - a.searchScore);
        }
        break;
    }
    
    // 指定件数に制限
    return sortedIssues.slice(0, limit);
  }

  function highlightText(text, query) {
    if (!text || !query) return text || '';
    
    try {
      const terms = query.toLowerCase().split(/\s+/).filter(term => term.length > 1);
      let highlightedText = text;
      
      // 複数の検索語に対応してハイライト
      terms.forEach(term => {
        const regex = new RegExp(`(${escapeRegExp(term)})`, 'gi');
        highlightedText = highlightedText.replace(regex, '<mark class="search-highlight">$1</mark>');
      });
      
      return highlightedText;
    } catch (error) {
      console.error('ハイライト処理でエラーが発生しました:', error);
      return text;
    }
  }

  function extractContext(text, query, contextLength = 50) {
    if (!text || !query) return text || '';
    
    try {
      const terms = query.toLowerCase().split(/\s+/).filter(term => term.length > 1);
      const lowerText = text.toLowerCase();
      
      // 最も長い検索語を見つける（長い単語が一般的にユニークなため）
      const longestTerm = terms.sort((a, b) => b.length - a.length)[0] || query.toLowerCase();
      
      const matchIndex = lowerText.indexOf(longestTerm);
      
      if (matchIndex >= 0) {
        const startPos = Math.max(0, matchIndex - contextLength);
        const endPos = Math.min(text.length, matchIndex + longestTerm.length + contextLength);
        let excerpt = text.substring(startPos, endPos);
        
        // 前後が切れている場合は省略記号を追加
        if (startPos > 0) excerpt = '...' + excerpt;
        if (endPos < text.length) excerpt = excerpt + '...';
        
        return excerpt;
      }
      
      // 本文にキーワードが含まれない場合は先頭を表示
      return text.substring(0, 100) + (text.length > 100 ? '...' : '');
    } catch (error) {
      console.error('コンテキスト抽出でエラーが発生しました:', error);
      return text.substring(0, 100) + (text.length > 100 ? '...' : '');
    }
  }

  function escapeRegExp(string) {
    if (!string) return '';
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\\\$&');
  }

  // タグカラーの最適化
  function getOptimizedTagStyle(labelName, labelColor) {
    // 特定のタグには固定の色を割り当てる
    const tagColors = {
      'documentation': { bg: '#0EA5E9', color: '#FFFFFF' }, // 青系
      'wiki': { bg: '#10B981', color: '#FFFFFF' }, // 緑系
      'feature': { bg: '#8B5CF6', color: '#FFFFFF' }, // 紫系
      'bug': { bg: '#EF4444', color: '#FFFFFF' }, // 赤系
      'enhancement': { bg: '#F59E0B', color: '#FFFFFF' }, // オレンジ系
      'help wanted': { bg: '#EC4899', color: '#FFFFFF' } // ピンク系
    };
    
    // 特定のタグに定義されている場合はそれを使用
    const lowerLabelName = labelName.toLowerCase();
    if (tagColors[lowerLabelName]) {
      return {
        bg: tagColors[lowerLabelName].bg,
        color: tagColors[lowerLabelName].color
      };
    }
    
    // それ以外は提供された色を使用するが、コントラスト比を改善
    const color = labelColor || '888888';
    // 暗い背景色に明るいテキストを使用
    return {
      bg: `#${color}`,
      color: isLightColor(color) ? '#000000' : '#FFFFFF'
    };
  }
  
  // 色が明るいかどうかを判定
  function isLightColor(hexColor) {
    // 16進数のカラーコードをRGBに変換
    const r = parseInt(hexColor.substr(0, 2), 16);
    const g = parseInt(hexColor.substr(2, 2), 16);
    const b = parseInt(hexColor.substr(4, 2), 16);
    
    // 明るさを計算 (YIQ方式)
    const yiq = ((r * 299) + (g * 587) + (b * 114)) / 1000;
    
    return yiq >= 128; // 128以上なら明るい色と判定
  }

  // 検索ヒストリー機能
  class SearchHistory {
    constructor(maxEntries = 5) {
      this.maxEntries = maxEntries;
      this.history = this.loadHistory();
    }
    
    loadHistory() {
      try {
        const saved = localStorage.getItem('wiki_search_history');
        return saved ? JSON.parse(saved) : [];
      } catch (e) {
        console.error('検索履歴の読み込みに失敗しました:', e);
        return [];
      }
    }
    
    saveHistory() {
      try {
        localStorage.setItem('wiki_search_history', JSON.stringify(this.history));
      } catch (e) {
        console.error('検索履歴の保存に失敗しました:', e);
      }
    }
    
    addEntry(query) {
      if (!query || query.trim().length < 2) return;
      
      // 同じクエリがあれば削除（後で先頭に追加するため）
      this.history = this.history.filter(entry => entry.query !== query);
      
      // 新しいエントリを追加
      this.history.unshift({
        query,
        timestamp: new Date().toISOString()
      });
      
      // 最大件数を超えたら古いものを削除
      if (this.history.length > this.maxEntries) {
        this.history = this.history.slice(0, this.maxEntries);
      }
      
      this.saveHistory();
    }
    
    getEntries() {
      return this.history;
    }
    
    clear() {
      this.history = [];
      this.saveHistory();
    }
  }

  // クライアントサイド検索機能の拡張版
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      const searchInput = document.getElementById('search-input');
      const searchResults = document.getElementById('search-results');
      const advancedToggle = document.getElementById('search-advanced-toggle');
      const advancedOptions = document.getElementById('advanced-search-options');
      const searchTitle = document.getElementById('search-title');
      const searchBody = document.getElementById('search-body');
      const searchLabels = document.getElementById('search-labels');
      const searchComments = document.getElementById('search-comments');
      const searchSort = document.getElementById('search-sort');
      const searchLimit = document.getElementById('search-limit');
      const searchReset = document.getElementById('search-reset');
      const searchExecute = document.getElementById('search-execute');
      const labelFilters = document.getElementById('label-filters');
      const assigneeFilters = document.getElementById('assignee-filters');
      
      let issues = [];
      let selectedResultIndex = -1;
      let debounceTimeout = null;
      let searchHistory = new SearchHistory(10);
      const BASE_PATH = '/starlight-issue-wiki'; // または適切なパスを設定
      
      // 選択されたラベルと担当者を追跡
      let selectedLabels = [];
      let selectedAssignees = [];
      let allLabels = [];
      let allAssignees = [];

      // GitHub APIからissueデータを取得
      async function fetchIssues() {
        try {
          // Openのイシューのみを取得
          const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues?state=open&per_page=100');
          if (!response.ok) throw new Error('GitHub API error');
          const allItems = await response.json();
          // プルリクエストを除外する
          issues = allItems.filter(item => !item.pull_request);
          console.log(`取得したIssue数: ${issues.length}`);
          
          // ラベルと担当者のリストを生成
          extractLabelsAndAssignees();
          
          return issues;
        } catch (error) {
          console.error('Error fetching issues:', error);
          return [];
        }
      }
      
      // ラベルと担当者のリストを抽出
      function extractLabelsAndAssignees() {
        // ラベルを抽出
        const labelSet = new Set();
        issues.forEach(issue => {
          if (issue.labels && issue.labels.length > 0) {
            issue.labels.forEach(label => {
              labelSet.add(label.name);
            });
          }
        });
        allLabels = Array.from(labelSet).sort();
        
        // 担当者を抽出
        const assigneeSet = new Set();
        issues.forEach(issue => {
          if (issue.assignees && issue.assignees.length > 0) {
            issue.assignees.forEach(assignee => {
              assigneeSet.add(assignee.login);
            });
          }
        });
        allAssignees = Array.from(assigneeSet).sort();
        
        // フィルター用のUIを生成
        populateFilters();
      }
      
      // フィルターUIを生成
      function populateFilters() {
        if (labelFilters && allLabels.length > 0) {
          labelFilters.innerHTML = allLabels.map(label => `
            <label class="filter-item">
              <input type="checkbox" class="label-checkbox" value="${label}">
              <span>${label}</span>
            </label>
          `).join('');
          
          // イベントリスナーを設定
          const labelCheckboxes = document.querySelectorAll('.label-checkbox');
          labelCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
              updateSelectedLabels();
            });
          });
        } else if (labelFilters) {
          labelFilters.innerHTML = '<div class="filter-empty">利用可能なラベルがありません</div>';
        }
        
        if (assigneeFilters && allAssignees.length > 0) {
          assigneeFilters.innerHTML = allAssignees.map(assignee => `
            <label class="filter-item">
              <input type="checkbox" class="assignee-checkbox" value="${assignee}">
              <span>${assignee}</span>
            </label>
          `).join('');
          
          // イベントリスナーを設定
          const assigneeCheckboxes = document.querySelectorAll('.assignee-checkbox');
          assigneeCheckboxes.forEach(checkbox => {
            checkbox.addEventListener('change', () => {
              updateSelectedAssignees();
            });
          });
        } else if (assigneeFilters) {
          assigneeFilters.innerHTML = '<div class="filter-empty">利用可能な担当者がありません</div>';
        }
      }
      
      // 選択されたラベルを更新
      function updateSelectedLabels() {
        const labelCheckboxes = document.querySelectorAll('.label-checkbox:checked');
        selectedLabels = Array.from(labelCheckboxes).map(checkbox => checkbox.value);
      }
      
      // 選択された担当者を更新
      function updateSelectedAssignees() {
        const assigneeCheckboxes = document.querySelectorAll('.assignee-checkbox:checked');
        selectedAssignees = Array.from(assigneeCheckboxes).map(checkbox => checkbox.value);
      }

      // 検索結果のアイテムにフォーカスを設定
      function setFocusOnResult(index) {
        const resultItems = searchResults.querySelectorAll('.search-result-item');
        if (resultItems.length === 0) return;
        
        // 前の選択をクリア
        resultItems.forEach(item => {
          item.classList.remove('search-result-selected');
          item.setAttribute('aria-selected', 'false');
        });
        
        // 新しい選択を設定
        selectedResultIndex = (index + resultItems.length) % resultItems.length;
        const selectedItem = resultItems[selectedResultIndex];
        selectedItem.classList.add('search-result-selected');
        selectedItem.setAttribute('aria-selected', 'true');
        selectedItem.focus();
      }

      // 詳細検索パネルの表示/非表示を切り替え
      function toggleAdvancedSearch() {
        const isVisible = advancedOptions.style.display !== 'none';
        advancedOptions.style.display = isVisible ? 'none' : 'block';
        advancedToggle.setAttribute('aria-expanded', !isVisible);
      }

      // 検索オプションをリセット
      function resetSearchOptions() {
        searchTitle.checked = true;
        searchBody.checked = true;
        searchLabels.checked = false;
        searchComments.checked = false;
        searchSort.value = 'relevance';
        searchLimit.value = '5';
        
        // ラベルと担当者のフィルターをリセット
        const labelCheckboxes = document.querySelectorAll('.label-checkbox');
        labelCheckboxes.forEach(checkbox => {
          checkbox.checked = false;
        });
        
        const assigneeCheckboxes = document.querySelectorAll('.assignee-checkbox');
        assigneeCheckboxes.forEach(checkbox => {
          checkbox.checked = false;
        });
        
        selectedLabels = [];
        selectedAssignees = [];
      }

      // 検索機能の実行
      function performSearch(query, options = {}) {
        if (!searchResults) return;

        // デフォルトオプションとマージ
        const searchOptions = {
          searchInTitle: options.searchInTitle !== undefined ? options.searchInTitle : searchTitle.checked,
          searchInBody: options.searchInBody !== undefined ? options.searchInBody : searchBody.checked,
          searchInLabels: options.searchInLabels !== undefined ? options.searchInLabels : searchLabels.checked,
          searchInComments: options.searchInComments !== undefined ? options.searchInComments : searchComments.checked,
          selectedLabels: options.selectedLabels || selectedLabels,
          selectedAssignees: options.selectedAssignees || selectedAssignees,
          sortBy: options.sortBy || searchSort.value,
          limit: options.limit || parseInt(searchLimit.value, 10) || 5
        };

        const lowerQuery = query ? query.toLowerCase() : '';
        const matches = filterIssuesByQuery(issues, query, searchOptions);

        if (matches.length === 0) {
          // 検索履歴を表示
          const historyEntries = searchHistory.getEntries();
          if (historyEntries.length > 0) {
            searchResults.innerHTML = `
              <div class="no-results">検索結果がありません</div>
              <div class="search-history">
                <h3 class="history-title">最近の検索</h3>
                <ul class="history-list">
                  ${historyEntries.map(entry => `
                    <li class="history-item">
                      <button class="history-button" data-query="${entry.query}">
                        <span class="history-icon">⟲</span>
                        <span class="history-text">${entry.query}</span>
                      </button>
                    </li>
                  `).join('')}
                </ul>
              </div>
            `;
            
            // 検索履歴ボタンにイベントリスナーを追加
            const historyButtons = searchResults.querySelectorAll('.history-button');
            historyButtons.forEach(button => {
              button.addEventListener('click', () => {
                const historyQuery = button.getAttribute('data-query');
                searchInput.value = historyQuery;
                performSearch(historyQuery);
              });
            });
          } else {
            searchResults.innerHTML = '<div class="no-results">検索結果がありません</div>';
          }
        } else {
          // 検索結果を表示
          searchResults.innerHTML = matches.map((issue, index) => {
            // タイトル内のキーワードをハイライト
            const highlightedTitle = lowerQuery ? highlightText(issue.title, lowerQuery) : issue.title;
            
            // 本文の関連箇所を抽出してハイライト
            let excerptHtml = '';
            if (issue.body && lowerQuery) {
              const excerpt = extractContext(issue.body, lowerQuery);
              excerptHtml = highlightText(excerpt, lowerQuery);
            } else if (issue.body) {
              excerptHtml = issue.body.substring(0, 100) + (issue.body.length > 100 ? '...' : '');
            }
            
            // ラベル表示の処理
            const labelsHtml = issue.labels && issue.labels.length > 0 
              ? `<div class="search-result-labels">
                  ${issue.labels.map(label => {
                    const style = getOptimizedTagStyle(label.name, label.color);
                    return `
                      <span class="search-tag" style="background-color: ${style.bg}; color: ${style.color};">
                        ${label.name}
                      </span>
                    `;
                  }).join('')}
                </div>` 
              : '';
            
            // 担当者表示
            const assigneesHtml = issue.assignees && issue.assignees.length > 0
              ? `<div class="search-result-assignees">
                  担当者: ${issue.assignees.map(assignee => assignee.login).join(', ')}
                </div>`
              : '';
            
            // コメント数表示
            const commentsHtml = issue.comments > 0
              ? `<div class="search-result-comments">
                  コメント数: ${issue.comments}
                </div>`
              : '';
            
            // 検索スコアの表示（デバッグモード）
            const debugScoreHtml = '';
            /*const debugScoreHtml = issue.searchScore 
              ? `<div class="search-result-score">スコア: ${issue.searchScore}</div>` 
              : '';*/
            
            return `
              <a href="${BASE_PATH}/wiki/${issue.number}" 
                 class="search-result-item" 
                 role="option" 
                 id="search-result-${index}" 
                 aria-selected="false" 
                 tabindex="-1">
                <div class="search-result-content">
                  <div class="search-result-header">
                    <div class="search-result-title">${highlightedTitle}</div>
                    <div class="search-result-meta">
                      <span class="search-result-number">#${issue.number}</span>
                      <span class="search-result-date">更新: ${new Date(issue.updated_at).toLocaleDateString('ja-JP')}</span>
                    </div>
                  </div>
                  ${labelsHtml}
                  ${assigneesHtml}
                  ${commentsHtml}
                  ${excerptHtml ? `<div class="search-result-excerpt">${excerptHtml}</div>` : ''}
                  ${debugScoreHtml}
                </div>
              </a>
            `;
          }).join('');
          
          // 検索履歴に追加（クエリがある場合のみ）
          if (query && query.trim()) {
            searchHistory.addEntry(query);
          }
        }

        searchResults.style.display = 'block';
        selectedResultIndex = -1; // 選択をリセット
      }

      // 検索のデバウンス処理
      function debounceSearch(query) {
        clearTimeout(debounceTimeout);
        debounceTimeout = setTimeout(() => {
          performSearch(query);
        }, 300); // 300ms待機
      }

      // イベントリスナー
      if (searchInput) {
        searchInput.addEventListener('input', (e) => {
          debounceSearch(e.target.value.trim());
        });

        searchInput.addEventListener('focus', () => {
          if (issues.length === 0) fetchIssues();
        });

        // キーボードナビゲーション
        searchInput.addEventListener('keydown', (e) => {
          if (!searchResults.style.display || searchResults.style.display === 'none') return;
          
          const resultItems = searchResults.querySelectorAll('.search-result-item');
          if (resultItems.length === 0) return;
          
          switch (e.key) {
            case 'ArrowDown':
              e.preventDefault(); // デフォルトの動作を防止
              setFocusOnResult(selectedResultIndex + 1);
              break;
              
            case 'ArrowUp':
              e.preventDefault(); // デフォルトの動作を防止
              setFocusOnResult(selectedResultIndex - 1);
              break;
              
            case 'Enter':
              if (selectedResultIndex >= 0 && selectedResultIndex < resultItems.length) {
                e.preventDefault();
                resultItems[selectedResultIndex].click();
              }
              break;
              
            case 'Escape':
              searchResults.style.display = 'none';
              searchInput.focus();
              break;
          }
        });

        // 検索結果内でのキーボードナビゲーション
        searchResults.addEventListener('keydown', (e) => {
          const resultItems = searchResults.querySelectorAll('.search-result-item');
          if (resultItems.length === 0) return;
          
          switch (e.key) {
            case 'ArrowDown':
              e.preventDefault();
              setFocusOnResult(selectedResultIndex + 1);
              break;
              
            case 'ArrowUp':
              e.preventDefault();
              setFocusOnResult(selectedResultIndex - 1);
              break;
              
            case 'Escape':
              searchResults.style.display = 'none';
              searchInput.focus();
              break;
          }
        });

        // 詳細検索の表示/非表示ボタン
        if (advancedToggle) {
          advancedToggle.addEventListener('click', toggleAdvancedSearch);
        }

        // 検索リセットボタン
        if (searchReset) {
          searchReset.addEventListener('click', resetSearchOptions);
        }

        // 検索実行ボタン
        if (searchExecute) {
          searchExecute.addEventListener('click', () => {
            performSearch(searchInput.value.trim());
          });
        }

        // クリック以外の場所をクリックしたら結果を非表示
        document.addEventListener('click', (e) => {
          const isSearchComponent = 
            searchInput.contains(e.target) || 
            searchResults.contains(e.target) || 
            (advancedOptions && advancedOptions.contains(e.target)) ||
            (advancedToggle && advancedToggle.contains(e.target));
            
          if (!isSearchComponent) {
            searchResults.style.display = 'none';
            // 詳細検索は閉じない - ユーザーが意図的に開いた場合は残す
          }
        });
      }

      // 初期ロード
      await fetchIssues();
      resetSearchOptions();
    } catch (error) {
      console.error('検索機能の初期化に失敗しました:', error);
    }
  });
</script>

<style is:global>
  /* グローバルスタイルとして適用 */
  .search-container {
    position: relative;
    margin: 1rem 0;
    z-index: 100;
  }

  .search-form {
    position: relative;
    display: flex;
    align-items: center;
  }

  .search-input {
    width: 100%;
    padding: 0.5rem 1rem;
    padding-left: 2.5rem;
    border: 1px solid #ddd;
    border-radius: 0.375rem;
    font-size: 1rem;
    background-color: #fff;
    transition: all 0.2s;
  }

  .dark .search-input {
    background-color: #222;
    border-color: #444;
    color: #fff;
  }

  .search-input:focus {
    outline: none;
    border-color: #4f6df5;
    box-shadow: 0 0 0 3px rgba(79, 109, 245, 0.2);
  }

  .search-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    opacity: 0.6;
  }
  
  .search-advanced-toggle {
    background: none;
    border: none;
    color: #666;
    padding: 0.5rem;
    margin-left: 0.5rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 0.25rem;
    transition: all 0.2s;
  }
  
  .search-advanced-toggle:hover {
    background-color: rgba(0, 0, 0, 0.05);
    color: #333;
  }
  
  .dark .search-advanced-toggle {
    color: #aaa;
  }
  
  .dark .search-advanced-toggle:hover {
    background-color: rgba(255, 255, 255, 0.1);
    color: #fff;
  }
  
  .advanced-search-options {
    margin-top: 0.5rem;
    padding: 1rem;
    background-color: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: 0.375rem;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }
  
  .dark .advanced-search-options {
    background-color: #1e293b;
    border-color: #334155;
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.3);
  }
  
  .options-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1rem;
  }
  
  .option-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }
  
  .option-group > label {
    font-weight: 500;
    font-size: 0.875rem;
    color: #4b5563;
  }
  
  .dark .option-group > label {
    color: #9ca3af;
  }
  
  .options-row {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }
  
  .option-checkbox {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    font-size: 0.875rem;
    color: #4b5563;
    cursor: pointer;
  }
  
  .dark .option-checkbox {
    color: #d1d5db;
  }
  
  .filter-container {
    max-height: 150px;
    overflow-y: auto;
    border: 1px solid #e2e8f0;
    border-radius: 0.25rem;
    padding: 0.5rem;
    background-color: white;
  }
  
  .dark .filter-container {
    background-color: #1f2937;
    border-color: #4b5563;
  }
  
  .filter-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 0.25rem;
    padding: 0.25rem;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    cursor: pointer;
  }
  
  .filter-item:hover {
    background-color: #f3f4f6;
  }
  
  .dark .filter-item:hover {
    background-color: #374151;
  }
  
  .filter-loading, .filter-empty {
    font-size: 0.875rem;
    color: #9ca3af;
    font-style: italic;
    text-align: center;
    padding: 0.5rem;
  }
  
  .search-select {
    padding: 0.375rem 0.75rem;
    border: 1px solid #d1d5db;
    border-radius: 0.25rem;
    background-color: white;
    font-size: 0.875rem;
    color: #4b5563;
  }
  
  .dark .search-select {
    background-color: #1f2937;
    border-color: #4b5563;
    color: #d1d5db;
  }
  
  .option-buttons {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
    align-items: flex-end;
  }
  
  .option-button {
    padding: 0.375rem 0.75rem;
    border: none;
    border-radius: 0.25rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .option-button:hover {
    transform: translateY(-1px);
  }
  
  .option-button-primary {
    background-color: #4f6df5;
    color: white;
  }
  
  .option-button-primary:hover {
    background-color: #3955d8;
    box-shadow: 0 2px 4px rgba(79, 109, 245, 0.3);
  }
  
  .option-button-secondary {
    background-color: #e5e7eb;
    color: #4b5563;
  }
  
  .option-button-secondary:hover {
    background-color: #d1d5db;
  }
  
  .dark .option-button-secondary {
    background-color: #374151;
    color: #d1d5db;
  }
  
  .dark .option-button-secondary:hover {
    background-color: #4b5563;
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 10;
    width: 100%;
    max-height: 600px;
    overflow-y: auto;
    background: #fff;
    border-radius: 0 0 0.375rem 0.375rem;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    border: 1px solid #ddd;
    border-top: none;
    display: none;
    margin-top: -2px;
  }

  .dark .search-results {
    background: #222;
    border-color: #444;
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.3), 0 4px 6px -2px rgba(0, 0, 0, 0.2);
  }

  .search-result-item {
    display: block;
    padding: 1rem;
    border-bottom: 1px solid #eaeaea;
    text-decoration: none;
    color: #333;
    transition: all 0.2s;
    outline: none;
  }

  .dark .search-result-item {
    border-color: #444;
    color: #eee;
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  .search-result-item:hover {
    background-color: rgba(79, 109, 245, 0.05);
    text-decoration: none;
    transform: translateY(-2px);
  }

  .search-result-selected,
  .search-result-item:focus {
    background-color: rgba(79, 109, 245, 0.1);
    box-shadow: 0 0 0 2px #4f6df5;
    outline: none;
    transform: translateY(-2px);
  }

  .dark .search-result-selected,
  .dark .search-result-item:focus {
    background-color: rgba(79, 109, 245, 0.2);
  }

  .search-result-content {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .search-result-header {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .search-result-title {
    font-weight: 600;
    color: #4f6df5;
    font-size: 1.1rem;
    line-height: 1.3;
  }

  .dark .search-result-title {
    color: #7b96ff;
  }

  .search-result-meta {
    display: flex;
    justify-content: space-between;
    font-size: 0.875rem;
    color: #666;
  }
  
  .dark .search-result-meta {
    color: #aaa;
  }
  
  .search-result-number {
    font-weight: 500;
    opacity: 0.7;
  }
  
  .search-result-date {
    font-style: italic;
  }
  
  .search-result-assignees, .search-result-comments {
    font-size: 0.875rem;
    color: #666;
    margin-top: -0.5rem;
  }
  
  .dark .search-result-assignees, .dark .search-result-comments {
    color: #aaa;
  }
  
  .search-result-excerpt {
    font-size: 0.9rem;
    line-height: 1.5;
    background-color: #f5f7fa;
    border-left: 3px solid #4f6df5;
    padding: 0.75rem;
    border-radius: 0 0.3rem 0.3rem 0;
    color: #333;
    margin-top: 0.25rem;
    max-height: 6rem;
    overflow-y: auto;
    white-space: pre-line;
  }
  
  .dark .search-result-excerpt {
    background-color: #2a2a2a;
    color: #ddd;
    border-left-color: #7b96ff;
  }
  
  .search-result-labels {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.25rem;
  }
  
  .search-tag {
    display: inline-block;
    padding: 0.25em 0.65em;
    border-radius: 1rem;
    font-size: 0.75rem;
    font-weight: 600;
    line-height: 1.2;
    text-shadow: 0 1px 1px rgba(0, 0, 0, 0.2);
    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);
    transition: all 0.2s ease;
  }
  
  .search-tag:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.15);
  }
  
  .search-highlight {
    background-color: rgba(255, 213, 79, 0.4);
    padding: 0.1em 0.2em;
    border-radius: 0.2em;
    font-weight: bold;
  }

  .dark .search-highlight {
    background-color: rgba(255, 213, 79, 0.3);
    color: #fff;
  }

  .no-results {
    padding: 1rem;
    text-align: center;
    color: #666;
    font-style: italic;
  }

  .dark .no-results {
    color: #aaa;
  }
  
  /* 検索履歴スタイル */
  .search-history {
    padding: 1rem;
    border-top: 1px solid #eaeaea;
  }
  
  .dark .search-history {
    border-top-color: #444;
  }
  
  .history-title {
    font-size: 0.9rem;
    color: #666;
    margin-top: 0;
    margin-bottom: 0.75rem;
  }
  
  .dark .history-title {
    color: #aaa;
  }
  
  .history-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .history-item {
    margin-bottom: 0.5rem;
  }
  
  .history-button {
    background: none;
    border: none;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: #4f6df5;
    font-size: 0.9rem;
    cursor: pointer;
    width: 100%;
    text-align: left;
    border-radius: 0.25rem;
    transition: all 0.2s;
  }
  
  .history-button:hover {
    background-color: rgba(79, 109, 245, 0.1);
  }
  
  .dark .history-button {
    color: #7b96ff;
  }
  
  .dark .history-button:hover {
    background-color: rgba(79, 109, 245, 0.2);
  }
  
  .history-icon {
    opacity: 0.6;
  }
  
  .search-result-score {
    font-size: 0.75rem;
    color: #666;
    background-color: #f5f5f5;
    padding: 0.1rem 0.4rem;
    border-radius: 0.25rem;
    align-self: flex-start;
  }
  
  .dark .search-result-score {
    color: #aaa;
    background-color: #333;
  }

  /* レスポンシブ対応 */
  @media (min-width: 768px) {
    .search-result-content {
      gap: 1rem;
    }
    
    .search-result-header {
      flex-direction: row;
      justify-content: space-between;
      align-items: flex-start;
    }
    
    .search-result-title {
      flex: 1;
    }
    
    .search-result-meta {
      flex-direction: column;
      align-items: flex-end;
      white-space: nowrap;
      margin-left: 1rem;
    }
  }
  
  @media (max-width: 640px) {
    .options-grid {
      grid-template-columns: 1fr;
    }
    
    .option-buttons {
      justify-content: center;
    }
  }
</style>
