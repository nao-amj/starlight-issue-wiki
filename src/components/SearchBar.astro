---
// 検索バーコンポーネント
import { BASE_PATH } from '../config';
---

<div class="search-container">
  <div class="search-form">
    <span class="search-icon">🔍</span>
    <input 
      type="text" 
      id="search-input" 
      class="search-input" 
      placeholder="Wikiページを検索..."
      aria-label="検索"
    />
  </div>
  <div id="search-results" class="search-results"></div>
</div>

<script is:inline>
  // 検索ユーティリティ関数を直接スクリプトに埋め込む
  function filterIssuesByQuery(issues, query) {
    if (!query || query.length < 2 || !Array.isArray(issues)) {
      return [];
    }
    
    const lowerQuery = query.toLowerCase();
    
    return issues.filter(issue => 
      (issue.title && issue.title.toLowerCase().includes(lowerQuery)) || 
      (issue.body && issue.body.toLowerCase().includes(lowerQuery))
    );
  }

  function highlightText(text, query) {
    if (!text || !query) return '';
    
    try {
      const regex = new RegExp(`(${escapeRegExp(query)})`, 'gi');
      return text.replace(regex, '<mark class="search-highlight">$1</mark>');
    } catch (error) {
      console.error('ハイライト処理でエラーが発生しました:', error);
      return text;
    }
  }

  function extractContext(text, query, contextLength = 50) {
    if (!text || !query) return '';
    
    try {
      const lowerText = text.toLowerCase();
      const lowerQuery = query.toLowerCase();
      const matchIndex = lowerText.indexOf(lowerQuery);
      
      if (matchIndex >= 0) {
        const startPos = Math.max(0, matchIndex - contextLength);
        const endPos = Math.min(text.length, matchIndex + lowerQuery.length + contextLength);
        let excerpt = text.substring(startPos, endPos);
        
        // 前後が切れている場合は省略記号を追加
        if (startPos > 0) excerpt = '...' + excerpt;
        if (endPos < text.length) excerpt = excerpt + '...';
        
        return excerpt;
      }
      
      // 本文にキーワードが含まれない場合は先頭を表示
      return text.substring(0, 100) + (text.length > 100 ? '...' : '');
    } catch (error) {
      console.error('コンテキスト抽出でエラーが発生しました:', error);
      return text.substring(0, 100) + (text.length > 100 ? '...' : '');
    }
  }

  function escapeRegExp(string) {
    if (!string) return '';
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
  }

  // クライアントサイド検索機能
  document.addEventListener('DOMContentLoaded', async () => {
    try {
      const searchInput = document.getElementById('search-input');
      const searchResults = document.getElementById('search-results');
      let issues = [];
      const BASE_PATH = '/starlight-issue-wiki'; // または適切なパスを設定

      // GitHub APIからissueデータを取得
      async function fetchIssues() {
        try {
          const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues?state=all&per_page=100');
          if (!response.ok) throw new Error('GitHub API error');
          issues = await response.json();
          console.log(`取得したIssue数: ${issues.length}`);
        } catch (error) {
          console.error('Error fetching issues:', error);
        }
      }

      // 検索機能
      function performSearch(query) {
        if (!query || query.length < 2) {
          searchResults.innerHTML = '';
          searchResults.style.display = 'none';
          return;
        }

        const lowerQuery = query.toLowerCase();
        const matches = filterIssuesByQuery(issues, query);

        if (matches.length === 0) {
          searchResults.innerHTML = '<div class="no-results">検索結果がありません</div>';
        } else {
          searchResults.innerHTML = matches.slice(0, 5).map(issue => {
            // タイトル内のキーワードをハイライト
            const highlightedTitle = highlightText(issue.title, lowerQuery);
            
            // 本文の関連箇所を抽出してハイライト
            let excerptHtml = '';
            if (issue.body) {
              const excerpt = extractContext(issue.body, lowerQuery);
              excerptHtml = highlightText(excerpt, lowerQuery);
            }
            
            return `
              <a href="${BASE_PATH}/wiki/${issue.number}" class="search-result-item">
                <div class="search-result-title">${highlightedTitle}</div>
                <div class="search-result-meta">
                  <span class="search-result-number">#${issue.number}</span>
                  <span class="search-result-date">更新: ${new Date(issue.updated_at).toLocaleDateString('ja-JP')}</span>
                </div>
                ${excerptHtml ? `<div class="search-result-excerpt">${excerptHtml}</div>` : ''}
                ${issue.labels && issue.labels.length > 0 ? `
                  <div class="search-result-labels">
                    ${issue.labels.map(label => `
                      <span class="search-tag" style="background-color: #${label.color}20; color: #${label.color}; border: 1px solid #${label.color}40;">
                        ${label.name}
                      </span>
                    `).join('')}
                  </div>
                ` : ''}
              </a>
            `;
          }).join('');
        }

        searchResults.style.display = 'block';
      }

      // イベントリスナー
      if (searchInput) {
        searchInput.addEventListener('input', (e) => {
          performSearch(e.target.value.trim());
        });

        searchInput.addEventListener('focus', () => {
          if (issues.length === 0) fetchIssues();
        });

        // クリック以外の場所をクリックしたら結果を非表示
        document.addEventListener('click', (e) => {
          if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
            searchResults.style.display = 'none';
          }
        });
      }

      // 初期ロード
      fetchIssues();
    } catch (error) {
      console.error('検索機能の初期化に失敗しました:', error);
    }
  });
</script>

<style>
  .search-container {
    position: relative;
    margin: var(--space-md) 0;
    z-index: 100;
  }

  .search-form {
    position: relative;
  }

  .search-input {
    width: 100%;
    padding: var(--space-sm) var(--space-md);
    padding-left: 2.5rem;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    font-size: var(--font-size-md);
    background-color: var(--color-background-panel);
    transition: all var(--transition-speed);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.2);
  }

  .search-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    opacity: 0.6;
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 10;
    width: 100%;
    max-height: 500px;
    overflow-y: auto;
    background: var(--color-background-panel);
    border-radius: 0 0 var(--border-radius-md) var(--border-radius-md);
    box-shadow: var(--box-shadow-lg);
    border: 1px solid var(--color-border);
    border-top: none;
    display: none;
    margin-top: -2px;
  }

  .search-result-item {
    display: block;
    padding: var(--space-md);
    border-bottom: 1px solid var(--color-border);
    text-decoration: none;
    color: var(--color-text);
    transition: all var(--transition-speed);
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  .search-result-item:hover {
    background-color: rgba(37, 99, 235, 0.05);
    text-decoration: none;
    transform: translateY(-2px);
  }

  .search-result-title {
    font-weight: 500;
    margin-bottom: 0.5rem;
    color: var(--color-primary);
    font-size: 1.1rem;
  }

  .search-result-meta {
    display: flex;
    justify-content: space-between;
    font-size: var(--font-size-sm);
    color: var(--color-text-light);
    margin-bottom: 0.75rem;
  }
  
  .search-result-number {
    font-weight: 500;
    opacity: 0.7;
  }
  
  .search-result-date {
    font-style: italic;
  }
  
  .search-result-excerpt {
    font-size: 0.95rem;
    line-height: 1.6;
    margin-bottom: 0.75rem;
    border-left: 3px solid var(--color-primary-light);
    padding-left: 0.75rem;
    color: var(--color-text);
  }
  
  .search-result-labels {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }
  
  .search-tag {
    display: inline-block;
    padding: 0.2em 0.5em;
    border-radius: 0.25rem;
    font-size: 0.8rem;
    font-weight: 500;
    line-height: 1.2;
  }
  
  .search-highlight {
    background-color: rgba(255, 213, 79, 0.4);
    padding: 0.1em 0.2em;
    border-radius: 0.2em;
    font-weight: bold;
  }

  .no-results {
    padding: var(--space-md);
    text-align: center;
    color: var(--color-text-light);
    font-style: italic;
  }
</style>
