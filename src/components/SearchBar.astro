---
// Ê§úÁ¥¢„Éê„Éº„Ç≥„É≥„Éù„Éº„Éç„É≥„Éà
---

<div class="search-container">
  <div class="search-form">
    <span class="search-icon">üîç</span>
    <input 
      type="text" 
      id="search-input" 
      class="search-input" 
      placeholder="Wiki„Éö„Éº„Ç∏„ÇíÊ§úÁ¥¢..."
      aria-label="Ê§úÁ¥¢"
    />
  </div>
  <div id="search-results" class="search-results"></div>
</div>

<script>
  // „ÇØ„É©„Ç§„Ç¢„É≥„Éà„Çµ„Ç§„ÉâÊ§úÁ¥¢Ê©üËÉΩ
  document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const searchResults = document.getElementById('search-results');
    let issues = [];

    // GitHub API„Åã„Çâissue„Éá„Éº„Çø„ÇíÂèñÂæó
    async function fetchIssues() {
      try {
        const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues?state=all&per_page=100');
        if (!response.ok) throw new Error('GitHub API error');
        issues = await response.json();
      } catch (error) {
        console.error('Error fetching issues:', error);
      }
    }

    // Ê§úÁ¥¢Ê©üËÉΩ
    function performSearch(query) {
      if (!query || query.length < 2) {
        searchResults.innerHTML = '';
        searchResults.style.display = 'none';
        return;
      }

      const lowerQuery = query.toLowerCase();
      const matches = issues.filter(issue => 
        issue.title.toLowerCase().includes(lowerQuery) || 
        issue.body.toLowerCase().includes(lowerQuery)
      );

      if (matches.length === 0) {
        searchResults.innerHTML = '<div class="no-results">Ê§úÁ¥¢ÁµêÊûú„Åå„ÅÇ„Çä„Åæ„Åõ„Çì</div>';
      } else {
        searchResults.innerHTML = matches.slice(0, 5).map(issue => `
          <a href="/starlight-issue-wiki/wiki/${issue.number}" class="search-result-item">
            <div class="search-result-title">${issue.title}</div>
            <div class="search-result-meta">
              <span>#${issue.number}</span>
              <span>Êõ¥Êñ∞: ${new Date(issue.updated_at).toLocaleDateString('ja-JP')}</span>
            </div>
          </a>
        `).join('');
      }

      searchResults.style.display = 'block';
    }

    // „Ç§„Éô„É≥„Éà„É™„Çπ„Éä„Éº
    if (searchInput) {
      searchInput.addEventListener('input', (e) => {
        performSearch(e.target.value.trim());
      });

      searchInput.addEventListener('focus', () => {
        if (issues.length === 0) fetchIssues();
      });

      // „ÇØ„É™„ÉÉ„ÇØ‰ª•Â§ñ„ÅÆÂ†¥ÊâÄ„Çí„ÇØ„É™„ÉÉ„ÇØ„Åó„Åü„ÇâÁµêÊûú„ÇíÈùûË°®Á§∫
      document.addEventListener('click', (e) => {
        if (!searchInput.contains(e.target) && !searchResults.contains(e.target)) {
          searchResults.style.display = 'none';
        }
      });
    }

    // ÂàùÊúü„É≠„Éº„Éâ
    fetchIssues();
  });
</script>

<style>
  .search-container {
    position: relative;
    margin: var(--space-md) 0;
    z-index: 100;
  }

  .search-form {
    position: relative;
  }

  .search-input {
    width: 100%;
    padding: var(--space-sm) var(--space-md);
    padding-left: 2.5rem;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-md);
    font-size: var(--font-size-md);
    background-color: var(--color-background-panel);
    transition: all var(--transition-speed);
  }

  .search-input:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.2);
  }

  .search-icon {
    position: absolute;
    left: 0.75rem;
    top: 50%;
    transform: translateY(-50%);
    opacity: 0.6;
  }

  .search-results {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    z-index: 10;
    width: 100%;
    max-height: 400px;
    overflow-y: auto;
    background: var(--color-background-panel);
    border-radius: 0 0 var(--border-radius-md) var(--border-radius-md);
    box-shadow: var(--box-shadow-md);
    border: 1px solid var(--color-border);
    border-top: none;
    display: none;
    margin-top: -2px;
  }

  .search-result-item {
    display: block;
    padding: var(--space-md);
    border-bottom: 1px solid var(--color-border);
    text-decoration: none;
    color: var(--color-text);
    transition: background-color var(--transition-speed);
  }

  .search-result-item:last-child {
    border-bottom: none;
  }

  .search-result-item:hover {
    background-color: rgba(37, 99, 235, 0.05);
    text-decoration: none;
  }

  .search-result-title {
    font-weight: 500;
    margin-bottom: 0.25rem;
    color: var(--color-primary);
  }

  .search-result-meta {
    display: flex;
    justify-content: space-between;
    font-size: var(--font-size-sm);
    color: var(--color-text-light);
  }

  .no-results {
    padding: var(--space-md);
    text-align: center;
    color: var(--color-text-light);
  }
</style>
