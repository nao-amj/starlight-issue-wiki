---
// Noteへのエクスポート機能コンポーネント
import { BASE_PATH } from '../config';

// 全てのIssueを受け取る
interface Props {
  issues: any[];
}

const { issues } = Astro.props;
---

<div class="export-feature">
  <h2>Noteに記事を投稿</h2>
  <p>好きなページを選択して、Noteに投稿することができます。</p>
  
  <div class="export-form">
    <div class="select-wrapper">
      <label for="export-select">エクスポートするページを選択:</label>
      <select id="export-select" class="export-select">
        <option value="">選択してください</option>
        {issues.map(issue => (
          <option value={issue.number}>{issue.title}</option>
        ))}
      </select>
    </div>
    
    <div class="export-options">
      <label class="checkbox-wrapper">
        <input type="checkbox" id="include-meta" checked />
        メタデータを含める（タイトル、日付、カテゴリー）
      </label>
      
      <label class="checkbox-wrapper">
        <input type="checkbox" id="format-markdown" checked />
        Markdown形式を保持する
      </label>
      
      <label class="checkbox-wrapper">
        <input type="checkbox" id="auto-adjust" checked />
        Note形式に最適化する
      </label>
    </div>
    
    <div class="export-buttons">
      <button id="preview-export" class="button secondary">プレビュー</button>
      <button id="export-to-note" class="button accent">エクスポート</button>
    </div>
  </div>
  
  <!-- プレビューモーダル -->
  <div id="preview-modal" class="modal">
    <div class="modal-content">
      <div class="modal-header">
        <h3>エクスポートプレビュー</h3>
        <button class="close-button">&times;</button>
      </div>
      <div class="modal-body">
        <div id="preview-content" class="preview-content"></div>
      </div>
      <div class="modal-footer">
        <button class="button secondary close-modal">閉じる</button>
        <button id="confirm-export" class="button accent">Noteにエクスポート</button>
      </div>
    </div>
  </div>
</div>

<script src="../lib/export.js"></script>

<script>
  // Noteエクスポート機能
  document.addEventListener('DOMContentLoaded', () => {
    // 必要な関数をインポート
    import('../lib/export.js').then(module => {
      const { convertIssueToNoteFormat, generateNoteExportHtml, downloadExportFile } = module;
      
      const exportSelect = document.getElementById('export-select');
      const previewBtn = document.getElementById('preview-export');
      const exportBtn = document.getElementById('export-to-note');
      const previewModal = document.getElementById('preview-modal');
      const previewContent = document.getElementById('preview-content');
      const confirmExportBtn = document.getElementById('confirm-export');
      const closeButtons = document.querySelectorAll('.close-button, .close-modal');
      
      // モーダルを閉じる
      closeButtons.forEach(button => {
        button.addEventListener('click', () => {
          previewModal.style.display = 'none';
        });
      });
      
      // モーダル外をクリックして閉じる
      window.addEventListener('click', (e) => {
        if (e.target === previewModal) {
          previewModal.style.display = 'none';
        }
      });
      
      // プレビューボタン
      previewBtn.addEventListener('click', () => {
        const selectedIssueId = exportSelect.value;
        if (!selectedIssueId) {
          alert('エクスポートするページを選択してください。');
          return;
        }
        
        // 選択されたIssueを取得
        fetch(`https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues/${selectedIssueId}`)
          .then(response => response.json())
          .then(issue => {
            const options = {
              includeMeta: document.getElementById('include-meta').checked,
              formatMarkdown: document.getElementById('format-markdown').checked,
              autoAdjust: document.getElementById('auto-adjust').checked
            };
            
            // Note用にフォーマットする
            const noteContent = convertIssueToNoteFormat(issue, options);
            
            // プレビュー表示
            previewContent.innerHTML = noteContent;
            previewModal.style.display = 'block';
          })
          .catch(error => {
            console.error('Error fetching issue:', error);
            alert('エラーが発生しました。もう一度お試しください。');
          });
      });
      
      // エクスポートボタン
      exportBtn.addEventListener('click', () => {
        const selectedIssueId = exportSelect.value;
        if (!selectedIssueId) {
          alert('エクスポートするページを選択してください。');
          return;
        }
        
        // プレビューをスキップしてエクスポートする
        previewBtn.click();
      });
      
      // エクスポート確認ボタン
      confirmExportBtn.addEventListener('click', () => {
        const content = previewContent.innerHTML;
        const title = document.querySelector('#export-select option:checked').text;
        
        // Noteエクスポート用のHTMLを生成
        const exportHtml = generateNoteExportHtml(content, title);
        
        // ファイル名を作成
        const filename = `${title.replace(/[\s\:\/\?\*\|\<\>\"]/g, '_')}_note.html`;
        
        // ダウンロード
        downloadExportFile(exportHtml, filename);
        
        // Noteのエディタを開く構成
        setTimeout(() => {
          if (confirm('Noteのエディタを開きますか？')) {
            window.open('https://note.com/new', '_blank');
          }
          previewModal.style.display = 'none';
        }, 1000);
      });
    });
  });
</script>

<style>
  /* Noteエクスポート機能のスタイル */
  .export-feature {
    margin-top: 3rem;
    padding-top: 2rem;
    border-top: 1px solid var(--color-border);
  }
  
  .export-form {
    background-color: var(--color-background);
    padding: 1.5rem;
    border-radius: var(--border-radius-md);
    border: 1px solid var(--color-border);
    margin-top: 1.5rem;
  }
  
  .select-wrapper {
    margin-bottom: 1.5rem;
  }
  
  .export-select {
    display: block;
    width: 100%;
    padding: 0.75rem;
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius-sm);
    background-color: var(--color-background-panel);
    margin-top: 0.5rem;
    font-family: var(--font-family);
    font-size: var(--font-size-md);
  }
  
  .export-select:focus {
    outline: none;
    border-color: var(--color-primary);
    box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.2);
  }
  
  .export-options {
    margin-bottom: 1.5rem;
  }
  
  .checkbox-wrapper {
    display: block;
    margin-bottom: 0.75rem;
    display: flex;
    align-items: center;
    cursor: pointer;
  }
  
  .checkbox-wrapper input {
    margin-right: 0.75rem;
  }
  
  .export-buttons {
    display: flex;
    gap: 1rem;
  }
  
  /* モーダルスタイル */
  .modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    overflow-y: auto;
  }
  
  .modal-content {
    background-color: var(--color-background-panel);
    margin: 2rem auto;
    width: 90%;
    max-width: 800px;
    border-radius: var(--border-radius-md);
    box-shadow: var(--box-shadow-lg);
    overflow: hidden;
  }
  
  .modal-header {
    padding: 1.5rem;
    background-color: var(--color-primary);
    color: white;
    display: flex;
    justify-content: space-between;
    align-items: center;
  }
  
  .modal-header h3 {
    margin: 0;
    color: white;
  }
  
  .close-button {
    background: none;
    border: none;
    color: white;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0;
    line-height: 1;
  }
  
  .modal-body {
    padding: 1.5rem;
    max-height: 60vh;
    overflow-y: auto;
  }
  
  .preview-content {
    background-color: white;
    padding: 1.5rem;
    border-radius: var(--border-radius-sm);
    border: 1px solid var(--color-border);
  }
  
  .modal-footer {
    padding: 1.5rem;
    border-top: 1px solid var(--color-border);
    display: flex;
    justify-content: flex-end;
    gap: 1rem;
  }
  
  /* レスポンシブデザイン */
  @media (max-width: 768px) {
    .export-buttons {
      flex-direction: column;
    }
  }
</style>
