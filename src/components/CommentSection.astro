---
import { BASE_PATH } from '../config';
import type { GitHubIssue } from '../data/types';
import { getIssueComments } from '../lib/github';

export interface Props {
  currentIssue: GitHubIssue;
}

const { currentIssue } = Astro.props;
const issueNumber = currentIssue.number;

// コメントを取得
let comments = [];
try {
  comments = await getIssueComments(issueNumber);
} catch (error) {
  console.error(`コメントの取得に失敗しました (Issue #${issueNumber}):`, error);
}

// コメントの日時をフォーマット
function formatDate(dateString) {
  const date = new Date(dateString);
  return date.toLocaleString('ja-JP', {
    year: 'numeric',
    month: '2-digit',
    day: '2-digit',
    hour: '2-digit',
    minute: '2-digit'
  });
}

// Markdownのレンダリング用関数はクライアントサイドで実装
---

<div class="comments-section">
  <h3 class="comments-title">
    コメント ({currentIssue.comments})
    <a href={currentIssue.html_url} target="_blank" rel="noopener noreferrer" class="view-on-github">
      GitHubで表示
    </a>
  </h3>
  
  {comments.length > 0 ? (
    <div class="comments-list">
      {comments.map(comment => (
        <div class="comment">
          <div class="comment-header">
            <div class="comment-author">
              <img src={comment.user.avatar_url} alt={comment.user.login} class="author-avatar" />
              <span class="author-name">{comment.user.login}</span>
            </div>
            <div class="comment-date">{formatDate(comment.created_at)}</div>
          </div>
          <div class="comment-body markdown-body" data-raw-content={comment.body}></div>
        </div>
      ))}
    </div>
  ) : (
    <div class="no-comments">
      まだコメントはありません。GitHubで会話に参加しましょう。
    </div>
  )}
  
  <div class="add-comment">
    <h4>コメントを追加</h4>
    <div class="comment-form">
      <textarea id="comment-text" class="comment-textarea" placeholder="マークダウン形式でコメントを入力..."></textarea>
      <div class="comment-preview markdown-body" id="comment-preview"></div>
      <div class="form-actions">
        <button id="preview-button" class="preview-button">プレビュー</button>
        <button id="submit-comment" class="submit-button">コメントを送信</button>
      </div>
      <div class="github-auth-notice">
        注意: コメントを投稿するにはGitHubアカウントでのサインイン情報が必要です。コメント送信時にGitHubに移動します。
      </div>
    </div>
  </div>
</div>

<style>
  .comments-section {
    margin-top: 2.5rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--sl-color-gray-5);
  }
  
  .comments-title {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    font-size: 1.2rem;
  }
  
  .view-on-github {
    font-size: 0.9rem;
    text-decoration: none;
    color: var(--sl-color-text-accent);
    padding: 0.3rem 0.6rem;
    border-radius: 4px;
    background-color: var(--sl-color-gray-6);
    transition: all 0.2s;
  }
  
  .view-on-github:hover {
    background-color: var(--sl-color-gray-5);
    transform: translateY(-1px);
  }
  
  .comments-list {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .comment {
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 8px;
    overflow: hidden;
  }
  
  .comment-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background-color: var(--sl-color-gray-6);
    border-bottom: 1px solid var(--sl-color-gray-5);
  }
  
  .comment-author {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }
  
  .author-avatar {
    width: 24px;
    height: 24px;
    border-radius: 50%;
  }
  
  .author-name {
    font-weight: 500;
  }
  
  .comment-date {
    font-size: 0.85rem;
    color: var(--sl-color-gray-2);
  }
  
  .comment-body {
    padding: 1rem;
    overflow-wrap: break-word;
  }
  
  .no-comments {
    padding: 2rem;
    text-align: center;
    background-color: var(--sl-color-gray-6);
    border-radius: 8px;
    color: var(--sl-color-gray-2);
    font-style: italic;
    margin-bottom: 2rem;
  }
  
  .add-comment {
    margin-top: 1.5rem;
  }
  
  .add-comment h4 {
    margin-bottom: 1rem;
  }
  
  .comment-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }
  
  .comment-textarea {
    min-height: 150px;
    padding: 1rem;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 8px;
    resize: vertical;
    font-family: inherit;
    font-size: 0.95rem;
    line-height: 1.5;
  }
  
  .comment-textarea:focus {
    outline: none;
    border-color: var(--sl-color-text-accent);
    box-shadow: 0 0 0 2px rgba(79, 109, 245, 0.2);
  }
  
  .comment-preview {
    padding: 1rem;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 8px;
    min-height: 100px;
    display: none;
  }
  
  .form-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
  }
  
  .preview-button,
  .submit-button {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .preview-button {
    background-color: var(--sl-color-gray-5);
    color: var(--sl-color-text);
  }
  
  .preview-button:hover {
    background-color: var(--sl-color-gray-4);
  }
  
  .submit-button {
    background-color: var(--color-primary, #4f6df5);
    color: white;
  }
  
  .submit-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  }
  
  .github-auth-notice {
    font-size: 0.85rem;
    color: var(--sl-color-gray-3);
    font-style: italic;
    margin-top: 0.5rem;
  }
  
  /* マークダウン本文の基本スタイル */
  .markdown-body {
    line-height: 1.6;
  }
  
  .markdown-body :global(h1),
  .markdown-body :global(h2),
  .markdown-body :global(h3),
  .markdown-body :global(h4) {
    margin-top: 1.5em;
    margin-bottom: 0.75em;
  }
  
  .markdown-body :global(p) {
    margin-bottom: 1em;
  }
  
  .markdown-body :global(ul),
  .markdown-body :global(ol) {
    padding-left: 1.5em;
    margin-bottom: 1em;
  }
  
  .markdown-body :global(pre) {
    padding: 1em;
    overflow-x: auto;
    background-color: var(--sl-color-gray-6);
    border-radius: 4px;
    margin-bottom: 1em;
  }
  
  .markdown-body :global(code) {
    font-family: monospace;
    padding: 0.2em 0.4em;
    background-color: var(--sl-color-gray-6);
    border-radius: 3px;
  }
  
  .markdown-body :global(pre code) {
    padding: 0;
    background-color: transparent;
  }
  
  .markdown-body :global(blockquote) {
    padding-left: 1em;
    border-left: 3px solid var(--sl-color-gray-4);
    color: var(--sl-color-gray-2);
    margin-bottom: 1em;
  }
  
  .markdown-body :global(img) {
    max-width: 100%;
    height: auto;
  }
  
  .markdown-body :global(table) {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 1em;
  }
  
  .markdown-body :global(th),
  .markdown-body :global(td) {
    padding: 0.5em;
    border: 1px solid var(--sl-color-gray-5);
  }
  
  .markdown-body :global(th) {
    background-color: var(--sl-color-gray-6);
  }
  
  /* レスポンシブ対応 */
  @media (max-width: 768px) {
    .comments-title {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }
    
    .view-on-github {
      align-self: flex-end;
    }
    
    .form-actions {
      flex-direction: column;
    }
    
    .submit-button,
    .preview-button {
      width: 100%;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // マークダウンライブラリのロード
    const script = document.createElement('script');
    script.src = 'https://cdn.jsdelivr.net/npm/marked/marked.min.js';
    script.onload = initMarkdown;
    document.head.appendChild(script);
    
    function initMarkdown() {
      // マークダウンレンダリングの設定
      marked.setOptions({
        breaks: true,
        gfm: true,
        headerIds: false,
        sanitize: false,
        smartLists: true
      });
      
      // コメント本文のマークダウンをレンダリング
      document.querySelectorAll('.comment-body').forEach(el => {
        const rawContent = el.getAttribute('data-raw-content');
        if (rawContent) {
          el.innerHTML = marked.parse(rawContent);
        }
      });
      
      // プレビューボタンのイベント
      const previewButton = document.getElementById('preview-button');
      const commentText = document.getElementById('comment-text');
      const commentPreview = document.getElementById('comment-preview');
      
      let isPreviewMode = false;
      
      if (previewButton && commentText && commentPreview) {
        previewButton.addEventListener('click', () => {
          isPreviewMode = !isPreviewMode;
          
          if (isPreviewMode) {
            // プレビューモードの表示
            commentPreview.style.display = 'block';
            commentPreview.innerHTML = marked.parse(commentText.value || '_プレビューする内容がありません_');
            commentText.style.display = 'none';
            previewButton.textContent = '編集に戻る';
          } else {
            // 編集モードに戻る
            commentPreview.style.display = 'none';
            commentText.style.display = 'block';
            previewButton.textContent = 'プレビュー';
          }
        });
      }
      
      // コメント送信ボタンのイベント
      const submitButton = document.getElementById('submit-comment');
      
      if (submitButton && commentText) {
        submitButton.addEventListener('click', () => {
          const commentContent = commentText.value.trim();
          if (!commentContent) {
            alert('コメントを入力してください');
            return;
          }
          
          // GitHubのIssueページにリダイレクト
          // URLのパターンからissue番号を抽出
          const pathParts = window.location.pathname.split('/');
          const issueNumber = parseInt(pathParts[pathParts.length - 1], 10);
          
          if (!isNaN(issueNumber)) {
            // クエリパラメータとしてコメント内容を付加
            const encodedComment = encodeURIComponent(commentContent);
            window.open(`https://github.com/nao-amj/starlight-issue-wiki/issues/${issueNumber}?body=${encodedComment}`, '_blank');
          } else {
            alert('Issue番号が特定できません。GitHubで直接コメントしてください。');
          }
        });
      }
    }
  });
</script>
