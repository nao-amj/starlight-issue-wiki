---
import { getIssues, generateSlug } from '../../lib/github';
import { marked } from 'marked';
import { gfmHeadingId } from 'marked-gfm-heading-id';
import { BASE_PATH, SITE_TITLE, SITE_DESCRIPTION, REPO_URL } from '../../config';
import { processZettelNotes, processWikiLinks, processTags } from '../../lib/zettelkasten';
import type { ZettelNote } from '../../lib/zettelkasten';

// Import Zettelkasten components
import BacklinksList from '../../components/BacklinksList.astro';
import TagsList from '../../components/TagsList.astro';
import ZettelGraph from '../../components/ZettelGraph.astro';
import NoteMetadata from '../../components/NoteMetadata.astro';

export async function getStaticPaths() {
  const issues = await getIssues();
  
  // Process issues into Zettelkasten notes with backlinks
  const zettelNotes = processZettelNotes(issues);
  
  // issueからパスを生成
  const issuePaths = zettelNotes.map(note => {
    // スラッグを生成
    const slug = note.slug;
    
    return {
      params: { slug },
      props: { note, allNotes: zettelNotes },
    };
  });
  
  // welcomeページに対応するパスを特別に処理
  // #1のissueがwelcomeページになるように設定
  const welcomeNote = zettelNotes.find(note => note.number === 1);
  
  // welcomeページのフォールバック
  const fallbackWelcomeNote: ZettelNote = {
    id: 'zettel-welcome',
    title: 'ようこそ',
    body: 'Wikiへようこそ！このページはissueが見つからなかった場合のフォールバックページです。',
    html_url: REPO_URL + '/issues',
    number: -2,
    labels: [],
    links: [],
    tags: [],
    backlinks: [],
    createdAt: new Date(),
    updatedAt: new Date(),
    slug: 'welcome',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    state: 'open',
    user: { login: 'system' },
  };
  
  // welcomeページを追加
  const welcomePath = {
    params: { slug: 'welcome' },
    props: { 
      note: welcomeNote || zettelNotes[0] || fallbackWelcomeNote,
      allNotes: zettelNotes
    }
  };
  
  // ページ一覧用の特別なパスを追加
  const indexNote: ZettelNote = {
    id: 'zettel-index',
    title: 'Wikiページ一覧',
    body: '## すべてのWikiページ\n\nこのWikiに含まれるすべてのページの一覧です。',
    html_url: REPO_URL + '/issues',
    number: -1, // 特別な番号を割り当てて識別
    labels: [],
    links: [],
    tags: [],
    backlinks: [],
    createdAt: new Date(),
    updatedAt: new Date(),
    slug: 'index',
    created_at: new Date().toISOString(),
    updated_at: new Date().toISOString(),
    state: 'open',
    user: { login: 'system' },
  };
  
  const indexPath = {
    params: { slug: 'index' },
    props: { 
      note: indexNote,
      allNotes: zettelNotes,
      isIndex: true
    }
  };
  
  // すべてのパスを結合
  return [...issuePaths, welcomePath, indexPath];
}

const { note, allNotes, isIndex = false } = Astro.props;

// markedのセットアップ
marked.use(gfmHeadingId());

// Process wiki-style links in content
const processedContent = note.body ? processWikiLinks(note.body, allNotes) : '';

// Process hashtags in content
const processedContentWithTags = processTags(processedContent);

// issueの内容をHTMLに変換
const content = processedContentWithTags ? marked.parse(processedContentWithTags) : '';

// ナビゲーション用のIssue一覧はすでにZettelNotesとして取得済み
const title = note.title;
const description = `${note.title} - ${SITE_TITLE}`;

// Extract tags from all notes for the tag cloud
const allTags = Array.from(new Set(
  allNotes.flatMap(note => note.tags)
));

// 現在のパスがindex（一覧ページ）かどうかを判定
const isListPage = isIndex;

// Graph visualization is enabled by default, but can be disabled on some pages
const showGraph = !isListPage && note.number !== -2;
---

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title} - {SITE_TITLE}</title>
  <meta name="description" content={description}>
  <link rel="stylesheet" href={`${BASE_PATH}/styles/global.css`}>
</head>
<body>
  <header>
    <div class="container">
      <div class="header-content">
        <h1><a href={BASE_PATH + "/"}>Starlight Issue Wiki</a></h1>
        <nav>
          <a href={BASE_PATH + "/"}>ホーム</a>
          <a href={`${BASE_PATH}/wiki/index`} class={isListPage ? 'active' : ''}>ページ一覧</a>
          <a href={`${BASE_PATH}/wiki/welcome`} class={note.number === 1 ? 'active' : ''}>はじめに</a>
          <a href={`${BASE_PATH}/graph`} class="graph-link">知識グラフ</a>
          <a href={REPO_URL}>GitHub</a>
        </nav>
      </div>
    </div>
  </header>

  <main class="container">
    <div class="layout">
      <aside class="sidebar">
        <h2>Wiki Pages</h2>
        <ul>
          <li>
            <a href={`${BASE_PATH}/wiki/index`} class={isListPage ? 'active' : ''}>
              すべてのページ
            </a>
          </li>
          <li>
            <a href={`${BASE_PATH}/wiki/welcome`} class={note.number === 1 ? 'active' : ''}>
              はじめに
            </a>
          </li>
          {allNotes
            .filter(item => item.number > 1) // welcomeページは上で表示済み
            .sort((a, b) => a.title.localeCompare(b.title))
            .map(item => (
              <li>
                <a href={`${BASE_PATH}/wiki/${item.slug}`} class={item.number === note.number ? 'active' : ''}>
                  {item.title}
                </a>
              </li>
            ))
          }
        </ul>
        
        <h2 class="sidebar-section-title">タグクラウド</h2>
        <TagsList notes={allNotes} layout="cloud" showCounts={true} maxTags={20} />
      </aside>
      
      <div class="content">
        <div class="page-header">
          <h1>{title}</h1>
          {note.tags && note.tags.length > 0 && (
            <div class="tags">
              {note.tags.map(tag => (
                <a href={`${BASE_PATH}/category/${tag}`} class="tag">
                  #{tag}
                </a>
              ))}
            </div>
          )}
        </div>
        
        {showGraph && (
          <div class="zettel-graph-overview">
            <h2>ノートの関連図</h2>
            <ZettelGraph notes={allNotes} currentNote={note} height="250px" showControls={false} />
          </div>
        )}
        
        <div class="wiki-content" set:html={content}></div>
        
        {/* Backlinks section */}
        {!isListPage && note.backlinks.length > 0 && (
          <BacklinksList note={note} />
        )}
        
        {/* Note metadata section */}
        {!isListPage && note.number > 0 && (
          <NoteMetadata note={note} />
        )}
        
        {isListPage ? (
          <div class="page-list">
            <h2>すべてのWikiページ</h2>
            <ul class="grid-list">
              {allNotes
                .filter(item => item.number > 0) // フィルターして実際のノートのみを表示
                .sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime()) // 更新日時の降順でソート
                .map(item => (
                  <li class="card">
                    <a href={`${BASE_PATH}/wiki/${item.slug}`}>
                      <h3>{item.title}</h3>
                      <p>{item.body?.slice(0, 100)}...</p>
                      {item.tags.length > 0 && (
                        <div class="card-tags">
                          {item.tags.slice(0, 3).map(tag => (
                            <span class="card-tag">#{tag}</span>
                          ))}
                          {item.tags.length > 3 && <span class="card-tag-more">+{item.tags.length - 3}</span>}
                        </div>
                      )}
                    </a>
                  </li>
                ))
              }
            </ul>
          </div>
        ) : (
          <div class="edit-links">
            <a href={note.html_url} target="_blank" rel="noopener noreferrer">
              GitHubでこのページを編集する
            </a>
          </div>
        )}
      </div>
    </div>
  </main>

  <footer>
    <div class="container">
      <p>© 2025 Starlight Issue Wiki with Zettelkasten</p>
    </div>
  </footer>

  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      padding: 0;
      line-height: 1.6;
      color: #333;
      background-color: #f9f9f9;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }
    header {
      background-color: #4d1a9e;
      color: white;
      padding: 1rem 0;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    header h1 {
      margin: 0;
      font-size: 1.5rem;
    }
    header h1 a {
      color: white;
      text-decoration: none;
    }
    nav {
      display: flex;
      gap: 1.5rem;
    }
    nav a {
      color: white;
      text-decoration: none;
      opacity: 0.9;
      padding: 0.5rem;
      border-radius: 4px;
      transition: all 0.2s;
    }
    nav a:hover {
      opacity: 1;
      background-color: rgba(255, 255, 255, 0.1);
    }
    nav a.active {
      background-color: rgba(255, 255, 255, 0.2);
      font-weight: 500;
    }
    nav a.graph-link {
      color: #ffeb3b;
    }
    main {
      padding: 2rem 0;
    }
    .layout {
      display: grid;
      grid-template-columns: 250px 1fr;
      gap: 2rem;
    }
    .sidebar {
      background-color: white;
      padding: 1.5rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      height: fit-content;
    }
    .sidebar h2 {
      font-size: 1.2rem;
      margin-top: 0;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #eee;
    }
    .sidebar-section-title {
      font-size: 1.1rem;
      margin-top: 2rem;
      margin-bottom: 0.7rem;
      padding-bottom: 0.3rem;
      border-bottom: 1px solid #eee;
    }
    .sidebar ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .sidebar li {
      margin-bottom: 0.5rem;
    }
    .sidebar a {
      display: block;
      padding: 0.5rem;
      text-decoration: none;
      color: #333;
      border-radius: 4px;
      transition: background-color 0.2s;
    }
    .sidebar a:hover {
      background-color: #f5f5f5;
    }
    .sidebar a.active {
      background-color: #f0e6ff;
      color: #4d1a9e;
      font-weight: 500;
    }
    .page-header {
      margin-bottom: 2rem;
    }
    .page-header h1 {
      border-bottom: 2px solid #eee;
      padding-bottom: 0.5rem;
      margin-bottom: 0.5rem;
    }
    .tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }
    .tag {
      font-size: 0.85rem;
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      color: #4d1a9e;
      background-color: #f0e6ff;
      text-decoration: none;
      transition: all 0.2s ease;
    }
    .tag:hover {
      background-color: #e0d0ff;
      transform: translateY(-1px);
    }
    .content {
      background-color: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }
    .wiki-content :global(img) {
      max-width: 100%;
      height: auto;
    }
    .wiki-content :global(pre) {
      padding: 1rem;
      border-radius: 0.5rem;
      background-color: #f3f3f3;
      overflow-x: auto;
    }
    .wiki-content :global(.wiki-link) {
      color: #4d1a9e;
      text-decoration: none;
      border-bottom: 1px dotted #4d1a9e;
      transition: all 0.2s;
    }
    .wiki-content :global(.wiki-link:hover) {
      background-color: #f0e6ff;
      border-bottom: 1px solid #4d1a9e;
    }
    .wiki-content :global(.wiki-link-new) {
      color: #999;
      border-bottom: 1px dashed #999;
    }
    .wiki-content :global(.tag-link) {
      color: #4d1a9e;
      text-decoration: none;
      padding: 0.1rem 0.3rem;
      border-radius: 3px;
      background-color: #f0e6ff;
      font-size: 0.9em;
      transition: all 0.2s;
    }
    .wiki-content :global(.tag-link:hover) {
      background-color: #e0d0ff;
    }
    .zettel-graph-overview {
      margin-bottom: 2rem;
      padding: 1rem;
      background-color: #f9f9f9;
      border-radius: 8px;
      border: 1px solid #eee;
    }
    .zettel-graph-overview h2 {
      font-size: 1.1rem;
      margin-top: 0;
      margin-bottom: 1rem;
      color: #555;
    }
    .edit-links {
      margin-top: 2rem;
      padding-top: 1rem;
      border-top: 1px solid #eee;
      font-size: 0.9rem;
    }
    .edit-links a {
      color: #4d1a9e;
      text-decoration: none;
    }
    .edit-links a:hover {
      text-decoration: underline;
    }
    .page-list {
      margin-top: 2rem;
    }
    .grid-list {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1rem;
      margin-top: 1rem;
      padding: 0;
      list-style: none;
    }
    .card {
      border-radius: 8px;
      overflow: hidden;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .card a {
      display: block;
      padding: 1.5rem;
      text-decoration: none;
      color: inherit;
      background-color: #f9f9f9;
      height: 100%;
      box-sizing: border-box;
      border: 1px solid #eee;
      border-radius: 8px;
    }
    .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    .card h3 {
      margin-top: 0;
      color: #4d1a9e;
    }
    .card p {
      margin: 0.5rem 0;
      color: #666;
      font-size: 0.9rem;
    }
    .card-tags {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3rem;
      margin-top: 0.5rem;
    }
    .card-tag {
      font-size: 0.75rem;
      padding: 0.1rem 0.5rem;
      border-radius: 20px;
      color: #4d1a9e;
      background-color: #f0e6ff;
    }
    .card-tag-more {
      font-size: 0.75rem;
      padding: 0.1rem 0.5rem;
      border-radius: 20px;
      color: #666;
      background-color: #eee;
    }
    footer {
      border-top: 1px solid #eee;
      padding: 2rem 0;
      text-align: center;
      color: #666;
    }
    
    /* レスポンシブデザイン */
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        gap: 1rem;
      }
      nav {
        width: 100%;
        justify-content: space-between;
        flex-wrap: wrap;
      }
      .layout {
        grid-template-columns: 1fr;
      }
      .sidebar {
        order: -1;
      }
      .grid-list {
        grid-template-columns: 1fr;
      }
    }
  </style>
</body>
</html>
