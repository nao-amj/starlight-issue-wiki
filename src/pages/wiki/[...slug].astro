---
import { getIssues } from '../../lib/github';
import { marked } from 'marked';
import { gfmHeadingId } from 'marked-gfm-heading-id';

export async function getStaticPaths() {
  const issues = await getIssues();
  
  // issueからパスを生成
  const issuePaths = issues.map(issue => {
    // スラッグを生成（スペースをダッシュに変換、小文字に変換）
    const slug = issue.title.toLowerCase()
      .replace(/[^\w\s-]/g, '') // 特殊文字を削除
      .replace(/\s+/g, '-') // スペースをダッシュに変換
      .replace(/^-+|-+$/g, ''); // 先頭と末尾のダッシュを削除
    
    return {
      params: { slug },
      props: { issue },
    };
  });
  
  // welcomeページに対応するパスを特別に処理
  // #1のissueがwelcomeページになるように設定
  const welcomeIssue = issues.find(issue => issue.number === 1);
  
  // welcomeページを追加
  const welcomePath = {
    params: { slug: 'welcome' },
    props: { 
      issue: welcomeIssue || issues[0] || {
        title: 'ようこそ',
        body: 'Wikiへようこそ！このページはissueが見つからなかった場合のフォールバックページです。',
        html_url: 'https://github.com/nao-amj/starlight-issue-wiki/issues'
      }
    }
  };
  
  // ページ一覧用の特別なパスを追加
  const indexPath = {
    params: { slug: 'index' },
    props: { 
      issue: {
        title: 'Wikiページ一覧',
        body: '## すべてのWikiページ\n\nこのWikiに含まれるすべてのページの一覧です。',
        html_url: 'https://github.com/nao-amj/starlight-issue-wiki/issues',
        number: -1, // 特別な番号を割り当てて識別
        labels: []
      },
      isIndex: true
    }
  };
  
  // すべてのパスを結合
  return [...issuePaths, welcomePath, indexPath];
}

const { issue, isIndex = false } = Astro.props;

// markedのセットアップ
marked.use(gfmHeadingId());

// issueの内容をHTMLに変換
const content = issue.body ? marked.parse(issue.body) : '';

const title = issue.title;
const description = `${issue.title} - Starlight Issue Wiki`;

// サイトのベースパスを設定
const basePath = '/starlight-issue-wiki';

// ナビゲーション用のIssue一覧を取得
const issues = await getIssues();

// 現在のパスがindex（一覧ページ）かどうかを判定
const isListPage = isIndex;
---

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title} - Starlight Issue Wiki</title>
  <meta name="description" content={description}>
  <link rel="stylesheet" href={`${basePath}/styles/global.css`}>
</head>
<body>
  <header>
    <div class="container">
      <div class="header-content">
        <h1><a href={basePath + "/"}>Starlight Issue Wiki</a></h1>
        <nav>
          <a href={basePath + "/"}>ホーム</a>
          <a href={`${basePath}/wiki/index`} class={isListPage ? 'active' : ''}>ページ一覧</a>
          <a href={`${basePath}/wiki/welcome`} class={issue.number === 1 ? 'active' : ''}>はじめに</a>
          <a href="https://github.com/nao-amj/starlight-issue-wiki">GitHub</a>
        </nav>
      </div>
    </div>
  </header>

  <main class="container">
    <div class="layout">
      <aside class="sidebar">
        <h2>Wiki Pages</h2>
        <ul>
          <li>
            <a href={`${basePath}/wiki/index`} class={isListPage ? 'active' : ''}>
              すべてのページ
            </a>
          </li>
          <li>
            <a href={`${basePath}/wiki/welcome`} class={issue.number === 1 ? 'active' : ''}>
              はじめに
            </a>
          </li>
          {issues.map(item => {
            if (item.number === 1) return null; // welcomeページは上で表示済み
            
            // スラッグを生成
            const slug = item.title.toLowerCase()
              .replace(/[^\w\s-]/g, '')
              .replace(/\s+/g, '-')
              .replace(/^-+|-+$/g, '');
            
            return (
              <li>
                <a href={`${basePath}/wiki/${slug}`} class={item.number === issue.number ? 'active' : ''}>
                  {item.title}
                </a>
              </li>
            );
          })}
        </ul>
      </aside>
      
      <div class="content">
        <div class="page-header">
          <h1>{title}</h1>
          {issue.labels && issue.labels.length > 0 && (
            <div class="labels">
              {issue.labels.map(label => (
                <span class="label" style={`background-color: #${label.color || 'ededed'}`}>
                  {label.name}
                </span>
              ))}
            </div>
          )}
        </div>
        
        <div class="wiki-content" set:html={content}></div>
        
        {isListPage ? (
          <div class="page-list">
            <h2>すべてのWikiページ</h2>
            <ul class="grid-list">
              {issues.map(item => {
                // スラッグを生成
                const slug = item.title.toLowerCase()
                  .replace(/[^\w\s-]/g, '')
                  .replace(/\s+/g, '-')
                  .replace(/^-+|-+$/g, '');
                
                return (
                  <li class="card">
                    <a href={`${basePath}/wiki/${slug}`}>
                      <h3>{item.title}</h3>
                      <p>{item.body?.slice(0, 100)}...</p>
                      {item.labels && item.labels.length > 0 && (
                        <div class="card-labels">
                          {item.labels.map(label => (
                            <span class="card-label" style={`background-color: #${label.color || 'ededed'}`}>
                              {label.name}
                            </span>
                          ))}
                        </div>
                      )}
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>
        ) : (
          <div class="edit-links">
            <a href={issue.html_url} target="_blank" rel="noopener noreferrer">
              GitHubでこのページを編集する
            </a>
          </div>
        )}
      </div>
    </div>
  </main>

  <footer>
    <div class="container">
      <p>© 2025 Starlight Issue Wiki</p>
    </div>
  </footer>

  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      padding: 0;
      line-height: 1.6;
      color: #333;
      background-color: #f9f9f9;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }
    header {
      background-color: #4d1a9e;
      color: white;
      padding: 1rem 0;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    header h1 {
      margin: 0;
      font-size: 1.5rem;
    }
    header h1 a {
      color: white;
      text-decoration: none;
    }
    nav {
      display: flex;
      gap: 1.5rem;
    }
    nav a {
      color: white;
      text-decoration: none;
      opacity: 0.9;
      padding: 0.5rem;
      border-radius: 4px;
      transition: all 0.2s;
    }
    nav a:hover {
      opacity: 1;
      background-color: rgba(255, 255, 255, 0.1);
    }
    nav a.active {
      background-color: rgba(255, 255, 255, 0.2);
      font-weight: 500;
    }
    main {
      padding: 2rem 0;
    }
    .layout {
      display: grid;
      grid-template-columns: 250px 1fr;
      gap: 2rem;
    }
    .sidebar {
      background-color: white;
      padding: 1.5rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      height: fit-content;
    }
    .sidebar h2 {
      font-size: 1.2rem;
      margin-top: 0;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #eee;
    }
    .sidebar ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .sidebar li {
      margin-bottom: 0.5rem;
    }
    .sidebar a {
      display: block;
      padding: 0.5rem;
      text-decoration: none;
      color: #333;
      border-radius: 4px;
      transition: background-color 0.2s;
    }
    .sidebar a:hover {
      background-color: #f5f5f5;
    }
    .sidebar a.active {
      background-color: #f0e6ff;
      color: #4d1a9e;
      font-weight: 500;
    }
    .page-header {
      margin-bottom: 2rem;
    }
    .page-header h1 {
      border-bottom: 2px solid #eee;
      padding-bottom: 0.5rem;
      margin-bottom: 0.5rem;
    }
    .labels {
      display: flex;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }
    .label {
      font-size: 0.8rem;
      padding: 0.25rem 0.75rem;
      border-radius: 20px;
      color: #333;
    }
    .content {
      background-color: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }
    .wiki-content :global(img) {
      max-width: 100%;
      height: auto;
    }
    .wiki-content :global(pre) {
      padding: 1rem;
      border-radius: 0.5rem;
      background-color: #f3f3f3;
      overflow-x: auto;
    }
    .edit-links {
      margin-top: 2rem;
      padding-top: 1rem;
      border-top: 1px solid #eee;
      font-size: 0.9rem;
    }
    .edit-links a {
      color: #4d1a9e;
      text-decoration: none;
    }
    .edit-links a:hover {
      text-decoration: underline;
    }
    .page-list {
      margin-top: 2rem;
    }
    .grid-list {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1rem;
      margin-top: 1rem;
    }
    .card {
      border-radius: 8px;
      overflow: hidden;
      transition: transform 0.2s, box-shadow 0.2s;
    }
    .card a {
      display: block;
      padding: 1.5rem;
      text-decoration: none;
      color: inherit;
      background-color: #f9f9f9;
      height: 100%;
      box-sizing: border-box;
      border: 1px solid #eee;
      border-radius: 8px;
    }
    .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    .card h3 {
      margin-top: 0;
      color: #4d1a9e;
    }
    .card p {
      margin: 0.5rem 0;
      color: #666;
      font-size: 0.9rem;
    }
    .card-labels {
      display: flex;
      flex-wrap: wrap;
      gap: 0.3rem;
      margin-top: 0.5rem;
    }
    .card-label {
      font-size: 0.7rem;
      padding: 0.1rem 0.5rem;
      border-radius: 20px;
      color: #333;
    }
    footer {
      border-top: 1px solid #eee;
      padding: 2rem 0;
      text-align: center;
      color: #666;
    }
    
    /* レスポンシブデザイン */
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        gap: 1rem;
      }
      nav {
        width: 100%;
        justify-content: space-between;
      }
      .layout {
        grid-template-columns: 1fr;
      }
      .sidebar {
        order: -1;
      }
      .grid-list {
        grid-template-columns: 1fr;
      }
    }
  </style>
</body>
</html>