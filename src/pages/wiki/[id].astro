---
import Layout from '../../layouts/Layout.astro';
import WikiContent from '../../components/WikiContent.astro';
import { BASE_PATH, REPO_URL } from '../../config';
import { marked } from 'marked';
import { extractKeywords, findBidirectionalLinks, applyZettelkastenLinks, convertWikiLinksToHtml, loadZettelkastenSettings } from '../../lib/zettelkasten';

export async function getStaticPaths() {
  // GitHub API からIssueを取得する関数
  async function fetchIssues() {
    try {
      // GitHub APIを使用してissueを取得（プルリクエストを除外）
      const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues?state=all&per_page=100');
      if (!response.ok) {
        throw new Error(`GitHub API error: ${response.status}`);
      }
      const allItems = await response.json();
      // プルリクエストを除外する
      return allItems.filter(item => !item.pull_request);
    } catch (error) {
      console.error('Error fetching issues:', error);
      return [];
    }
  }

  const issues = await fetchIssues();
  
  return issues.map(issue => {
    return {
      params: { id: issue.number.toString() },
      props: { issue, allIssues: issues }
    };
  });
}

const { issue, allIssues } = Astro.props;
const { title, body, created_at, updated_at, html_url, labels, number } = issue;

// Zettelkastenの設定を強制的に有効化（ビルド時）
const zettelkastenConfig = {
  enabled: true,
  autoLinkKeywords: true,
  highlightBidirectional: true,
  showBacklinks: true,
  keywordMinLength: 3
};

// 処理されたコンテンツを生成
let processedContent = body || '';
let htmlContent = '';

// Zettelkastenモードが有効な場合（常に有効）
try {
  // キーワードを抽出
  const keywords = extractKeywords(allIssues);
  
  // 双方向リンクを検出
  const bidirectionalLinks = findBidirectionalLinks(allIssues);
  
  // Zettelkastenリンクを適用（Markdownを処理する前に）
  if (zettelkastenConfig.autoLinkKeywords) {
    processedContent = applyZettelkastenLinks(processedContent, keywords, number);
  }
  
  // Markdownを通常処理 - Wikiリンクは特別に処理する
  processedContent = processedContent.replace(/\[\[(.*?)\]\]/g, (match, content) => {
    return `<wiki-link>${content}</wiki-link>`;
  });
  
  // ハッシュタグをリンクに変換
  processedContent = processedContent.replace(/#([a-zA-Z0-9_-]+)/g, (match, tag) => {
    return `<hash-tag>${tag}</hash-tag>`;
  });
  
  // Markdownをパース
  htmlContent = marked.parse(processedContent);
  
  // カスタムタグをHTMLリンクに変換
  // まず、Wikiリンクを処理
  htmlContent = htmlContent.replace(/<wiki-link>(.*?)<\/wiki-link>/g, (match, content) => {
    const linkedTitle = content.trim();
    const linkedIssue = allIssues.find(i => 
      i.title.toLowerCase() === linkedTitle.toLowerCase() ||
      i.title.toLowerCase().includes(linkedTitle.toLowerCase())
    );
    
    // 双方向リンクかどうかを確認
    const isBidirectional = linkedIssue && bidirectionalLinks.has(number) && 
      bidirectionalLinks.get(number)?.includes(linkedIssue.number);
    
    const linkClass = isBidirectional && zettelkastenConfig.highlightBidirectional
      ? 'wiki-link bidirectional' 
      : 'wiki-link';
    
    if (linkedIssue) {
      return `<a href="${BASE_PATH}/wiki/${linkedIssue.number}" class="${linkClass}" data-issue="${linkedIssue.number}">${linkedTitle}</a>`;
    } else {
      return `<span class="wiki-link-unlinked">${linkedTitle}</span>`;
    }
  });
  
  // 次に、ハッシュタグを処理
  htmlContent = htmlContent.replace(/<hash-tag>(.*?)<\/hash-tag>/g, (match, tag) => {
    return `<a href="${BASE_PATH}/tag/${tag.toLowerCase()}" class="hash-tag">#${tag}</a>`;
  });
  
} catch (error) {
  console.error('Zettelkasten処理でエラーが発生しました:', error);
  // エラー時は通常のMarkdown変換に戻る
  htmlContent = marked.parse(body || '');
}

// メタデータ
const createdDate = new Date(created_at).toLocaleDateString('ja-JP', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

const updatedDate = new Date(updated_at).toLocaleDateString('ja-JP', {
  year: 'numeric',
  month: 'long',
  day: 'numeric'
});

// ページタイトル
const pageTitle = `${title} (#${issue.number})`;
---

<Layout title={pageTitle}>
  <div class="wiki-container">
    <div class="content-panel">
      <div class="wiki-header">
        <h1>{title}</h1>
        
        <div class="issue-labels">
          {labels && labels.map(label => (
            <a href={`${BASE_PATH}/category/${encodeURIComponent(label.name.toLowerCase())}`} class="tag" 
               style={`background-color: #${label.color}20; color: #${label.color}; border: 1px solid #${label.color}40;`}>
              {label.name}
            </a>
          ))}
        </div>
        
        <div class="issue-meta">
          <span>作成日: {createdDate}</span>
          {created_at !== updated_at && (
            <span>更新日: {updatedDate}</span>
          )}
          <a href={html_url} target="_blank" rel="noopener noreferrer" class="issue-link">
            GitHubで表示
          </a>
        </div>
      </div>
      
      <WikiContent 
        content={htmlContent} 
        issueUrl={html_url} 
        currentIssue={issue}
        allIssues={allIssues}
      />
    </div>

    <div class="sidebar">
      <div class="toc-panel">
        <h2>目次</h2>
        <!-- 目次はクライアントサイドJSで生成 -->
        <div class="toc-placeholder" id="toc-container">
          <!-- 目次プレースホルダー -->
        </div>
      </div>
      
      <div class="nav-panel">
        <h2>クイックリンク</h2>
        <ul>
          <li><a href={`${BASE_PATH}/`}>トップページ</a></li>
          <li><a href={`${BASE_PATH}/wiki/1`}>はじめに</a></li>
          <li><a href={`${BASE_PATH}/knowledge-graph`}>知識グラフ</a></li>
          <li><a href="https://github.com/nao-amj/starlight-issue-wiki/issues/new">新しいページの作成</a></li>
        </ul>
      </div>
    </div>
  </div>
</Layout>

<style>
  /* Wiki ページ特有のスタイル */
  .wiki-container {
    display: grid;
    grid-template-columns: 3fr 1fr;
    gap: 2rem;
    margin: 2rem 0;
  }

  .content-panel {
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .dark .content-panel {
    background: #222;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .wiki-header {
    margin-bottom: 2rem;
    border-bottom: 1px solid #eee;
    padding-bottom: 1rem;
  }
  
  .dark .wiki-header {
    border-bottom-color: #444;
  }
  
  .issue-labels {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin: 1rem 0;
  }
  
  .tag {
    display: inline-block;
    padding: 0.2em 0.5em;
    border-radius: 0.25rem;
    font-size: 0.8rem;
    font-weight: 500;
    text-decoration: none;
    line-height: 1.2;
    white-space: nowrap;
    transition: transform 0.2s, box-shadow 0.2s;
  }
  
  .tag:hover {
    transform: translateY(-1px);
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }
  
  .issue-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    font-size: 0.9rem;
    color: #666;
  }
  
  .dark .issue-meta {
    color: #aaa;
  }
  
  .issue-link {
    color: var(--color-primary);
    text-decoration: none;
  }
  
  .issue-link:hover {
    text-decoration: underline;
  }

  .sidebar {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .sidebar > div {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }

  .dark .sidebar > div {
    background: #222;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
  }

  .sidebar h2 {
    margin-top: 0;
    font-size: 1.2rem;
    margin-bottom: 1rem;
    padding-bottom: 0.5rem;
    border-bottom: 1px solid #eee;
  }

  .dark .sidebar h2 {
    border-bottom-color: #444;
  }

  .sidebar ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .sidebar li {
    margin-bottom: 0.5rem;
  }

  .sidebar a {
    display: block;
    padding: 0.5rem;
    color: var(--color-primary);
    text-decoration: none;
    border-radius: 4px;
    transition: background-color 0.2s;
  }

  .sidebar a:hover {
    background-color: #f5f5f5;
  }

  .dark .sidebar a:hover {
    background-color: #333;
  }

  /* レスポンシブデザイン */
  @media (max-width: 768px) {
    .wiki-container {
      grid-template-columns: 1fr;
    }
    
    .sidebar {
      order: 2;
    }
  }
</style>

<script is:inline>
  // 目次の自動生成
  document.addEventListener('DOMContentLoaded', () => {
    const tocContainer = document.getElementById('toc-container');
    const wikiContent = document.querySelector('.wiki-content');
    
    if (tocContainer && wikiContent) {
      // 見出しを取得
      const headings = wikiContent.querySelectorAll('h2, h3, h4');
      
      if (headings.length > 0) {
        const tocList = document.createElement('ul');
        tocList.className = 'toc-list';
        
        headings.forEach((heading, index) => {
          // 見出しにIDを追加（なければ）
          if (!heading.id) {
            heading.id = `heading-${index}`;
          }
          
          const listItem = document.createElement('li');
          listItem.className = `toc-item toc-${heading.tagName.toLowerCase()}`;
          
          const link = document.createElement('a');
          link.href = `#${heading.id}`;
          link.textContent = heading.textContent;
          
          listItem.appendChild(link);
          tocList.appendChild(listItem);
        });
        
        tocContainer.appendChild(tocList);
      } else {
        tocContainer.innerHTML = '<p class="toc-empty">目次がありません</p>';
      }
    }
    
    // デバッグ用
    console.log('Checking wiki links...');
    const wikiLinks = document.querySelectorAll('.wiki-link');
    console.log(`Found ${wikiLinks.length} wiki links`);
  });
</script>
