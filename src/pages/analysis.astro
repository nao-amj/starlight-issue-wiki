---
import Layout from '../layouts/Layout.astro';
import AnalyticsDashboard from '../components/analysis/AnalyticsDashboard.astro';
import { BASE_PATH, SITE_TITLE } from '../config';

// GitHub API からIssueを取得する関数
async function fetchIssues() {
  try {
    // GitHub APIを使用してOPENのissueのみを取得（プルリクエストを除外）
    const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues?state=open&per_page=100');
    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }
    const allItems = await response.json();
    // プルリクエストを除外する
    return allItems.filter(item => !item.pull_request);
  } catch (error) {
    console.error('Error fetching issues:', error);
    return [];
  }
}

const issues = await fetchIssues();
const pageTitle = `Content Analytics - ${SITE_TITLE}`;

// ラベルの集計
const labelCounts = {};
issues.forEach(issue => {
  if (issue.labels && issue.labels.length > 0) {
    issue.labels.forEach(label => {
      if (!labelCounts[label.name]) {
        labelCounts[label.name] = {
          count: 0,
          color: label.color || '888888'
        };
      }
      labelCounts[label.name].count++;
    });
  }
});

// ラベルデータを配列に変換しソート
const labelData = Object.entries(labelCounts)
  .map(([name, data]) => ({ name, ...data }))
  .sort((a, b) => b.count - a.count);

// 更新頻度の分析
const monthlyActivity = {};
issues.forEach(issue => {
  const createdDate = new Date(issue.created_at);
  const createdMonth = `${createdDate.getFullYear()}-${String(createdDate.getMonth() + 1).padStart(2, '0')}`;
  
  if (!monthlyActivity[createdMonth]) {
    monthlyActivity[createdMonth] = { created: 0, updated: 0 };
  }
  monthlyActivity[createdMonth].created++;
  
  const updatedDate = new Date(issue.updated_at);
  const updatedMonth = `${updatedDate.getFullYear()}-${String(updatedDate.getMonth() + 1).padStart(2, '0')}`;
  
  if (!monthlyActivity[updatedMonth]) {
    monthlyActivity[updatedMonth] = { created: 0, updated: 0 };
  }
  monthlyActivity[updatedMonth].updated++;
});

// 月次データを配列に変換し時系列でソート
const activityData = Object.entries(monthlyActivity)
  .map(([month, data]) => ({ month, ...data }))
  .sort((a, b) => a.month.localeCompare(b.month));

// 曜日別アクティビティ分析
const dayOfWeekActivity = {
  0: { label: 'Sunday', created: 0, updated: 0 },
  1: { label: 'Monday', created: 0, updated: 0 },
  2: { label: 'Tuesday', created: 0, updated: 0 },
  3: { label: 'Wednesday', created: 0, updated: 0 },
  4: { label: 'Thursday', created: 0, updated: 0 },
  5: { label: 'Friday', created: 0, updated: 0 },
  6: { label: 'Saturday', created: 0, updated: 0 }
};

issues.forEach(issue => {
  const createdDate = new Date(issue.created_at);
  const updatedDate = new Date(issue.updated_at);
  
  dayOfWeekActivity[createdDate.getDay()].created++;
  dayOfWeekActivity[updatedDate.getDay()].updated++;
});

// 時間帯別アクティビティ分析
const hourlyActivity = Array.from({length: 24}, (_, i) => ({
  hour: i,
  created: 0,
  updated: 0
}));

issues.forEach(issue => {
  const createdDate = new Date(issue.created_at);
  const updatedDate = new Date(issue.updated_at);
  
  hourlyActivity[createdDate.getHours()].created++;
  hourlyActivity[updatedDate.getHours()].updated++;
});

// コンテンツ長さの分析（文字数）
const lengthCategories = {
  short: { count: 0, label: 'Short Content (<500 chars)' },
  medium: { count: 0, label: 'Medium Content (500-2000 chars)' },
  long: { count: 0, label: 'Long Content (>2000 chars)' }
};

issues.forEach(issue => {
  const contentLength = (issue.body || '').length;
  
  if (contentLength < 500) {
    lengthCategories.short.count++;
  } else if (contentLength < 2000) {
    lengthCategories.medium.count++;
  } else {
    lengthCategories.long.count++;
  }
});

// 長さの詳細な分布データ
const lengthDistribution = [];
const BUCKET_SIZE = 250; // 250文字ごとにカウント
const MAX_BUCKET = 10; // 最大2500文字まで

// バケット初期化
for (let i = 0; i <= MAX_BUCKET; i++) {
  lengthDistribution.push({
    range: i < MAX_BUCKET ? `${i * BUCKET_SIZE}-${(i + 1) * BUCKET_SIZE}` : `${MAX_BUCKET * BUCKET_SIZE}+`,
    count: 0
  });
}

// 文字数分布の計算
issues.forEach(issue => {
  const contentLength = (issue.body || '').length;
  const bucketIndex = Math.min(Math.floor(contentLength / BUCKET_SIZE), MAX_BUCKET);
  lengthDistribution[bucketIndex].count++;
});

// リンク関係の分析
const linkAnalysis = {
  totalLinks: 0,
  internalLinks: 0,
  externalLinks: 0,
  wikiLinks: 0,
  issueRefs: 0,
  mostLinkedPages: {}
};

issues.forEach(issue => {
  if (!issue.body) return;
  
  // [[...]]形式のリンクを検出
  const wikiLinks = issue.body.match(/\[\[(.*?)\]\]/g);
  if (wikiLinks) {
    linkAnalysis.wikiLinks += wikiLinks.length;
    linkAnalysis.totalLinks += wikiLinks.length;
    
    // リンク先のページをカウント
    wikiLinks.forEach(link => {
      const linkedTitle = link.substring(2, link.length - 2).trim();
      const linkedIssue = issues.find(i => 
        i.title.toLowerCase() === linkedTitle.toLowerCase() ||
        i.title.toLowerCase().includes(linkedTitle.toLowerCase())
      );
      
      if (linkedIssue) {
        const targetId = linkedIssue.number;
        if (!linkAnalysis.mostLinkedPages[targetId]) {
          linkAnalysis.mostLinkedPages[targetId] = {
            title: linkedIssue.title,
            count: 0
          };
        }
        linkAnalysis.mostLinkedPages[targetId].count++;
      }
    });
  }
  
  // #番号形式のリンクを検出
  const issueRefs = issue.body.match(/#(\d+)/g);
  if (issueRefs) {
    linkAnalysis.issueRefs += issueRefs.length;
    linkAnalysis.totalLinks += issueRefs.length;
    
    // リンク先のIssueをカウント
    issueRefs.forEach(ref => {
      const refNumber = parseInt(ref.substring(1), 10);
      const refIssue = issues.find(i => i.number === refNumber);
      
      if (refIssue) {
        const targetId = refIssue.number;
        if (!linkAnalysis.mostLinkedPages[targetId]) {
          linkAnalysis.mostLinkedPages[targetId] = {
            title: refIssue.title,
            count: 0
          };
        }
        linkAnalysis.mostLinkedPages[targetId].count++;
      }
    });
  }
  
  // Markdown外部リンクを検出 [text](url)
  const markdownLinks = issue.body.match(/\[.+?\]\((https?:\/\/[^)]+)\)/g);
  if (markdownLinks) {
    linkAnalysis.externalLinks += markdownLinks.length;
    linkAnalysis.totalLinks += markdownLinks.length;
  }
  
  // URLのみのリンクを検出
  const plainUrls = issue.body.match(/(?<!\()https?:\/\/[^\s)]+/g);
  if (plainUrls) {
    linkAnalysis.externalLinks += plainUrls.length;
    linkAnalysis.totalLinks += plainUrls.length;
  }
});

// 内部リンク（Wikiリンク + Issueリファレンス）
linkAnalysis.internalLinks = linkAnalysis.wikiLinks + linkAnalysis.issueRefs;

// 最もリンクが多いページをソート
const topLinkedPages = Object.entries(linkAnalysis.mostLinkedPages)
  .map(([id, data]) => ({ id, ...data }))
  .sort((a, b) => b.count - a.count)
  .slice(0, 5);

// リンク関係のネットワークデータ作成
const linkNetworkData = {
  nodes: [],
  links: []
};

// まずノードを作成
issues.forEach(issue => {
  linkNetworkData.nodes.push({
    id: issue.number.toString(),
    title: issue.title,
    group: issue.labels && issue.labels.length > 0 ? 
           issue.labels[0].name : 'unlabeled'
  });
});

// リンク関係を追加
issues.forEach(issue => {
  if (!issue.body) return;
  
  // [[...]]形式のリンクを検出
  const wikiLinks = issue.body.match(/\[\[(.*?)\]\]/g);
  if (wikiLinks) {
    wikiLinks.forEach(link => {
      const linkedTitle = link.substring(2, link.length - 2).trim();
      const linkedIssue = issues.find(i => 
        i.title.toLowerCase() === linkedTitle.toLowerCase() ||
        i.title.toLowerCase().includes(linkedTitle.toLowerCase())
      );
      
      if (linkedIssue) {
        linkNetworkData.links.push({
          source: issue.number.toString(),
          target: linkedIssue.number.toString(),
          value: 1,
          type: 'wiki'
        });
      }
    });
  }
  
  // #番号形式のリンクを検出
  const issueRefs = issue.body.match(/#(\d+)/g);
  if (issueRefs) {
    issueRefs.forEach(ref => {
      const refNumber = parseInt(ref.substring(1), 10);
      
      if (issues.some(i => i.number === refNumber)) {
        linkNetworkData.links.push({
          source: issue.number.toString(),
          target: refNumber.toString(),
          value: 1,
          type: 'issue'
        });
      }
    });
  }
});

// 更新日時による分類
const recencyCategories = {
  recent: { count: 0, label: 'Recent (last 30 days)' },
  medium: { count: 0, label: 'Medium (30-90 days)' },
  old: { count: 0, label: 'Older (90+ days)' }
};

const now = new Date();
issues.forEach(issue => {
  const updatedDate = new Date(issue.updated_at);
  const daysDifference = Math.floor((now - updatedDate) / (1000 * 60 * 60 * 24));
  
  if (daysDifference < 30) {
    recencyCategories.recent.count++;
  } else if (daysDifference < 90) {
    recencyCategories.medium.count++;
  } else {
    recencyCategories.old.count++;
  }
});

// 修正日からの経過日数分布
const ageDistribution = Array.from({length: 10}, (_, i) => ({
  days: i * 10, // 0-10日, 10-20日, ...
  count: 0
}));

// さらに90日以上のカテゴリー
ageDistribution.push({ days: 90, count: 0 });

issues.forEach(issue => {
  const updatedDate = new Date(issue.updated_at);
  const daysDifference = Math.floor((now - updatedDate) / (1000 * 60 * 60 * 24));
  
  if (daysDifference >= 90) {
    ageDistribution[10].count++;
  } else {
    const bucketIndex = Math.floor(daysDifference / 10);
    ageDistribution[bucketIndex].count++;
  }
});

// 担当者（アサイニー）分析
const assigneeAnalysis = {};
let totalAssignedIssues = 0;

issues.forEach(issue => {
  if (issue.assignees && issue.assignees.length > 0) {
    totalAssignedIssues++;
    
    issue.assignees.forEach(assignee => {
      const login = assignee.login;
      
      if (!assigneeAnalysis[login]) {
        assigneeAnalysis[login] = {
          login,
          name: assignee.login,
          avatar: assignee.avatar_url,
          assignedCount: 0,
          issues: []
        };
      }
      
      assigneeAnalysis[login].assignedCount++;
      assigneeAnalysis[login].issues.push({
        number: issue.number,
        title: issue.title
      });
    });
  }
});

// 担当者データを配列に変換しソート
const assigneeData = Object.values(assigneeAnalysis)
  .sort((a, b) => b.assignedCount - a.assignedCount);

// コメント分析
const commentsAnalysis = {
  totalComments: 0,
  issuesWithComments: 0,
  avgCommentsPerIssue: 0,
  mostCommentedIssues: []
};

issues.forEach(issue => {
  if (issue.comments > 0) {
    commentsAnalysis.totalComments += issue.comments;
    commentsAnalysis.issuesWithComments++;
    
    commentsAnalysis.mostCommentedIssues.push({
      number: issue.number,
      title: issue.title,
      comments: issue.comments
    });
  }
});

commentsAnalysis.avgCommentsPerIssue = 
  commentsAnalysis.issuesWithComments > 0 
    ? commentsAnalysis.totalComments / commentsAnalysis.issuesWithComments 
    : 0;

commentsAnalysis.mostCommentedIssues.sort((a, b) => b.comments - a.comments);
commentsAnalysis.mostCommentedIssues = commentsAnalysis.mostCommentedIssues.slice(0, 5);

// 分析ダッシュボードに渡すデータの準備
const analyticsData = {
  labels: labelData,
  activity: activityData,
  dayOfWeek: Object.values(dayOfWeekActivity),
  hourly: hourlyActivity,
  length: {
    short: lengthCategories.short.count,
    medium: lengthCategories.medium.count,
    long: lengthCategories.long.count
  },
  lengthDist: lengthDistribution,
  recency: {
    recent: recencyCategories.recent.count,
    medium: recencyCategories.medium.count,
    old: recencyCategories.old.count
  },
  ageDist: ageDistribution,
  links: {
    internal: linkAnalysis.internalLinks,
    external: linkAnalysis.externalLinks,
    wikiLinks: linkAnalysis.wikiLinks,
    issueRefs: linkAnalysis.issueRefs
  },
  network: linkNetworkData,
  assignees: assigneeData,
  comments: commentsAnalysis,
  topLinkedPages: topLinkedPages
};
---

<Layout title={pageTitle}>
  <div class="analysis-page">
    <header class="page-header">
      <h1>Content Analytics Dashboard</h1>
      <p class="page-description">
        This dashboard visualizes content statistics, activity patterns, and relationship metrics to offer insights into your wiki's structure and engagement.
      </p>
    </header>
    
    <AnalyticsDashboard issueData={analyticsData} basePath={BASE_PATH} />
  </div>
</Layout>

<style>
  .analysis-page {
    padding-bottom: 3rem;
  }
  
  .page-header {
    margin-bottom: 2rem;
    text-align: center;
  }
  
  .page-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
    background: linear-gradient(90deg, #4f6df5, #845ef7);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    display: inline-block;
  }
  
  .page-description {
    color: #666;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .dark .page-description {
    color: #aaa;
  }
</style>

<!-- D3.js -->
<script is:inline src="https://d3js.org/d3.v7.min.js"></script>
