---
import Layout from '../layouts/Layout.astro';
import { BASE_PATH, SITE_TITLE } from '../config';

// GitHub API からIssueを取得する関数
async function fetchIssues() {
  try {
    // GitHub APIを使用してissueを取得（プルリクエストを除外）
    const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues?state=all&per_page=100');
    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }
    const allItems = await response.json();
    // プルリクエストを除外する
    return allItems.filter(item => !item.pull_request);
  } catch (error) {
    console.error('Error fetching issues:', error);
    return [];
  }
}

const issues = await fetchIssues();
const pageTitle = `Content Analytics - ${SITE_TITLE}`;

// ラベルの集計
const labelCounts = {};
issues.forEach(issue => {
  if (issue.labels && issue.labels.length > 0) {
    issue.labels.forEach(label => {
      if (!labelCounts[label.name]) {
        labelCounts[label.name] = {
          count: 0,
          color: label.color || '888888'
        };
      }
      labelCounts[label.name].count++;
    });
  }
});

// ラベルデータを配列に変換しソート
const labelData = Object.entries(labelCounts)
  .map(([name, data]) => ({ name, ...data }))
  .sort((a, b) => b.count - a.count);

// 更新頻度の分析
const monthlyActivity = {};
issues.forEach(issue => {
  const createdDate = new Date(issue.created_at);
  const createdMonth = `${createdDate.getFullYear()}-${String(createdDate.getMonth() + 1).padStart(2, '0')}`;
  
  if (!monthlyActivity[createdMonth]) {
    monthlyActivity[createdMonth] = { created: 0, updated: 0 };
  }
  monthlyActivity[createdMonth].created++;
  
  const updatedDate = new Date(issue.updated_at);
  const updatedMonth = `${updatedDate.getFullYear()}-${String(updatedDate.getMonth() + 1).padStart(2, '0')}`;
  
  if (!monthlyActivity[updatedMonth]) {
    monthlyActivity[updatedMonth] = { created: 0, updated: 0 };
  }
  monthlyActivity[updatedMonth].updated++;
});

// 月次データを配列に変換し時系列でソート
const activityData = Object.entries(monthlyActivity)
  .map(([month, data]) => ({ month, ...data }))
  .sort((a, b) => a.month.localeCompare(b.month));

// 曜日別アクティビティ分析
const dayOfWeekActivity = {
  0: { label: 'Sunday', created: 0, updated: 0 },
  1: { label: 'Monday', created: 0, updated: 0 },
  2: { label: 'Tuesday', created: 0, updated: 0 },
  3: { label: 'Wednesday', created: 0, updated: 0 },
  4: { label: 'Thursday', created: 0, updated: 0 },
  5: { label: 'Friday', created: 0, updated: 0 },
  6: { label: 'Saturday', created: 0, updated: 0 }
};

issues.forEach(issue => {
  const createdDate = new Date(issue.created_at);
  const updatedDate = new Date(issue.updated_at);
  
  dayOfWeekActivity[createdDate.getDay()].created++;
  dayOfWeekActivity[updatedDate.getDay()].updated++;
});

// 時間帯別アクティビティ分析
const hourlyActivity = Array.from({length: 24}, (_, i) => ({
  hour: i,
  created: 0,
  updated: 0
}));

issues.forEach(issue => {
  const createdDate = new Date(issue.created_at);
  const updatedDate = new Date(issue.updated_at);
  
  hourlyActivity[createdDate.getHours()].created++;
  hourlyActivity[updatedDate.getHours()].updated++;
});

// コンテンツ長さの分析（文字数）
const lengthCategories = {
  short: { count: 0, label: 'Short Content (<500 chars)' },
  medium: { count: 0, label: 'Medium Content (500-2000 chars)' },
  long: { count: 0, label: 'Long Content (>2000 chars)' }
};

issues.forEach(issue => {
  const contentLength = (issue.body || '').length;
  
  if (contentLength < 500) {
    lengthCategories.short.count++;
  } else if (contentLength < 2000) {
    lengthCategories.medium.count++;
  } else {
    lengthCategories.long.count++;
  }
});

// 長さの詳細な分布データ
const lengthDistribution = [];
const BUCKET_SIZE = 250; // 250文字ごとにカウント
const MAX_BUCKET = 10; // 最大2500文字まで

// バケット初期化
for (let i = 0; i <= MAX_BUCKET; i++) {
  lengthDistribution.push({
    range: i < MAX_BUCKET ? `${i * BUCKET_SIZE}-${(i + 1) * BUCKET_SIZE}` : `${MAX_BUCKET * BUCKET_SIZE}+`,
    count: 0
  });
}

// 文字数分布の計算
issues.forEach(issue => {
  const contentLength = (issue.body || '').length;
  const bucketIndex = Math.min(Math.floor(contentLength / BUCKET_SIZE), MAX_BUCKET);
  lengthDistribution[bucketIndex].count++;
});

// リンク関係の分析
const linkAnalysis = {
  totalLinks: 0,
  internalLinks: 0,
  externalLinks: 0,
  wikiLinks: 0,
  issueRefs: 0,
  mostLinkedPages: {}
};

issues.forEach(issue => {
  if (!issue.body) return;
  
  // [[...]]形式のリンクを検出
  const wikiLinks = issue.body.match(/\[\[(.*?)\]\]/g);
  if (wikiLinks) {
    linkAnalysis.wikiLinks += wikiLinks.length;
    linkAnalysis.totalLinks += wikiLinks.length;
    
    // リンク先のページをカウント
    wikiLinks.forEach(link => {
      const linkedTitle = link.substring(2, link.length - 2).trim();
      const linkedIssue = issues.find(i => 
        i.title.toLowerCase() === linkedTitle.toLowerCase() ||
        i.title.toLowerCase().includes(linkedTitle.toLowerCase())
      );
      
      if (linkedIssue) {
        const targetId = linkedIssue.number;
        if (!linkAnalysis.mostLinkedPages[targetId]) {
          linkAnalysis.mostLinkedPages[targetId] = {
            title: linkedIssue.title,
            count: 0
          };
        }
        linkAnalysis.mostLinkedPages[targetId].count++;
      }
    });
  }
  
  // #番号形式のリンクを検出
  const issueRefs = issue.body.match(/#(\d+)/g);
  if (issueRefs) {
    linkAnalysis.issueRefs += issueRefs.length;
    linkAnalysis.totalLinks += issueRefs.length;
    
    // リンク先のIssueをカウント
    issueRefs.forEach(ref => {
      const refNumber = parseInt(ref.substring(1), 10);
      const refIssue = issues.find(i => i.number === refNumber);
      
      if (refIssue) {
        const targetId = refIssue.number;
        if (!linkAnalysis.mostLinkedPages[targetId]) {
          linkAnalysis.mostLinkedPages[targetId] = {
            title: refIssue.title,
            count: 0
          };
        }
        linkAnalysis.mostLinkedPages[targetId].count++;
      }
    });
  }
  
  // Markdown外部リンクを検出 [text](url)
  const markdownLinks = issue.body.match(/\[.+?\]\((https?:\/\/[^)]+)\)/g);
  if (markdownLinks) {
    linkAnalysis.externalLinks += markdownLinks.length;
    linkAnalysis.totalLinks += markdownLinks.length;
  }
  
  // URLのみのリンクを検出
  const plainUrls = issue.body.match(/(?<!\()https?:\/\/[^\s)]+/g);
  if (plainUrls) {
    linkAnalysis.externalLinks += plainUrls.length;
    linkAnalysis.totalLinks += plainUrls.length;
  }
});

// 内部リンク（Wikiリンク + Issueリファレンス）
linkAnalysis.internalLinks = linkAnalysis.wikiLinks + linkAnalysis.issueRefs;

// 最もリンクが多いページをソート
const topLinkedPages = Object.entries(linkAnalysis.mostLinkedPages)
  .map(([id, data]) => ({ id, ...data }))
  .sort((a, b) => b.count - a.count)
  .slice(0, 5);

// リンク関係のネットワークデータ作成
const linkNetworkData = {
  nodes: [],
  links: []
};

// まずノードを作成
issues.forEach(issue => {
  linkNetworkData.nodes.push({
    id: issue.number.toString(),
    title: issue.title,
    group: issue.labels && issue.labels.length > 0 ? 
           issue.labels[0].name : 'unlabeled'
  });
});

// リンク関係を追加
issues.forEach(issue => {
  if (!issue.body) return;
  
  // [[...]]形式のリンクを検出
  const wikiLinks = issue.body.match(/\[\[(.*?)\]\]/g);
  if (wikiLinks) {
    wikiLinks.forEach(link => {
      const linkedTitle = link.substring(2, link.length - 2).trim();
      const linkedIssue = issues.find(i => 
        i.title.toLowerCase() === linkedTitle.toLowerCase() ||
        i.title.toLowerCase().includes(linkedTitle.toLowerCase())
      );
      
      if (linkedIssue) {
        linkNetworkData.links.push({
          source: issue.number.toString(),
          target: linkedIssue.number.toString(),
          value: 1,
          type: 'wiki'
        });
      }
    });
  }
  
  // #番号形式のリンクを検出
  const issueRefs = issue.body.match(/#(\d+)/g);
  if (issueRefs) {
    issueRefs.forEach(ref => {
      const refNumber = parseInt(ref.substring(1), 10);
      
      if (issues.some(i => i.number === refNumber)) {
        linkNetworkData.links.push({
          source: issue.number.toString(),
          target: refNumber.toString(),
          value: 1,
          type: 'issue'
        });
      }
    });
  }
});

// 更新日時による分類
const recencyCategories = {
  recent: { count: 0, label: 'Recent (last 30 days)' },
  medium: { count: 0, label: 'Medium (30-90 days)' },
  old: { count: 0, label: 'Older (90+ days)' }
};

const now = new Date();
issues.forEach(issue => {
  const updatedDate = new Date(issue.updated_at);
  const daysDifference = Math.floor((now - updatedDate) / (1000 * 60 * 60 * 24));
  
  if (daysDifference < 30) {
    recencyCategories.recent.count++;
  } else if (daysDifference < 90) {
    recencyCategories.medium.count++;
  } else {
    recencyCategories.old.count++;
  }
});

// 修正日からの経過日数分布
const ageDistribution = Array.from({length: 10}, (_, i) => ({
  days: i * 10, // 0-10日, 10-20日, ...
  count: 0
}));

// さらに90日以上のカテゴリー
ageDistribution.push({ days: 90, count: 0 });

issues.forEach(issue => {
  const updatedDate = new Date(issue.updated_at);
  const daysDifference = Math.floor((now - updatedDate) / (1000 * 60 * 60 * 24));
  
  if (daysDifference >= 90) {
    ageDistribution[10].count++;
  } else {
    const bucketIndex = Math.floor(daysDifference / 10);
    ageDistribution[bucketIndex].count++;
  }
});

// フロントエンド用データのシリアライズ
const serializedLabelData = JSON.stringify(labelData);
const serializedActivityData = JSON.stringify(activityData);
const serializedDayOfWeekActivity = JSON.stringify(Object.values(dayOfWeekActivity));
const serializedHourlyActivity = JSON.stringify(hourlyActivity);
const serializedLengthData = JSON.stringify({
  short: lengthCategories.short.count,
  medium: lengthCategories.medium.count,
  long: lengthCategories.long.count
});
const serializedLengthDistribution = JSON.stringify(lengthDistribution);
const serializedRecencyData = JSON.stringify({
  recent: recencyCategories.recent.count,
  medium: recencyCategories.medium.count,
  old: recencyCategories.old.count
});
const serializedAgeDistribution = JSON.stringify(ageDistribution);
const serializedLinkData = JSON.stringify({
  internal: linkAnalysis.internalLinks,
  external: linkAnalysis.externalLinks,
  wikiLinks: linkAnalysis.wikiLinks,
  issueRefs: linkAnalysis.issueRefs
});
const serializedLinkNetworkData = JSON.stringify(linkNetworkData);
---

<Layout title={pageTitle}>
  <div class="analysis-page">
    <header class="page-header">
      <h1>Content Analytics Dashboard</h1>
      <p class="page-description">
        This dashboard visualizes content statistics, activity patterns, and relationship metrics to offer insights into your wiki's structure and engagement.
      </p>
    </header>
    
    <div class="dashboard-controls">
      <select id="theme-selector" class="dashboard-control">
        <option value="default">Default Theme</option>
        <option value="dark">Dark Theme</option>
        <option value="light">Light Theme</option>
        <option value="pastel">Pastel Theme</option>
      </select>
      
      <div class="tabs">
        <button class="tab active" data-tab="overview">Overview</button>
        <button class="tab" data-tab="activity">Activity</button>
        <button class="tab" data-tab="content">Content</button>
        <button class="tab" data-tab="network">Network</button>
      </div>
    </div>
    
    <div class="dashboard-container">
      <!-- Overview Tab (Default View) -->
      <section class="dashboard-section active" id="overview-section">
        <div class="analysis-grid">
          <!-- Summary Card -->
          <div class="analysis-card" id="summary-card">
            <h2 class="card-title">Content Summary</h2>
            <div class="stats-grid">
              <div class="stat-item">
                <div class="stat-value">{issues.length}</div>
                <div class="stat-label">Total Pages</div>
              </div>
              <div class="stat-item">
                <div class="stat-value">{linkAnalysis.totalLinks}</div>
                <div class="stat-label">Total Links</div>
              </div>
              <div class="stat-item">
                <div class="stat-value">{Object.keys(labelCounts).length}</div>
                <div class="stat-label">Categories</div>
              </div>
              <div class="stat-item">
                <div class="stat-value">{activityData.length}</div>
                <div class="stat-label">Active Months</div>
              </div>
            </div>
          </div>
          
          <!-- Category Distribution Card -->
          <div class="analysis-card" id="category-card">
            <h2 class="card-title">Category Distribution</h2>
            <div class="category-chart-container">
              <div id="category-chart"></div>
              <div class="category-legend">
                {labelData.slice(0, 6).map(label => (
                  <div class="legend-item">
                    <span class="legend-color" style={`background-color: #${label.color}`}></span>
                    <span class="legend-text">{label.name} ({label.count})</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
          
          <!-- Monthly Activity Card -->
          <div class="analysis-card" id="activity-card">
            <h2 class="card-title">Monthly Activity</h2>
            <div id="activity-chart"></div>
          </div>
          
          <!-- Content Length Card -->
          <div class="analysis-card" id="length-card">
            <h2 class="card-title">Content Length Distribution</h2>
            <div class="donut-container">
              <div id="length-chart"></div>
              <div class="donut-legend">
                <div class="legend-item">
                  <span class="legend-color" style="background-color: #E9D5FF"></span>
                  <span class="legend-text">{lengthCategories.short.label} ({lengthCategories.short.count})</span>
                </div>
                <div class="legend-item">
                  <span class="legend-color" style="background-color: #C084FC"></span>
                  <span class="legend-text">{lengthCategories.medium.label} ({lengthCategories.medium.count})</span>
                </div>
                <div class="legend-item">
                  <span class="legend-color" style="background-color: #6B21A8"></span>
                  <span class="legend-text">{lengthCategories.long.label} ({lengthCategories.long.count})</span>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Recency Card -->
          <div class="analysis-card" id="recency-card">
            <h2 class="card-title">Content Freshness</h2>
            <div class="donut-container">
              <div id="recency-chart"></div>
              <div class="donut-legend">
                <div class="legend-item">
                  <span class="legend-color" style="background-color: #86EFAC"></span>
                  <span class="legend-text">{recencyCategories.recent.label} ({recencyCategories.recent.count})</span>
                </div>
                <div class="legend-item">
                  <span class="legend-color" style="background-color: #4ADE80"></span>
                  <span class="legend-text">{recencyCategories.medium.label} ({recencyCategories.medium.count})</span>
                </div>
                <div class="legend-item">
                  <span class="legend-color" style="background-color: #16A34A"></span>
                  <span class="legend-text">{recencyCategories.old.label} ({recencyCategories.old.count})</span>
                </div>
              </div>
            </div>
          </div>
          
          <!-- Link Analysis Card -->
          <div class="analysis-card" id="links-card">
            <h2 class="card-title">Link Analysis</h2>
            <div class="links-container">
              <div id="links-chart"></div>
              <div class="links-stats">
                <h3>Most Referenced Pages</h3>
                <ul class="links-list">
                  {topLinkedPages.map(page => (
                    <li>
                      <a href={`${BASE_PATH}/wiki/${page.id}`} class="page-link">
                        {page.title}
                      </a>
                      <span class="link-count">{page.count} {page.count === 1 ? 'reference' : 'references'}</span>
                    </li>
                  ))}
                </ul>
              </div>
            </div>
          </div>
        </div>
      </section>
      
      <!-- Activity Tab -->
      <section class="dashboard-section" id="activity-section">
        <div class="analysis-grid">
          <!-- Day of Week Activity -->
          <div class="analysis-card" id="day-of-week-card">
            <h2 class="card-title">Activity by Day of Week</h2>
            <div id="day-of-week-chart"></div>
          </div>
          
          <!-- Hour of Day Activity -->
          <div class="analysis-card" id="hourly-activity-card">
            <h2 class="card-title">Activity by Hour of Day</h2>
            <div id="hourly-activity-chart"></div>
          </div>
          
          <!-- Monthly Trend -->
          <div class="analysis-card" id="monthly-trend-card">
            <h2 class="card-title">Monthly Activity Trend</h2>
            <div id="monthly-trend-chart"></div>
          </div>
          
          <!-- Content Age Distribution -->
          <div class="analysis-card" id="age-distribution-card">
            <h2 class="card-title">Content Age Distribution</h2>
            <div id="age-distribution-chart"></div>
          </div>
        </div>
      </section>
      
      <!-- Content Tab -->
      <section class="dashboard-section" id="content-section">
        <div class="analysis-grid">
          <!-- Detailed Length Distribution -->
          <div class="analysis-card" id="detailed-length-card">
            <h2 class="card-title">Detailed Content Length Distribution</h2>
            <div id="detailed-length-chart"></div>
          </div>
          
          <!-- Content Type Distribution -->
          <div class="analysis-card" id="content-type-card">
            <h2 class="card-title">Content Type Distribution</h2>
            <div id="content-type-chart"></div>
          </div>
          
          <!-- Growth Over Time -->
          <div class="analysis-card" id="content-growth-card">
            <h2 class="card-title">Content Growth Over Time</h2>
            <div id="content-growth-chart"></div>
          </div>
        </div>
      </section>
      
      <!-- Network Tab -->
      <section class="dashboard-section" id="network-section">
        <div class="analysis-card" id="network-card">
          <h2 class="card-title">Content Relationship Network</h2>
          <div class="network-controls">
            <button id="zoom-in" class="network-control-btn">Zoom In</button>
            <button id="zoom-out" class="network-control-btn">Zoom Out</button>
            <button id="reset-view" class="network-control-btn">Reset View</button>
          </div>
          <div id="network-chart"></div>
          <div class="network-legend">
            <div class="legend-item">
              <span class="legend-line wiki-link"></span>
              <span class="legend-text">Wiki Style Links</span>
            </div>
            <div class="legend-item">
              <span class="legend-line issue-link"></span>
              <span class="legend-text">Issue References</span>
            </div>
          </div>
        </div>
      </section>
    </div>
    
    <div class="action-buttons">
      <a href={`${BASE_PATH}/`} class="action-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
          <polyline points="9 22 9 12 15 12 15 22"></polyline>
        </svg>
        Back to Home
      </a>
      <a href={`${BASE_PATH}/knowledge-graph`} class="action-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16z"></path>
          <polyline points="3.27 6.96 12 12.01 20.73 6.96"></polyline>
          <line x1="12" y1="22.08" x2="12" y2="12"></line>
        </svg>
        View Knowledge Graph
      </a>
    </div>
  </div>
</Layout>

<style>
  .analysis-page {
    padding-bottom: 3rem;
  }
  
  .page-header {
    margin-bottom: 2rem;
    text-align: center;
  }
  
  .page-header h1 {
    font-size: 2.5rem;
    margin-bottom: 0.5rem;
    background: linear-gradient(90deg, #4f6df5, #845ef7);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    display: inline-block;
  }
  
  .page-description {
    color: #666;
    max-width: 800px;
    margin: 0 auto;
  }
  
  .dark .page-description {
    color: #aaa;
  }
  
  .dashboard-controls {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
  }
  
  .dashboard-control {
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    border-radius: 0.5rem;
    background-color: white;
  }
  
  .dark .dashboard-control {
    background-color: #222;
    border-color: #444;
    color: #ddd;
  }
  
  .tabs {
    display: flex;
    border-bottom: 1px solid #ddd;
  }
  
  .tab {
    padding: 0.75rem 1.5rem;
    background: transparent;
    border: none;
    border-bottom: 3px solid transparent;
    cursor: pointer;
    font-weight: 500;
    transition: all 0.2s;
    color: #666;
  }
  
  .tab:hover {
    color: #4f6df5;
  }
  
  .tab.active {
    color: #4f6df5;
    border-bottom-color: #4f6df5;
  }
  
  .dark .tab {
    color: #aaa;
  }
  
  .dark .tab:hover,
  .dark .tab.active {
    color: #7b96ff;
    border-bottom-color: #7b96ff;
  }
  
  .dashboard-section {
    display: none;
  }
  
  .dashboard-section.active {
    display: block;
  }
  
  .analysis-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .analysis-card {
    background: white;
    border-radius: 10px;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.05);
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    transition: all 0.3s ease;
  }
  
  .analysis-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.1);
  }
  
  .dark .analysis-card {
    background: #222;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.2);
  }
  
  .dark .analysis-card:hover {
    box-shadow: 0 8px 20px rgba(0, 0, 0, 0.3);
  }
  
  .card-title {
    font-size: 1.25rem;
    margin-top: 0;
    margin-bottom: 1.25rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid #eee;
    color: #333;
  }
  
  .dark .card-title {
    border-bottom-color: #444;
    color: #eee;
  }
  
  /* Summary Card Styles */
  .stats-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }
  
  .stat-item {
    text-align: center;
    padding: 1rem;
    background-color: #f8fafc;
    border-radius: 8px;
    transition: all 0.3s ease;
  }
  
  .stat-item:hover {
    transform: translateY(-3px);
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.08);
  }
  
  .dark .stat-item {
    background-color: #333;
  }
  
  .dark .stat-item:hover {
    box-shadow: 0 3px 10px rgba(0, 0, 0, 0.15);
  }
  
  .stat-value {
    font-size: 1.75rem;
    font-weight: 700;
    color: #4f6df5;
    margin-bottom: 0.25rem;
  }
  
  .dark .stat-value {
    color: #7b96ff;
  }
  
  .stat-label {
    font-size: 0.875rem;
    color: #64748b;
  }
  
  .dark .stat-label {
    color: #94a3b8;
  }
  
  /* Chart Container Styles */
  .category-chart-container {
    height: 300px;
    display: flex;
    flex-direction: column;
  }
  
  #category-chart {
    flex: 1;
    min-height: 220px;
  }
  
  .category-legend {
    display: flex;
    flex-wrap: wrap;
    gap: 0.75rem;
    margin-top: 1rem;
  }
  
  .legend-item {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
  }
  
  .legend-color {
    width: 12px;
    height: 12px;
    border-radius: 2px;
  }
  
  /* Activity Charts */
  #activity-chart,
  #day-of-week-chart,
  #hourly-activity-chart,
  #monthly-trend-chart,
  #age-distribution-chart,
  #detailed-length-chart,
  #content-type-chart,
  #content-growth-chart {
    height: 250px;
  }
  
  .donut-container {
    display: flex;
    align-items: center;
    height: 250px;
  }
  
  #length-chart,
  #recency-chart {
    width: 50%;
    height: 200px;
  }
  
  .donut-legend {
    width: 50%;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    padding-left: 1rem;
  }
  
  /* Link Analysis Card */
  #links-card {
    grid-column: span 2;
  }
  
  .links-container {
    display: flex;
    height: 300px;
  }
  
  #links-chart {
    width: 50%;
    height: 100%;
  }
  
  .links-stats {
    width: 50%;
    padding-left: 2rem;
  }
  
  .links-stats h3 {
    font-size: 1rem;
    margin-top: 0;
    margin-bottom: 1rem;
    color: #4b5563;
  }
  
  .dark .links-stats h3 {
    color: #e5e7eb;
  }
  
  .links-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .links-list li {
    margin-bottom: 0.75rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background-color: #f9fafb;
    border-radius: 4px;
    transition: all 0.3s ease;
  }
  
  .links-list li:hover {
    transform: translateX(5px);
    background-color: #f0f4f8;
  }
  
  .dark .links-list li {
    background-color: #374151;
  }
  
  .dark .links-list li:hover {
    background-color: #4b5563;
  }
  
  .page-link {
    color: #4f6df5;
    text-decoration: none;
    font-weight: 500;
    text-overflow: ellipsis;
    overflow: hidden;
    white-space: nowrap;
    max-width: 70%;
  }
  
  .dark .page-link {
    color: #93c5fd;
  }
  
  .link-count {
    font-size: 0.875rem;
    color: #6b7280;
    white-space: nowrap;
  }
  
  .dark .link-count {
    color: #9ca3af;
  }
  
  /* Network Graph Styles */
  #network-card {
    grid-column: 1 / -1;
    height: 600px;
  }
  
  #network-chart {
    height: 500px;
    border: 1px solid #eee;
    border-radius: 8px;
    margin: 1rem 0;
  }
  
  .dark #network-chart {
    border-color: #444;
  }
  
  .network-controls {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
  }
  
  .network-control-btn {
    padding: 0.5rem 1rem;
    background-color: #f0f4f8;
    border: none;
    border-radius: 4px;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s;
  }
  
  .network-control-btn:hover {
    background-color: #e0e7ff;
    color: #4f6df5;
  }
  
  .dark .network-control-btn {
    background-color: #333;
    color: #ddd;
  }
  
  .dark .network-control-btn:hover {
    background-color: #444;
    color: #7b96ff;
  }
  
  .network-legend {
    display: flex;
    gap: 2rem;
    margin-top: 1rem;
  }
  
  .legend-line {
    display: inline-block;
    width: 30px;
    height: A2px;
    vertical-align: middle;
  }
  
  .wiki-link {
    background-color: #4f6df5;
  }
  
  .issue-link {
    background-color: #f59e0b;
  }
  
  /* Action Buttons */
  .action-buttons {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 2rem;
  }
  
  .action-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    background-color: var(--color-primary);
    color: white;
    text-decoration: none;
    border-radius: 50px;
    font-weight: 500;
    transition: all 0.3s;
  }
  
  .action-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(79, 109, 245, 0.3);
  }
  
  .dark .action-button:hover {
    box-shadow: 0 5px 15px rgba(79, 109, 245, 0.5);
  }
  
  /* Responsive Design */
  @media (max-width: 768px) {
    .dashboard-controls {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }
    
    .links-container {
      flex-direction: column;
      height: auto;
    }
    
    #links-chart {
      width: 100%;
      height: 220px;
      margin-bottom: 1.5rem;
    }
    
    .links-stats {
      width: 100%;
      padding-left: 0;
    }
    
    .donut-container {
      flex-direction: column;
      height: auto;
    }
    
    #length-chart,
    #recency-chart {
      width: 100%;
      height: 200px;
      margin-bottom: 1rem;
    }
    
    .donut-legend {
      width: 100%;
      padding-left: 0;
    }
    
    #links-card {
      grid-column: span 1;
    }
    
    .action-buttons {
      flex-direction: column;
      align-items: center;
    }
    
    .action-button {
      width: 100%;
      max-width: 300px;
      justify-content: center;
    }
  }
</style>

<script define:vars={{ 
  labelData: serializedLabelData, 
  activityData: serializedActivityData,
  dayOfWeekActivity: serializedDayOfWeekActivity,
  hourlyActivity: serializedHourlyActivity,
  lengthData: serializedLengthData,
  lengthDistribution: serializedLengthDistribution,
  recencyData: serializedRecencyData,
  ageDistribution: serializedAgeDistribution,
  linkData: serializedLinkData,
  linkNetworkData: serializedLinkNetworkData
}}>
  document.addEventListener('DOMContentLoaded', () => {
    // Parse the data
    const issueData = {
      labels: JSON.parse(labelData),
      activity: JSON.parse(activityData),
      dayOfWeek: JSON.parse(dayOfWeekActivity),
      hourly: JSON.parse(hourlyActivity),
      length: JSON.parse(lengthData),
      lengthDist: JSON.parse(lengthDistribution),
      recency: JSON.parse(recencyData),
      ageDist: JSON.parse(ageDistribution),
      links: JSON.parse(linkData),
      network: JSON.parse(linkNetworkData)
    };
    
    // Tab switching functionality
    const tabs = document.querySelectorAll('.tab');
    const sections = document.querySelectorAll('.dashboard-section');
    
    tabs.forEach(tab => {
      tab.addEventListener('click', () => {
        // Remove active class from all tabs and sections
        tabs.forEach(t => t.classList.remove('active'));
        sections.forEach(s => s.classList.remove('active'));
        
        // Add active class to clicked tab
        tab.classList.add('active');
        
        // Show corresponding section
        const tabId = tab.getAttribute('data-tab');
        document.getElementById(`${tabId}-section`).classList.add('active');
        
        // Re-render charts in the newly visible section
        renderAllChartsInSection(tabId);
      });
    });
    
    // Function to render charts in a specific section
    function renderAllChartsInSection(sectionId) {
      switch(sectionId) {
        case 'overview':
          renderCategoryChart();
          renderActivityChart();
          renderLengthChart();
          renderRecencyChart();
          renderLinksChart();
          break;
        case 'activity':
          renderDayOfWeekChart();
          renderHourlyActivityChart();
          renderMonthlyTrendChart();
          renderAgeDistributionChart();
          break;
        case 'content':
          renderDetailedLengthChart();
          renderContentTypeChart();
          renderContentGrowthChart();
          break;
        case 'network':
          renderNetworkChart();
          break;
      }
    }
    
    // Theme selector functionality
    const themeSelector = document.getElementById('theme-selector');
    
    themeSelector.addEventListener('change', () => {
      const theme = themeSelector.value;
      setTheme(theme);
      
      // Re-render all visible charts
      const activeTab = document.querySelector('.tab.active');
      if (activeTab) {
        renderAllChartsInSection(activeTab.getAttribute('data-tab'));
      }
    });
    
    function setTheme(theme) {
      // Apply theme colors to charts
      const body = document.body;
      
      // Remove all theme classes
      body.classList.remove('theme-default', 'theme-dark', 'theme-light', 'theme-pastel');
      
      // Add selected theme class
      body.classList.add(`theme-${theme}`);
    }
    
    // D3.js Charts
    
    // Category Distribution Chart
    function renderCategoryChart() {
      const container = document.getElementById('category-chart');
      if (!container) return;
      
      const width = container.clientWidth;
      const height = container.clientHeight;
      const margin = { top: 20, right: 10, bottom: 30, left: 120 };
      
      const svg = d3.create('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('viewBox', [0, 0, width, height])
        .attr('style', 'max-width: 100%; height: auto;');
      
      const labels = issueData.labels.slice(0, 6); // Top 6 only
      
      const x = d3.scaleLinear()
        .domain([0, d3.max(labels, d => d.count)])
        .range([margin.left, width - margin.right]);
      
      const y = d3.scaleBand()
        .domain(labels.map(d => d.name))
        .range([margin.top, height - margin.bottom])
        .padding(0.2);
      
      // X axis
      svg.append('g')
        .attr('transform', `translate(0,${height - margin.bottom})`)
        .call(d3.axisBottom(x).ticks(5))
        .call(g => g.select('.domain').remove());
      
      // Y axis
      svg.append('g')
        .attr('transform', `translate(${margin.left},0)`)
        .call(d3.axisLeft(y).tickSize(0).tickPadding(10))
        .call(g => g.select('.domain').remove());
      
      // Add bars
      svg.append('g')
        .selectAll('rect')
        .data(labels)
        .join('rect')
        .attr('x', margin.left)
        .attr('y', d => y(d.name))
        .attr('width', d => x(d.count) - margin.left)
        .attr('height', y.bandwidth())
        .attr('fill', d => `#${d.color}`)
        .attr('rx', 4) // Rounded corners
        .attr('ry', 4);
      
      // Add value labels
      svg.append('g')
        .selectAll('text')
        .data(labels)
        .join('text')
        .attr('x', d => x(d.count) + 5)
        .attr('y', d => y(d.name) + y.bandwidth() / 2)
        .attr('dy', '0.35em')
        .style('font-size', '12px')
        .style('fill', '#666')
        .text(d => d.count);
      
      container.innerHTML = '';
      container.appendChild(svg.node());
    }
    
    // Monthly Activity Chart
    function renderActivityChart() {
      const container = document.getElementById('activity-chart');
      if (!container) return;
      
      const width = container.clientWidth;
      const height = container.clientHeight;
      const margin = { top: 20, right: 20, bottom: 50, left: 50 };
      
      const svg = d3.create('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('viewBox', [0, 0, width, height])
        .attr('style', 'max-width: 100%; height: auto;');
      
      // Most recent 6 months
      const recentActivity = issueData.activity.slice(-6);
      
      const x = d3.scaleBand()
        .domain(recentActivity.map(d => d.month))
        .range([margin.left, width - margin.right])
        .padding(0.2);
      
      const y = d3.scaleLinear()
        .domain([0, d3.max(recentActivity, d => Math.max(d.created, d.updated))])
        .nice()
        .range([height - margin.bottom, margin.top]);
      
      // X axis
      svg.append('g')
        .attr('transform', `translate(0,${height - margin.bottom})`)
        .call(d3.axisBottom(x).tickFormat(d => {
          const [year, month] = d.split('-');
          return `${year.slice(2)}/${month}`;
        }))
        .call(g => g.select('.domain').remove())
        .selectAll('text')
        .attr('transform', 'rotate(-45)')
        .style('text-anchor', 'end')
        .attr('dx', '-.8em')
        .attr('dy', '.15em');
      
      // Y axis
      svg.append('g')
        .attr('transform', `translate(${margin.left},0)`)
        .call(d3.axisLeft(y).ticks(5))
        .call(g => g.select('.domain').remove());
      
      // Creation bars
      svg.append('g')
        .selectAll('rect.created')
        .data(recentActivity)
        .join('rect')
        .attr('class', 'created')
        .attr('x', d => x(d.month))
        .attr('y', d => y(d.created))
        .attr('width', x.bandwidth() / 2 - 2)
        .attr('height', d => height - margin.bottom - y(d.created))
        .attr('fill', '#4f6df5')
        .attr('rx', 4)
        .attr('ry', 4);
      
      // Update bars
      svg.append('g')
        .selectAll('rect.updated')
        .data(recentActivity)
        .join('rect')
        .attr('class', 'updated')
        .attr('x', d => x(d.month) + x.bandwidth() / 2)
        .attr('y', d => y(d.updated))
        .attr('width', x.bandwidth() / 2 - 2)
        .attr('height', d => height - margin.bottom - y(d.updated))
        .attr('fill', '#10B981')
        .attr('rx', 4)
        .attr('ry', 4);
      
      // Legend
      const legend = svg.append('g')
        .attr('transform', `translate(${width / 2 - 90},${height - 20})`);
      
      // Creation legend
      legend.append('rect')
        .attr('x', 0)
        .attr('width', 14)
        .attr('height', 14)
        .attr('fill', '#4f6df5')
        .attr('rx', 2)
        .attr('ry', 2);
      
      legend.append('text')
        .attr('x', 20)
        .attr('y', 10)
        .text('Created')
        .style('font-size', '12px');
      
      // Update legend
      legend.append('rect')
        .attr('x', 90)
        .attr('width', 14)
        .attr('height', 14)
        .attr('fill', '#10B981')
        .attr('rx', 2)
        .attr('ry', 2);
      
      legend.append('text')
        .attr('x', 110)
        .attr('y', 10)
        .text('Updated')
        .style('font-size', '12px');
      
      container.innerHTML = '';
      container.appendChild(svg.node());
    }
    
    // Content Length Donut Chart
    function renderLengthChart() {
      const container = document.getElementById('length-chart');
      if (!container) return;
      
      const width = container.clientWidth;
      const height = container.clientHeight;
      
      const svg = d3.create('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('viewBox', [0, 0, width, height])
        .attr('style', 'max-width: 100%; height: auto;');
      
      const length = issueData.length;
      const data = [
        { name: 'short', value: length.short, color: '#E9D5FF' },
        { name: 'medium', value: length.medium, color: '#C084FC' },
        { name: 'long', value: length.long, color: '#6B21A8' }
      ];
      
      const radius = Math.min(width, height) / 2;
      const arcGenerator = d3.arc()
        .innerRadius(radius * 0.5)
        .outerRadius(radius * 0.9)
        .cornerRadius(8);
      
      const pieGenerator = d3.pie()
        .value(d => d.value)
        .sort(null);
      
      const g = svg.append('g')
        .attr('transform', `translate(${width / 2},${height / 2})`);
      
      // Add donut segments
      const path = g.selectAll('path')
        .data(pieGenerator(data))
        .join('path')
        .attr('d', arcGenerator)
        .attr('fill', d => d.data.color)
        .attr('stroke', 'white')
        .style('stroke-width', '2px')
        .style('opacity', 0.9);
      
      // Add hover effect
      path.on('mouseover', function() {
        d3.select(this)
          .transition()
          .duration(300)
          .style('opacity', 1)
          .attr('transform', 'scale(1.05)');
      }).on('mouseout', function() {
        d3.select(this)
          .transition()
          .duration(300)
          .style('opacity', 0.9)
          .attr('transform', 'scale(1)');
      });
      
      // Add labels
      g.selectAll('text')
        .data(pieGenerator(data))
        .join('text')
        .attr('transform', d => `translate(${arcGenerator.centroid(d)})`)
        .attr('text-anchor', 'middle')
        .attr('dy', '0.35em')
        .style('font-size', '12px')
        .style('font-weight', 'bold')
        .style('fill', d => d.data.name === 'long' ? 'white' : '#333')
        .text(d => d.data.value > 0 ? d.data.value : '');
      
      container.innerHTML = '';
      container.appendChild(svg.node());
    }
    
    // Content Recency Donut Chart
    function renderRecencyChart() {
      const container = document.getElementById('recency-chart');
      if (!container) return;
      
      const width = container.clientWidth;
      const height = container.clientHeight;
      
      const svg = d3.create('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('viewBox', [0, 0, width, height])
        .attr('style', 'max-width: 100%; height: auto;');
      
      const recency = issueData.recency;
      const data = [
        { name: 'recent', value: recency.recent, color: '#86EFAC' },
        { name: 'medium', value: recency.medium, color: '#4ADE80' },
        { name: 'old', value: recency.old, color: '#16A34A' }
      ];
      
      const radius = Math.min(width, height) / 2;
      const arcGenerator = d3.arc()
        .innerRadius(radius * 0.5)
        .outerRadius(radius * 0.9)
        .cornerRadius(8);
      
      const pieGenerator = d3.pie()
        .value(d => d.value)
        .sort(null);
      
      const g = svg.append('g')
        .attr('transform', `translate(${width / 2},${height / 2})`);
      
      // Add donut segments
      const path = g.selectAll('path')
        .data(pieGenerator(data))
        .join('path')
        .attr('d', arcGenerator)
        .attr('fill', d => d.data.color)
        .attr('stroke', 'white')
        .style('stroke-width', '2px')
        .style('opacity', 0.9);
      
      // Add hover effect
      path.on('mouseover', function() {
        d3.select(this)
          .transition()
          .duration(300)
          .style('opacity', 1)
          .attr('transform', 'scale(1.05)');
      }).on('mouseout', function() {
        d3.select(this)
          .transition()
          .duration(300)
          .style('opacity', 0.9)
          .attr('transform', 'scale(1)');
      });
      
      // Add labels
      g.selectAll('text')
        .data(pieGenerator(data))
        .join('text')
        .attr('transform', d => `translate(${arcGenerator.centroid(d)})`)
        .attr('text-anchor', 'middle')
        .attr('dy', '0.35em')
        .style('font-size', '12px')
        .style('font-weight', 'bold')
        .style('fill', 'white')
        .text(d => d.data.value > 0 ? d.data.value : '');
      
      container.innerHTML = '';
      container.appendChild(svg.node());
    }
    
    // Link Analysis Chart
    function renderLinksChart() {
      const container = document.getElementById('links-chart');
      if (!container) return;
      
      const width = container.clientWidth;
      const height = container.clientHeight;
      const margin = { top: 30, right: 20, bottom: 70, left: 40 };
      
      const svg = d3.create('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('viewBox', [0, 0, width, height])
        .attr('style', 'max-width: 100%; height: auto;');
      
      const links = issueData.links;
      const data = [
        { name: 'Wiki Style', value: links.wikiLinks, color: '#FCD34D' },
        { name: 'Issue Refs', value: links.issueRefs, color: '#F59E0B' },
        { name: 'External', value: links.external, color: '#FBBF24' }
      ];
      
      const x = d3.scaleBand()
        .domain(data.map(d => d.name))
        .range([margin.left, width - margin.right])
        .padding(0.2);
      
      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => d.value)])
        .nice()
        .range([height - margin.bottom, margin.top]);
      
      // X axis
      svg.append('g')
        .attr('transform', `translate(0,${height - margin.bottom})`)
        .call(d3.axisBottom(x).tickSizeOuter(0))
        .call(g => g.select('.domain').remove());
      
      // Y axis
      svg.append('g')
        .attr('transform', `translate(${margin.left},0)`)
        .call(d3.axisLeft(y).ticks(5))
        .call(g => g.select('.domain').remove());
      
      // Add bars
      const bars = svg.append('g')
        .selectAll('rect')
        .data(data)
        .join('rect')
        .attr('x', d => x(d.name))
        .attr('y', d => y(d.value))
        .attr('width', x.bandwidth())
        .attr('height', d => height - margin.bottom - y(d.value))
        .attr('fill', d => d.color)
        .attr('rx', 6)
        .attr('ry', 6);
      
      // Add hover effect
      bars.on('mouseover', function() {
        d3.select(this)
          .transition()
          .duration(300)
          .attr('opacity', 0.8)
          .attr('y', d => y(d.value) - 5)
          .attr('height', d => height - margin.bottom - y(d.value) + 5);
      }).on('mouseout', function() {
        d3.select(this)
          .transition()
          .duration(300)
          .attr('opacity', 1)
          .attr('y', d => y(d.value))
          .attr('height', d => height - margin.bottom - y(d.value));
      });
      
      // Add value labels
      svg.append('g')
        .selectAll('text')
        .data(data)
        .join('text')
        .attr('x', d => x(d.name) + x.bandwidth() / 2)
        .attr('y', d => y(d.value) - 5)
        .attr('text-anchor', 'middle')
        .style('font-size', '12px')
        .style('font-weight', 'bold')
        .style('fill', '#666')
        .text(d => d.value);
      
      // Add title
      svg.append('text')
        .attr('x', width / 2)
        .attr('y', margin.top / 2)
        .attr('text-anchor', 'middle')
        .style('font-size', '14px')
        .style('font-weight', 'bold')
        .text('Link Types Distribution');
      
      // Add total count
      svg.append('text')
        .attr('x', width / 2)
        .attr('y', height - 10)
        .attr('text-anchor', 'middle')
        .style('font-size', '12px')
        .text(`Total Links: ${links.internal + links.external}`);
      
      container.innerHTML = '';
      container.appendChild(svg.node());
    }
    
    // Activity Tab Charts
    
    // Day of Week Activity
    function renderDayOfWeekChart() {
      const container = document.getElementById('day-of-week-chart');
      if (!container) return;
      
      const width = container.clientWidth;
      const height = container.clientHeight;
      const margin = { top: 30, right: 20, bottom: 40, left: 50 };
      
      const svg = d3.create('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('viewBox', [0, 0, width, height])
        .attr('style', 'max-width: 100%; height: auto;');
      
      const data = issueData.dayOfWeek;
      
      const x = d3.scaleBand()
        .domain(data.map(d => d.label))
        .range([margin.left, width - margin.right])
        .padding(0.2);
      
      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => Math.max(d.created, d.updated))])
        .nice()
        .range([height - margin.bottom, margin.top]);
      
      // X axis
      svg.append('g')
        .attr('transform', `translate(0,${height - margin.bottom})`)
        .call(d3.axisBottom(x).tickSizeOuter(0))
        .call(g => g.select('.domain').remove());
      
      // Y axis
      svg.append('g')
        .attr('transform', `translate(${margin.left},0)`)
        .call(d3.axisLeft(y).ticks(5))
        .call(g => g.select('.domain').remove());
      
      // Add bars for created
      svg.append('g')
        .selectAll('rect.created')
        .data(data)
        .join('rect')
        .attr('class', 'created')
        .attr('x', d => x(d.label))
        .attr('y', d => y(d.created))
        .attr('width', x.bandwidth() / 2 - 2)
        .attr('height', d => height - margin.bottom - y(d.created))
        .attr('fill', '#4f6df5')
        .attr('rx', 4)
        .attr('ry', 4);
      
      // Add bars for updated
      svg.append('g')
        .selectAll('rect.updated')
        .data(data)
        .join('rect')
        .attr('class', 'updated')
        .attr('x', d => x(d.label) + x.bandwidth() / 2)
        .attr('y', d => y(d.updated))
        .attr('width', x.bandwidth() / 2 - 2)
        .attr('height', d => height - margin.bottom - y(d.updated))
        .attr('fill', '#10B981')
        .attr('rx', 4)
        .attr('ry', 4);
      
      // Legend
      const legend = svg.append('g')
        .attr('transform', `translate(${width / 2 - 90},${height - 10})`);
      
      legend.append('rect')
        .attr('x', 0)
        .attr('width', 14)
        .attr('height', 14)
        .attr('fill', '#4f6df5')
        .attr('rx', 2)
        .attr('ry', 2);
      
      legend.append('text')
        .attr('x', 20)
        .attr('y', 10)
        .text('Created')
        .style('font-size', '12px');
      
      legend.append('rect')
        .attr('x', 90)
        .attr('width', 14)
        .attr('height', 14)
        .attr('fill', '#10B981')
        .attr('rx', 2)
        .attr('ry', 2);
      
      legend.append('text')
        .attr('x', 110)
        .attr('y', 10)
        .text('Updated')
        .style('font-size', '12px');
      
      container.innerHTML = '';
      container.appendChild(svg.node());
    }
    
    // Hourly Activity Chart
    function renderHourlyActivityChart() {
      const container = document.getElementById('hourly-activity-chart');
      if (!container) return;
      
      const width = container.clientWidth;
      const height = container.clientHeight;
      const margin = { top: 30, right: 20, bottom: 40, left: 50 };
      
      const svg = d3.create('svg')
        .attr('width', width)
        .attr('height', height)
        .attr('viewBox', [0, 0, width, height])
        .attr('style', 'max-width: 100%; height: auto;');
      
      const data = issueData.hourly;
      
      // Create line generators
      const x = d3.scaleLinear()
        .domain([0, 23])
        .range([margin.left, width - margin.right]);
      
      const y = d3.scaleLinear()
        .domain([0, d3.max(data, d => Math.max(d.created, d.updated))])
        .nice()
        .range([height - margin.bottom, margin.top]);
      
      // X axis
      svg.append('g')
        .attr('transform', `translate(0,${height - margin.bottom})`)
        .call(d3.axisBottom(x).ticks(12).tickFormat(d => `${d}h`))
        .call(g => g.select('.domain').remove());
      
      // Y axis
      svg.append('g')
        .attr('transform', `translate(${margin.left},0)`)
        .call(d3.axisLeft(y).ticks(5))
        .call(g => g.select('.domain').remove());
      
      // Add line for created
      const createdLine = d3.line()
        .x(d => x(d.hour))
        .y(d => y(d.created))
        .curve(d3.curveMonotoneX);
      
      svg.append('path')
        .datum(data)
        .attr('fill', 'none')
        .attr('stroke', '#4f6df5')
        .attr('stroke-width', 3)
        .attr('d', createdLine);
      
      // Add line for updated
      const updatedLine = d3.line()
        .x(d => x(d.hour))
        .y(d => y(d.updated))
        .curve(d3.curveMonotoneX);
      
      svg.append('path')
        .datum(data)
        .attr('fill', 'none')
        .attr('stroke', '#10B981')
        .attr('stroke-width', 3)
        .attr('d', updatedLine);
      
      // Add dots for created
      svg.selectAll('.dot-created')
        .data(data.filter(d => d.created > 0))
        .enter().append('circle')
        .attr('class', 'dot-created')
        .attr('cx', d => x(d.hour))
        .attr('cy', d => y(d.created))
        .attr('r', 5)
        .attr('fill', '#4f6df5');
      
      // Add dots for updated
      svg.selectAll('.dot-updated')
        .data(data.filter(d => d.updated > 0))
        .enter().append('circle')
        .attr('class', 'dot-updated')
        .attr('cx', d => x(d.hour))
        .attr('cy', d => y(d.updated))
        .attr('r', 5)
        .attr('fill', '#10B981');
      
      // Legend
      const legend = svg.append('g')
        .attr('transform', `translate(${width / 2 - 90},${height - 10})`);
      
      legend.append('line')
        .attr('x1', 0)
        .attr('y1', 5)
        .attr('x2', 14)
        .attr('y2', 5)
        .attr('stroke', '#4f6df5')
        .attr('stroke-width', 3);
      
      legend.append('text')
        .attr('x', 20)
        .attr('y', 10)
        .text('Created')
        .style('font-size', '12px');
      
      legend.append('line')
        .attr('x1', 90)
        .attr('y1', 5)
        .attr('x2', 104)
        .attr('y2', 5)
        .attr('stroke', '#10B981')
        .attr('stroke-width', 3);
      
      legend.append('text')
        .attr('x', 110)
        .attr('y', 10)
        .text('Updated')
        .style('font-size', '12px');
      
      container.innerHTML = '';
      container.appendChild(svg.node());
    }
    
    // Add placeholder implementations for remaining charts
    function renderMonthlyTrendChart() {
      const container = document.getElementById('monthly-trend-chart');
      if (!container) return;
      
      // Similar implementation to other charts
      container.innerHTML = '<div style="height: 100%; display: flex; align-items: center; justify-content: center; color: #666;">Monthly trend chart will be implemented in future updates</div>';
    }
    
    function renderAgeDistributionChart() {
      const container = document.getElementById('age-distribution-chart');
      if (!container) return;
      
      // Similar implementation to other charts
      container.innerHTML = '<div style="height: 100%; display: flex; align-items: center; justify-content: center; color: #666;">Age distribution chart will be implemented in future updates</div>';
    }
    
    function renderDetailedLengthChart() {
      const container = document.getElementById('detailed-length-chart');
      if (!container) return;
      
      // Similar implementation to other charts
      container.innerHTML = '<div style="height: 100%; display: flex; align-items: center; justify-content: center; color: #666;">Detailed length chart will be implemented in future updates</div>';
    }
    
    function renderContentTypeChart() {
      const container = document.getElementById('content-type-chart');
      if (!container) return;
      
      // Similar implementation to other charts
      container.innerHTML = '<div style="height: 100%; display: flex; align-items: center; justify-content: center; color: #666;">Content type chart will be implemented in future updates</div>';
    }
    
    function renderContentGrowthChart() {
      const container = document.getElementById('content-growth-chart');
      if (!container) return;
      
      // Similar implementation to other charts
      container.innerHTML = '<div style="height: 100%; display: flex; align-items: center; justify-content: center; color: #666;">Content growth chart will be implemented in future updates</div>';
    }
    
    function renderNetworkChart() {
      const container = document.getElementById('network-chart');
      if (!container) return;
      
      // Similar implementation to other charts
      container.innerHTML = '<div style="height: 100%; display: flex; align-items: center; justify-content: center; color: #666;">Network visualization will be implemented in future updates</div>';
    }
    
    // Initial rendering of the Overview section charts
    renderCategoryChart();
    renderActivityChart();
    renderLengthChart();
    renderRecencyChart();
    renderLinksChart();
    
    // Handle window resize
    window.addEventListener('resize', () => {
      const activeTab = document.querySelector('.tab.active');
      if (activeTab) {
        renderAllChartsInSection(activeTab.getAttribute('data-tab'));
      }
    });
  });
</script>

<!-- D3.js -->
<script is:inline src="https://d3js.org/d3.v7.min.js"></script>
