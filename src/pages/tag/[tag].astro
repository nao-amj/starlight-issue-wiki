---
import Layout from '../../layouts/Layout.astro';
import { BASE_PATH, SITE_TITLE } from '../../config';

// タグに関連するIssueを検索する関数
async function fetchIssuesByTag(tag) {
  try {
    // GitHubのSearchAPIを使用してIssueを検索
    // Note: APIの仕様上、検索クエリは `#tagname` というパターンだと検索できないため
    // 代わりに本文内のパターンで検索します
    const response = await fetch(`https://api.github.com/search/issues?q=repo:nao-amj/starlight-issue-wiki%20%23${tag}%20in:body&per_page=50`);
    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }
    
    const data = await response.json();
    // プルリクエストを除外
    return data.items.filter(item => !item.pull_request);
  } catch (error) {
    console.error(`Error fetching issues for tag ${tag}:`, error);
    return [];
  }
}

// 動的ルーティングの設定 - すべてのタグを動的に生成
export async function getStaticPaths() {
  // getStaticPaths内で独自に関数を定義（スコープの問題を解決）
  async function fetchAllIssues() {
    try {
      const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues?state=all&per_page=100');
      if (!response.ok) {
        throw new Error(`GitHub API error: ${response.status}`);
      }
      const allItems = await response.json();
      return allItems.filter(item => !item.pull_request);
    } catch (error) {
      console.error('Error fetching issues:', error);
      return [];
    }
  }

  function extractAllTags(issues) {
    const allTags = new Set();
    
    issues.forEach(issue => {
      if (!issue.body) return;
      
      // ハッシュタグを検出
      const tagMatches = issue.body.match(/#([a-zA-Z0-9_-]+)/g);
      if (tagMatches) {
        tagMatches.forEach(tag => {
          const cleanTag = tag.substring(1).toLowerCase();
          allTags.add(cleanTag);
        });
      }
      
      // ラベルもタグとして扱う
      if (issue.labels && Array.isArray(issue.labels)) {
        issue.labels.forEach(label => {
          if (typeof label === 'object' && label.name) {
            const labelName = label.name.toLowerCase();
            allTags.add(labelName);
          }
        });
      }
    });
    
    return Array.from(allTags);
  }

  const issues = await fetchAllIssues();
  const allTags = extractAllTags(issues);
  
  return allTags.map(tag => ({
    params: { tag }
  }));
}

const { tag } = Astro.params;
const issues = await fetchIssuesByTag(tag);
const pageTitle = `#${tag} - タグページ - ${SITE_TITLE}`;

// 関連タグの候補リスト（ランダムに5つ表示）
const relatedTagCandidates = [
  'knowledge-management',
  'note-taking',
  'productivity',
  'wiki',
  'documentation',
  'feature',
  'zettelkasten',
  'pkm',
  'learning',
  'organization',
  'research',
  'workflow'
];

// 現在のタグを除外して、ランダムに5つの関連タグを選択
const filteredCandidates = relatedTagCandidates.filter(t => t !== tag);
const randomRelatedTags = filteredCandidates
  .sort(() => 0.5 - Math.random())
  .slice(0, 5);
---

<Layout title={pageTitle}>
  <div class="tag-page">
    <header class="tag-header">
      <div class="tag-info">
        <h1 class="tag-title">#{tag}</h1>
        <div class="tag-meta">{issues.length} 件のページが見つかりました</div>
      </div>
    </header>
    
    <div class="tag-content">
      {issues.length > 0 ? (
        <ul class="issue-list">
          {issues.map(issue => (
            <li class="issue-item">
              <a href={`${BASE_PATH}/wiki/${issue.number}`} class="issue-link">
                <div class="issue-title">{issue.title}</div>
                <div class="issue-meta">
                  <span class="issue-number">#{issue.number}</span>
                  <span class="issue-date">{new Date(issue.updated_at).toLocaleDateString('ja-JP')}</span>
                </div>
              </a>
            </li>
          ))}
        </ul>
      ) : (
        <div class="empty-state">
          <p>このタグが付いたページはありません。</p>
          <a href={`${BASE_PATH}/`} class="home-link">トップページに戻る</a>
        </div>
      )}
    </div>
    
    <div class="similar-tags">
      <h2>関連タグ</h2>
      <div class="tag-cloud">
        {randomRelatedTags.map(relatedTag => (
          <a href={`${BASE_PATH}/tag/${relatedTag}`} class="tag-link">
            #{relatedTag}
          </a>
        ))}
        <a href={`${BASE_PATH}/tag`} class="tag-link all-tags-link">
          すべてのタグを表示
        </a>
      </div>
    </div>
  </div>
</Layout>

<style>
  .tag-page {
    max-width: 900px;
    margin: 0 auto;
    padding: 2rem 0;
  }
  
  .tag-header {
    background: linear-gradient(135deg, #4f6df5 0%, #283593 100%);
    color: white;
    padding: 2rem;
    border-radius: 8px;
    margin-bottom: 2rem;
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
  }
  
  .dark .tag-header {
    background: linear-gradient(135deg, #2a3f9d 0%, #1a237e 100%);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
  }
  
  .tag-title {
    margin: 0;
    font-size: 2rem;
  }
  
  .tag-meta {
    margin-top: 0.5rem;
    font-size: 1rem;
    opacity: 0.9;
  }
  
  .tag-content {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    padding: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .dark .tag-content {
    background-color: #222;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  }
  
  .issue-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }
  
  .issue-item {
    margin-bottom: 1rem;
    border-bottom: 1px solid #eee;
    padding-bottom: 1rem;
  }
  
  .dark .issue-item {
    border-bottom-color: #444;
  }
  
  .issue-item:last-child {
    margin-bottom: 0;
    border-bottom: none;
    padding-bottom: 0;
  }
  
  .issue-link {
    display: flex;
    justify-content: space-between;
    align-items: center;
    text-decoration: none;
    color: inherit;
    padding: 0.5rem;
    border-radius: 4px;
    transition: all 0.2s;
  }
  
  .issue-link:hover {
    background-color: #f5f5f5;
    transform: translateY(-2px);
  }
  
  .dark .issue-link:hover {
    background-color: #333;
  }
  
  .issue-title {
    font-weight: 500;
    color: var(--color-primary);
  }
  
  .issue-meta {
    font-size: 0.9rem;
    color: #666;
    display: flex;
    gap: 1rem;
  }
  
  .dark .issue-meta {
    color: #aaa;
  }
  
  .empty-state {
    text-align: center;
    padding: 3rem 0;
    color: #666;
  }
  
  .dark .empty-state {
    color: #aaa;
  }
  
  .home-link {
    display: inline-block;
    margin-top: 1rem;
    padding: 0.5rem 1rem;
    background-color: var(--color-primary);
    color: white;
    text-decoration: none;
    border-radius: 4px;
    transition: all 0.2s;
  }
  
  .home-link:hover {
    background-color: var(--color-primary-dark, #3a50c5);
  }
  
  .similar-tags {
    background-color: white;
    border-radius: 8px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
    padding: 1.5rem;
  }
  
  .dark .similar-tags {
    background-color: #222;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
  }
  
  .similar-tags h2 {
    margin-top: 0;
    margin-bottom: 1rem;
    font-size: 1.2rem;
  }
  
  .tag-cloud {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .tag-link {
    display: inline-block;
    text-decoration: none;
    color: #1a73e8;
    background-color: rgba(26, 115, 232, 0.1);
    padding: 0.3em 0.6em;
    border-radius: 0.25em;
    font-size: 0.9em;
    transition: all 0.2s;
  }
  
  .tag-link:hover {
    background-color: rgba(26, 115, 232, 0.2);
    transform: translateY(-2px);
  }
  
  .dark .tag-link {
    color: #64b5f6;
    background-color: rgba(100, 181, 246, 0.1);
  }
  
  .dark .tag-link:hover {
    background-color: rgba(100, 181, 246, 0.2);
  }
  
  .all-tags-link {
    background-color: rgba(26, 115, 232, 0.05);
    border: 1px dashed rgba(26, 115, 232, 0.3);
  }
  
  .dark .all-tags-link {
    background-color: rgba(100, 181, 246, 0.05);
    border: 1px dashed rgba(100, 181, 246, 0.3);
  }
</style>
