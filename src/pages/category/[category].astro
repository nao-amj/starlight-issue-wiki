---
import Layout from '../../layouts/Layout.astro';
import { BASE_PATH } from '../../config';

// GitHub API からIssueを取得する関数
async function fetchIssues() {
  try {
    // GitHub APIを使用してissueを取得
    const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues');
    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error('Error fetching issues:', error);
    return [];
  }
}

// カテゴリ一覧を取得（全てのIssueからラベルを収集）
export async function getStaticPaths() {
  const issues = await fetchIssues();
  
  // 全てのカテゴリー（ラベル）を収集
  const categories = new Set();
  issues.forEach(issue => {
    if (issue.labels && issue.labels.length > 0) {
      issue.labels.forEach(label => {
        categories.add(label.name.toLowerCase());
      });
    }
  });
  
  // 各カテゴリに対応するパラメータを作成
  return Array.from(categories).map(category => {
    return {
      params: { category },
      props: { categoryName: category, issues }
    };
  });
}

const { categoryName, issues } = Astro.props;

// 表示用のカテゴリー名（先頭大文字）
const displayCategoryName = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);

// 現在のカテゴリに属するIssueをフィルタリング
const categoryIssues = issues.filter(issue => 
  issue.labels && issue.labels.some(label => 
    label.name.toLowerCase() === categoryName.toLowerCase()
  )
);

// カテゴリーの色を取得（最初に見つかったラベルの色を使用）
let categoryColor = "808080"; // デフォルト色
if (categoryIssues.length > 0 && categoryIssues[0].labels) {
  const categoryLabel = categoryIssues[0].labels.find(label => 
    label.name.toLowerCase() === categoryName.toLowerCase()
  );
  if (categoryLabel && categoryLabel.color) {
    categoryColor = categoryLabel.color;
  }
}

// 日付でソート（新しい順）
categoryIssues.sort((a, b) => new Date(b.updated_at) - new Date(a.updated_at));
---

<Layout title={`${displayCategoryName} - カテゴリー`}>
  <div class="container">
    <div class="category-header">
      <h1>カテゴリー: {displayCategoryName}</h1>
      <div class="category-badge" style={`background-color: #${categoryColor}20; color: #${categoryColor}; border: 1px solid #${categoryColor}40;`}>
        {categoryIssues.length} 件のページがあります
      </div>
    </div>
    
    <div class="issue-grid">
      {categoryIssues.map(issue => {
        const date = new Date(issue.updated_at);
        const formattedDate = new Intl.DateTimeFormat('ja-JP', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        }).format(date);
        
        return (
          <div class="issue-card">
            <a href={`${BASE_PATH}/wiki/${issue.number}`} class="issue-link">
              <h2>{issue.title}</h2>
            </a>
            <div class="issue-labels">
              {issue.labels.map(label => (
                <a href={`${BASE_PATH}/category/${label.name.toLowerCase()}`} class="tag" 
                   style={`background-color: #${label.color}20; color: #${label.color}; border: 1px solid #${label.color}40;`}>
                  {label.name}
                </a>
              ))}
            </div>
            <div class="issue-meta">
              <span class="issue-number">#{issue.number}</span>
              <span class="issue-date">更新: {formattedDate}</span>
            </div>
          </div>
        );
      })}
    </div>
    
    <div class="nav-panel">
      <a href={BASE_PATH + "/"} class="back-button">← トップページに戻る</a>
    </div>
  </div>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }
  
  .category-header {
    margin-bottom: 2rem;
    background: white;
    padding: 2rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
  }
  
  .category-header h1 {
    margin: 0 0 1rem 0;
  }
  
  .category-badge {
    display: inline-block;
    padding: 0.3rem 0.7rem;
    border-radius: 0.25rem;
    font-size: 0.9rem;
    font-weight: 500;
  }
  
  .issue-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
  }
  
  .issue-card {
    background: white;
    padding: 1.5rem;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    transition: transform 0.2s, box-shadow 0.2s;
  }
  
  .issue-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
  }
  
  .issue-link {
    text-decoration: none;
  }
  
  .issue-link h2 {
    color: var(--color-primary);
    margin: 0 0 1rem 0;
    font-size: 1.3rem;
  }
  
  .issue-labels {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }
  
  .tag {
    display: inline-block;
    padding: 0.2em 0.5em;
    border-radius: 0.25rem;
    font-size: 0.8rem;
    font-weight: 500;
    text-decoration: none;
    line-height: 1.2;
    white-space: nowrap;
  }
  
  .issue-meta {
    display: flex;
    justify-content: space-between;
    font-size: 0.9rem;
    color: #666;
  }
  
  .nav-panel {
    margin-top: 2rem;
    text-align: center;
  }
  
  .back-button {
    display: inline-block;
    padding: 0.75rem 1.5rem;
    background-color: var(--color-primary);
    color: white;
    text-decoration: none;
    border-radius: 4px;
    font-weight: 500;
    transition: background-color 0.2s;
  }
  
  .back-button:hover {
    background-color: var(--color-primary-dark, #0056b3);
  }
  
  /* レスポンシブデザイン */
  @media (max-width: 768px) {
    .issue-grid {
      grid-template-columns: 1fr;
    }
    
    .container {
      padding: 1rem;
    }
  }
</style>
