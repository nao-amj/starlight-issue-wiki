---
import Layout from '../layouts/Layout.astro';
import KnowledgeGraph from '../components/KnowledgeGraph.astro';
import { SITE_TITLE } from '../config';

// GitHub API からIssueを取得する関数
async function fetchIssues() {
  try {
    // GitHub APIを使用してissueを取得（プルリクエストを除外）
    const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues?state=all&per_page=100');
    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }
    const allItems = await response.json();
    // プルリクエストを除外する
    return allItems.filter(item => !item.pull_request);
  } catch (error) {
    console.error('Error fetching issues:', error);
    return [];
  }
}

const issues = await fetchIssues();
const pageTitle = `知識グラフ - ${SITE_TITLE}`;
const issueCount = issues.length;

// リンクの統計を計算
let totalLinks = 0;
let bidirectionalLinks = 0;

issues.forEach(issue => {
  if (!issue.body) return;
  
  // [[...]]形式のリンクを検出
  const wikiLinks = issue.body.match(/\[\[(.*?)\]\]/g);
  if (wikiLinks) {
    totalLinks += wikiLinks.length;
  }
  
  // #番号形式のリンクを検出
  const issueRefs = issue.body.match(/#(\d+)/g);
  if (issueRefs) {
    totalLinks += issueRefs.length;
  }
});

// 双方向リンクの検出（簡易版）
const mentionMap = new Map();
issues.forEach(issue => {
  mentionMap.set(issue.number, new Set());
});

issues.forEach(issue => {
  if (!issue.body) return;
  
  // [[...]]形式のリンクを検出
  const wikiLinks = issue.body.match(/\[\[(.*?)\]\]/g);
  if (wikiLinks) {
    wikiLinks.forEach(link => {
      const linkedTitle = link.substring(2, link.length - 2).trim();
      const linkedIssue = issues.find(i => 
        i.title.toLowerCase() === linkedTitle.toLowerCase() ||
        i.title.toLowerCase().includes(linkedTitle.toLowerCase())
      );
      
      if (linkedIssue && linkedIssue.number !== issue.number) {
        mentionMap.get(issue.number).add(linkedIssue.number);
      }
    });
  }
  
  // #番号形式のリンクを検出
  const issueRefs = issue.body.match(/#(\d+)/g);
  if (issueRefs) {
    issueRefs.forEach(ref => {
      const refNumber = parseInt(ref.substring(1), 10);
      const refIssue = issues.find(i => i.number === refNumber);
      
      if (refIssue && refIssue.number !== issue.number) {
        mentionMap.get(issue.number).add(refIssue.number);
      }
    });
  }
});

// 双方向リンクのカウント
mentionMap.forEach((mentions, issueNumber) => {
  mentions.forEach(mentionedIssue => {
    const mentionedIssueMentions = mentionMap.get(mentionedIssue);
    
    if (mentionedIssueMentions && mentionedIssueMentions.has(issueNumber)) {
      bidirectionalLinks += 1;
    }
  });
});

// 重複カウントを避けるため2で割る
bidirectionalLinks = bidirectionalLinks / 2;
---

<Layout title={pageTitle}>
  <div class="knowledge-graph-page">
    <header class="graph-header">
      <div class="header-content">
        <h1 class="header-title">知識グラフ</h1>
        <p class="header-description">
          Wiki内のページとその関連性の可視化。リンク関係を通じて知識の繋がりを探索できます。
        </p>
        <div class="graph-stats">
          <div class="stat-item">
            <div class="stat-value">{issueCount}</div>
            <div class="stat-label">ページ数</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">{totalLinks}</div>
            <div class="stat-label">総リンク数</div>
          </div>
          <div class="stat-item">
            <div class="stat-value">{bidirectionalLinks}</div>
            <div class="stat-label">双方向リンク</div>
          </div>
        </div>
      </div>
      <div class="header-bg"></div>
    </header>
    
    <div class="graph-instructions">
      <div class="instruction-icon">
        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="12" y1="16" x2="12" y2="12"></line>
          <line x1="12" y1="8" x2="12.01" y2="8"></line>
        </svg>
      </div>
      <div class="instruction-text">
        <strong>操作方法:</strong> ノードをドラッグして移動 | ホイールでズーム | ノードをクリックしてページ閲覧 | 右下コントロールでズーム調整 | 凡例ボタンで詳細表示
      </div>
    </div>
    
    <div class="graph-container">
      <KnowledgeGraph 
        issues={issues} 
        showFullGraph={true} 
      />
    </div>
    
    <div class="graph-actions">
      <a href="/" class="action-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M3 9l9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
          <polyline points="9 22 9 12 15 12 15 22"></polyline>
        </svg>
        トップページへ戻る
      </a>
      <a href="/wiki/1" class="action-button">
        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
          <path d="M2 3h6a4 4 0 0 1 4 4v14a3 3 0 0 0-3-3H2z"></path>
          <path d="M22 3h-6a4 4 0 0 0-4 4v14a3 3 0 0 1 3-3h7z"></path>
        </svg>
        はじめにのページ
      </a>
    </div>
  </div>
</Layout>

<style>
  .knowledge-graph-page {
    padding-bottom: 3rem;
  }
  
  .graph-header {
    position: relative;
    padding: 3rem 0;
    margin-bottom: 2rem;
    color: white;
    overflow: hidden;
    border-radius: 10px;
  }
  
  .header-content {
    position: relative;
    z-index: 2;
    text-align: center;
    padding: 0 1rem;
  }
  
  .header-title {
    margin-bottom: 1rem;
    font-size: 2.5rem;
    font-weight: 700;
  }
  
  .header-description {
    max-width: 700px;
    margin: 0 auto 2rem;
    font-size: 1.1rem;
    opacity: 0.9;
    line-height: 1.6;
  }
  
  .graph-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-top: 1.5rem;
  }
  
  .stat-item {
    text-align: center;
    background-color: rgba(255, 255, 255, 0.2);
    padding: 1rem 1.5rem;
    border-radius: 8px;
    backdrop-filter: blur(5px);
    min-width: 120px;
  }
  
  .stat-value {
    font-size: 2rem;
    font-weight: 700;
    margin-bottom: 0.25rem;
  }
  
  .stat-label {
    font-size: 0.9rem;
    opacity: 0.8;
  }
  
  .header-bg {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(135deg, #4f6df5 0%, #283593 100%);
    z-index: 1;
  }
  
  .graph-instructions {
    display: flex;
    align-items: center;
    background-color: rgba(79, 109, 245, 0.1);
    border-left: 4px solid var(--color-primary);
    padding: 1rem 1.5rem;
    border-radius: 0 8px 8px 0;
    margin: 2rem 0;
  }
  
  .dark .graph-instructions {
    background-color: rgba(79, 109, 245, 0.15);
  }
  
  .instruction-icon {
    margin-right: 1rem;
    color: var(--color-primary);
  }
  
  .instruction-text {
    font-size: 0.95rem;
    line-height: 1.5;
  }
  
  .graph-container {
    margin: 2rem 0;
    width: 100%;
    border-radius: 10px;
    overflow: hidden;
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
    border: 1px solid rgba(0, 0, 0, 0.05);
  }
  
  .dark .graph-container {
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.3);
    border-color: rgba(255, 255, 255, 0.1);
  }
  
  .graph-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 2rem;
  }
  
  .action-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.25rem;
    background-color: var(--color-primary);
    color: white;
    text-decoration: none;
    border-radius: 50px;
    font-weight: 500;
    transition: all 0.3s;
  }
  
  .action-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 5px 15px rgba(79, 109, 245, 0.3);
  }
  
  .dark .action-button:hover {
    box-shadow: 0 5px 15px rgba(79, 109, 245, 0.5);
  }
  
  @media (max-width: 768px) {
    .graph-stats {
      flex-direction: column;
      gap: 1rem;
      align-items: center;
    }
    
    .stat-item {
      width: 80%;
    }
    
    .graph-actions {
      flex-direction: column;
      align-items: center;
    }
    
    .action-button {
      width: 80%;
      justify-content: center;
    }
    
    .header-title {
      font-size: 2rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // パーティクルの追加
    const header = document.querySelector('.header-bg');
    if (header) {
      // ランダムなパーティクルを生成
      for (let i = 0; i < 50; i++) {
        const particle = document.createElement('div');
        particle.className = 'particle';
        
        const size = Math.random() * 8 + 2;
        const posX = Math.random() * 100;
        const posY = Math.random() * 100;
        const opacity = Math.random() * 0.5 + 0.1;
        const animDuration = Math.random() * 20 + 10;
        const animDelay = Math.random() * 5;
        
        particle.style.cssText = `
          position: absolute;
          width: ${size}px;
          height: ${size}px;
          background-color: white;
          border-radius: 50%;
          top: ${posY}%;
          left: ${posX}%;
          opacity: ${opacity};
          animation: float ${animDuration}s ease-in-out ${animDelay}s infinite;
        `;
        
        header.appendChild(particle);
      }
      
      // アニメーションスタイルの追加
      const styleElement = document.createElement('style');
      styleElement.textContent = `
        @keyframes float {
          0%, 100% { transform: translate(0, 0); }
          25% { transform: translate(10px, 10px); }
          50% { transform: translate(20px, 0); }
          75% { transform: translate(10px, -10px); }
        }
      `;
      document.head.appendChild(styleElement);
    }
    
    // 統計数値のアニメーション
    const statValues = document.querySelectorAll('.stat-value');
    statValues.forEach(statElem => {
      const finalValue = parseInt(statElem.textContent, 10);
      animateValue(statElem, 0, finalValue, 1500);
    });
    
    function animateValue(element, start, end, duration) {
      if (start === end) return;
      const range = end - start;
      const increment = end > start ? 1 : -1;
      const stepTime = Math.abs(Math.floor(duration / range));
      let current = start;
      
      const timer = setInterval(() => {
        current += increment;
        element.textContent = current;
        if (current === end) {
          clearInterval(timer);
        }
      }, stepTime);
    }
  });
</script>
