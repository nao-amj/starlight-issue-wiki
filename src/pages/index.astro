---
import { getIssues, generateSlug } from '../lib/github';
import { BASE_PATH, SITE_TITLE, SITE_DESCRIPTION, REPO_URL } from '../config';
import { formatDistance } from 'date-fns';
import { ja } from 'date-fns/locale';

// issueのデータを取得
const issues = await getIssues();

// カテゴリーごとのissue一覧を作成
const categorizedIssues = issues.reduce((acc, issue) => {
  // ラベルでカテゴリわけ
  const labels = issue.labels || [];
  
  labels.forEach(label => {
    const category = label.name;
    if (!acc[category]) {
      acc[category] = [];
    }
    if (!acc[category].includes(issue)) {
      acc[category].push(issue);
    }
  });
  
  // カテゴリーがない場合は「その他」に
  if (labels.length === 0) {
    if (!acc['その他']) {
      acc['その他'] = [];
    }
    acc['その他'].push(issue);
  }
  
  return acc;
}, {});

// カテゴリーを取得
const categories = Object.keys(categorizedIssues);

// 最近の更新一覧を作成（最大5件）
const recentIssues = [...issues]
  .sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())
  .slice(0, 5);

// 現在の時刻
const now = new Date();
---

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{SITE_TITLE}</title>
  <meta name="description" content={SITE_DESCRIPTION}>
  <link rel="stylesheet" href={`${BASE_PATH}/styles/global.css`}>
</head>
<body>
  <header>
    <div class="container">
      <div class="header-content">
        <h1><a href={BASE_PATH + "/"}>Starlight Issue Wiki</a></h1>
        <nav>
          <a href={BASE_PATH + "/"} class="active">ホーム</a>
          <a href={`${BASE_PATH}/wiki/index`}>ページ一覧</a>
          <a href={`${BASE_PATH}/wiki/welcome`}>はじめに</a>
          <a href={`${BASE_PATH}/zettelkasten`} class="special-link">Zettelkasten版</a>
          <a href={REPO_URL}>GitHub</a>
        </nav>
      </div>
    </div>
  </header>

  <div class="hero">
    <div class="container">
      <h1>GitWiki Hub</h1>
      <p>GitHubのissueを動的に取得してWikiとして表示するモダンなWebアプリケーション</p>
      <div class="hero-buttons">
        <a href={`${BASE_PATH}/wiki/welcome`} class="hero-button primary">はじめてみる</a>
        <a href={REPO_URL} class="hero-button secondary">GitHub</a>
      </div>
    </div>
  </div>

  <main class="container">
    <div class="feature-section">
      <h2>主な機能</h2>
      <div class="feature-grid">
        <div class="feature-card">
          <h3>Markdownサポート</h3>
          <p>GitHubのMarkdown記法をそのまま利用可能。コード、表、リスト、画像など様々な形式のコンテンツを表現できます。</p>
        </div>
        <div class="feature-card">
          <h3>カテゴリ分類</h3>
          <p>GitHubのラベル機能を活用して、コンテンツをカテゴリ別に分類できます。</p>
        </div>
        <div class="feature-card">
          <h3>自動デプロイ</h3>
          <p>GitHubのissueに変更があると、自動的にサイトが更新されます。面倒なデプロイ手順は不要です。</p>
        </div>
        <div class="feature-card">
          <h3>レスポンシブデザイン</h3>
          <p>どのデバイスでも快適に閲覧できるレスポンシブなデザインを採用しています。</p>
        </div>
      </div>
    </div>

    <div class="content-section">
      <div class="timeline">
        <h2>最近の更新</h2>
        <ul class="timeline-list">
          {recentIssues.map(issue => {
            const updatedTimeAgo = formatDistance(new Date(issue.updated_at), now, { 
              addSuffix: true,
              locale: ja 
            });
            const slug = generateSlug(issue.title);
            
            return (
              <li class="timeline-item">
                <div class="timeline-meta">
                  <span class="timeline-date">{updatedTimeAgo}</span>
                </div>
                <div class="timeline-content">
                  <h3>
                    <a href={`${BASE_PATH}/wiki/${slug}`}>{issue.title}</a>
                  </h3>
                  <div class="timeline-labels">
                    {issue.labels?.map(label => (
                      <span class="timeline-label" style={`background-color: #${label.color}`}>
                        {label.name}
                      </span>
                    ))}
                  </div>
                </div>
              </li>
            );
          })}
        </ul>
        <div class="view-all">
          <a href={`${BASE_PATH}/wiki/index`}>すべてのページを見る &rarr;</a>
        </div>
      </div>

      <div class="categories">
        <h2>カテゴリ</h2>
        <div class="categories-grid">
          {categories.map(category => (
            <div class="category-card">
              <h3>{category}</h3>
              <p>{categorizedIssues[category].length} ページ</p>
              <ul class="category-list">
                {categorizedIssues[category].slice(0, 3).map(issue => {
                  const slug = generateSlug(issue.title);
                  return (
                    <li>
                      <a href={`${BASE_PATH}/wiki/${slug}`}>{issue.title}</a>
                    </li>
                  );
                })}
                {categorizedIssues[category].length > 3 && (
                  <li class="more-link">
                    <a href={`${BASE_PATH}/category/${category}`}>もっと見る...</a>
                  </li>
                )}
              </ul>
            </div>
          ))}
        </div>
      </div>
    </div>
  </main>

  <footer>
    <div class="container">
      <p>© 2025 Starlight Issue Wiki</p>
    </div>
  </footer>

  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      padding: 0;
      line-height: 1.6;
      color: #333;
      background-color: #f9f9f9;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }
    header {
      background-color: #4d1a9e;
      color: white;
      padding: 1rem 0;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    header h1 {
      margin: 0;
      font-size: 1.5rem;
    }
    header h1 a {
      color: white;
      text-decoration: none;
    }
    nav {
      display: flex;
      gap: 1.5rem;
    }
    nav a {
      color: white;
      text-decoration: none;
      opacity: 0.9;
      padding: 0.5rem;
      border-radius: 4px;
      transition: all 0.2s;
    }
    nav a:hover {
      opacity: 1;
      background-color: rgba(255, 255, 255, 0.1);
    }
    nav a.active {
      background-color: rgba(255, 255, 255, 0.2);
      font-weight: 500;
    }
    nav a.special-link {
      color: #ffeb3b;
      font-weight: 500;
    }
    .hero {
      background-color: #4d1a9e;
      color: white;
      padding: 4rem 0;
      text-align: center;
    }
    .hero h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
    }
    .hero p {
      font-size: 1.2rem;
      margin-bottom: 2rem;
      opacity: 0.9;
    }
    .hero-buttons {
      display: flex;
      gap: 1rem;
      justify-content: center;
    }
    .hero-button {
      padding: 0.8rem 1.5rem;
      border-radius: 4px;
      text-decoration: none;
      font-weight: 500;
      transition: all 0.3s;
    }
    .hero-button.primary {
      background-color: white;
      color: #4d1a9e;
    }
    .hero-button.primary:hover {
      background-color: #f0f0f0;
      transform: translateY(-2px);
    }
    .hero-button.secondary {
      background-color: rgba(255, 255, 255, 0.1);
      color: white;
      border: 1px solid rgba(255, 255, 255, 0.3);
    }
    .hero-button.secondary:hover {
      background-color: rgba(255, 255, 255, 0.2);
      transform: translateY(-2px);
    }
    main {
      padding: 3rem 0;
    }
    .feature-section {
      margin-bottom: 3rem;
    }
    .feature-section h2 {
      text-align: center;
      margin-bottom: 2rem;
      font-size: 2rem;
      color: #333;
    }
    .feature-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 2rem;
    }
    .feature-card {
      background-color: white;
      padding: 1.5rem;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
      transition: transform 0.3s, box-shadow 0.3s;
    }
    .feature-card:hover {
      transform: translateY(-5px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1);
    }
    .feature-card h3 {
      color: #4d1a9e;
      margin-top: 0;
      margin-bottom: 0.5rem;
    }
    .feature-card p {
      margin: 0;
      color: #666;
    }
    .content-section {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 2rem;
    }
    .timeline h2,
    .categories h2 {
      font-size: 1.5rem;
      margin-bottom: 1.5rem;
      color: #333;
    }
    .timeline-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .timeline-item {
      display: flex;
      margin-bottom: 1rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #eee;
    }
    .timeline-meta {
      width: 120px;
      flex-shrink: 0;
    }
    .timeline-date {
      font-size: 0.85rem;
      color: #888;
    }
    .timeline-content {
      flex-grow: 1;
    }
    .timeline-content h3 {
      margin: 0;
      font-size: 1.1rem;
    }
    .timeline-content h3 a {
      color: #4d1a9e;
      text-decoration: none;
    }
    .timeline-content h3 a:hover {
      text-decoration: underline;
    }
    .timeline-labels {
      display: flex;
      gap: 0.5rem;
      margin-top: 0.5rem;
    }
    .timeline-label {
      font-size: 0.7rem;
      padding: 0.2rem 0.5rem;
      border-radius: 20px;
      color: #333;
    }
    .view-all {
      margin-top: 1.5rem;
      text-align: right;
    }
    .view-all a {
      color: #4d1a9e;
      text-decoration: none;
      font-size: 0.9rem;
    }
    .view-all a:hover {
      text-decoration: underline;
    }
    .categories-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      gap: 1rem;
    }
    .category-card {
      background-color: white;
      padding: 1.2rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    .category-card h3 {
      margin-top: 0;
      margin-bottom: 0.5rem;
      color: #4d1a9e;
      font-size: 1.1rem;
    }
    .category-card p {
      margin-top: 0;
      margin-bottom: 1rem;
      color: #888;
      font-size: 0.9rem;
    }
    .category-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .category-list li {
      margin-bottom: 0.5rem;
    }
    .category-list a {
      color: #333;
      text-decoration: none;
      font-size: 0.9rem;
    }
    .category-list a:hover {
      color: #4d1a9e;
      text-decoration: underline;
    }
    .more-link {
      font-style: italic;
    }
    footer {
      background-color: #f5f5f5;
      padding: 2rem 0;
      text-align: center;
      margin-top: 3rem;
      color: #888;
    }
    
    /* レスポンシブデザイン */
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        gap: 1rem;
      }
      nav {
        width: 100%;
        justify-content: space-between;
        flex-wrap: wrap;
      }
      .content-section {
        grid-template-columns: 1fr;
      }
      .timeline-meta {
        width: 80px;
      }
      .hero h1 {
        font-size: 2rem;
      }
      .hero p {
        font-size: 1rem;
      }
    }
  </style>
</body>
</html>
