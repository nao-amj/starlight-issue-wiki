---
import { BASE_PATH, SITE_TITLE, SITE_DESCRIPTION, REPO_URL } from '../config';
import SearchBar from '../components/SearchBar.astro';
import TimelineView from '../components/TimelineView.astro';
import CustomFooter from '../components/CustomFooter.astro';
import { fetchIssues, groupIssuesByCategory, sortIssuesByDate } from '../lib/api.js';

// Issueデータを取得
const issues = await fetchIssues();

// カテゴリー別グループ化
const categories = groupIssuesByCategory(issues);

// カテゴリーをアルファベット順にソート
const sortedCategories = Object.keys(categories).sort();

// 最新の更新順にIssueをソート
const recentIssues = sortIssuesByDate(issues).slice(0, 5);

// フィーチャードコンテンツ用に最新コンテンツを取得
const featuredContent = sortIssuesByDate(issues).slice(0, 6);
---

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{SITE_TITLE}</title>
  <meta name="description" content={SITE_DESCRIPTION}>
  <link rel="stylesheet" href={`${BASE_PATH}/styles/global.css`}>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap" rel="stylesheet">
</head>
<body>
  <header>
    <div class="container">
      <div class="header-content">
        <h1><a href={BASE_PATH + "/"}>GitWiki Hub</a></h1>
        <nav>
          <a href={BASE_PATH + "/"} class="active">ホーム</a>
          <a href={`${BASE_PATH}/wiki/1`}>はじめに</a>
          <a href={`${BASE_PATH}/wiki`}>ページ一覧</a>
          <a href={REPO_URL} target="_blank">GitHub</a>
          <button id="theme-toggle" class="theme-toggle" aria-label="テーマ切り替え">🌙</button>
        </nav>
      </div>
    </div>
  </header>

  <div class="hero">
    <div class="container">
      <h1>{SITE_TITLE}</h1>
      <p>{SITE_DESCRIPTION}</p>
      <div class="actions">
        <a href={`${BASE_PATH}/wiki/1`} class="button primary">はじめに</a>
        <a href={REPO_URL + "/issues/new"} class="button accent" target="_blank">新規ページ作成</a>
      </div>
    </div>
  </div>

  <main class="container">
    <SearchBar />
    
    <div class="content-grid">
      <div class="main-content">
        <div class="alert alert-info">
          <strong>GitWiki Hub</strong> へようこそ！このサイトはGitHubのIssueをWikiページとして活用するプラットフォームです。
        </div>

        <h2>最近の更新</h2>
        <TimelineView issues={issues} limit={5} titleOnly={true} />

        <div class="issue-grid">
          {featuredContent.map(issue => (
            <a href={`${BASE_PATH}/wiki/${issue.number}`} class="issue-card">
              <h3>{issue.title}</h3>
              <div class="issue-meta">
                <span class="issue-number">#{issue.number}</span>
                <span class="issue-date">{new Date(issue.updated_at).toLocaleDateString('ja-JP')}</span>
              </div>
              <div class="issue-labels">
                {issue.labels && issue.labels.map(label => (
                  <span class="tag" style={`background-color: #${label.color}20; color: #${label.color}; border: 1px solid #${label.color}40;`}>
                    {label.name}
                  </span>
                ))}
              </div>
              <div class="issue-excerpt">
                {issue.body && issue.body.length > 100 ? `${issue.body.substring(0, 100)}...` : issue.body}
              </div>
            </a>
          ))}
        </div>

        <div class="text-center mt-4">
          <a href={`${BASE_PATH}/wiki`} class="button">すべてのページを見る</a>
        </div>
      </div>
      
      <div class="sidebar">
        <div class="card">
          <h2>カテゴリー</h2>
          
          {sortedCategories.map(category => (
            <div class="category">
              <h3>{category}</h3>
              <ul>
                {categories[category].map(issue => (
                  <li>
                    <a href={`${BASE_PATH}/wiki/${issue.number}`}>
                      {issue.title}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
        
        <div class="card">
          <h2>GitHub連携</h2>
          <div class="github-actions">
            <a href={REPO_URL + "/issues"} class="button secondary" style="width: 100%; margin-bottom: 0.5rem;" target="_blank">Issue一覧を見る</a>
            <a href={REPO_URL + "/issues/new"} class="button accent" style="width: 100%;" target="_blank">新規ページを作成</a>
          </div>
          
          <div class="mt-3">
            <h3>最近の更新</h3>
            <ul class="recent-updates">
              {recentIssues.map(issue => {
                // 日付をフォーマット
                const date = new Date(issue.updated_at);
                const formattedDate = new Intl.DateTimeFormat('ja-JP', {
                  year: 'numeric',
                  month: '2-digit',
                  day: '2-digit'
                }).format(date);
                
                return (
                  <li>
                    <a href={`${BASE_PATH}/wiki/${issue.number}`}>
                      <span class="title">{issue.title}</span>
                      <span class="date">{formattedDate}</span>
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>
        </div>
        
        <div class="card">
          <h2>クイックリンク</h2>
          <ul class="quick-links">
            <li><a href={`${BASE_PATH}/wiki`}>全ページ一覧</a></li>
            <li><a href={`${BASE_PATH}/wiki/1`}>使い方ガイド</a></li>
            <li><a href={REPO_URL} target="_blank">GitHubリポジトリ</a></li>
          </ul>
        </div>
      </div>
    </div>
  </main>

  <CustomFooter />

  <style>
    /* ページ特有のスタイル */
    .hero {
      background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark));
      color: white;
      padding: 3rem 0;
      text-align: center;
      margin-bottom: 2rem;
    }
    
    .hero h1 {
      margin: 0;
      font-size: 2.5rem;
    }
    
    .hero p {
      font-size: 1.2rem;
      opacity: 0.9;
      margin: 1rem 0 2rem;
    }
    
    .actions {
      display: flex;
      gap: 1rem;
      justify-content: center;
    }
    
    .content-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
      margin-top: 2rem;
    }
    
    .main-content {
      background-color: var(--color-background-panel);
      padding: 2rem;
      border-radius: var(--border-radius-md);
      box-shadow: var(--box-shadow-md);
      border: 1px solid var(--color-border);
    }
    
    .sidebar {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
    
    .category h3 {
      font-size: 1rem;
      color: var(--color-text-light);
      margin: 1.5rem 0 0.5rem;
      padding-bottom: 0.25rem;
      border-bottom: 1px solid var(--color-border);
    }
    
    .category:first-child h3 {
      margin-top: 0;
    }
    
    li a {
      display: block;
      padding: 0.5rem;
      text-decoration: none;
      color: var(--color-text);
      border-radius: var(--border-radius-sm);
      transition: background-color 0.2s, transform 0.2s;
    }
    
    li a:hover {
      background-color: rgba(37, 99, 235, 0.05);
      transform: translateX(3px);
    }
    
    .title {
      display: block;
    }
    
    .date {
      display: block;
      font-size: 0.8rem;
      color: var(--color-text-light);
    }

    /* Issue一覧のスタイル */
    .issue-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1.5rem;
      margin: 2rem 0;
    }

    .issue-card {
      display: flex;
      flex-direction: column;
      padding: 1.5rem;
      background-color: var(--color-background);
      border-radius: var(--border-radius-md);
      border: 1px solid var(--color-border);
      box-shadow: var(--box-shadow-sm);
      transition: all 0.2s;
      text-decoration: none;
      color: var(--color-text);
      height: 100%;
    }

    .issue-card:hover {
      transform: translateY(-3px);
      box-shadow: var(--box-shadow-md);
      text-decoration: none;
      border-color: var(--color-primary-light);
    }

    .issue-card h3 {
      margin-top: 0;
      margin-bottom: 0.75rem;
      font-size: 1.2rem;
      color: var(--color-primary);
    }

    .issue-meta {
      display: flex;
      justify-content: space-between;
      font-size: 0.85rem;
      color: var(--color-text-light);
      margin-bottom: 1rem;
    }

    .issue-labels {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .issue-excerpt {
      font-size: 0.9rem;
      color: var(--color-text-light);
      overflow: hidden;
      line-height: 1.5;
      flex-grow: 1;
      white-space: pre-line;
    }

    /* クイックリンク */
    .quick-links {
      list-style: none;
      padding: 0;
    }

    .quick-links li {
      border-bottom: 1px solid var(--color-border);
    }

    .quick-links li:last-child {
      border-bottom: none;
    }

    .quick-links a {
      padding: 0.75rem 0.5rem;
      display: flex;
      align-items: center;
    }

    .quick-links a:before {
      content: '→';
      margin-right: 0.5rem;
      color: var(--color-primary);
    }

    /* 最近の更新リスト */
    .recent-updates {
      list-style: none;
      padding: 0;
    }

    .recent-updates li {
      margin-bottom: 0.75rem;
    }

    .recent-updates li:last-child {
      margin-bottom: 0;
    }

    .recent-updates a {
      display: block;
      padding: 0.75rem;
      background-color: rgba(37, 99, 235, 0.03);
      border-left: 3px solid var(--color-primary-light);
      border-radius: 0 var(--border-radius-sm) var(--border-radius-sm) 0;
    }

    .recent-updates a:hover {
      background-color: rgba(37, 99, 235, 0.08);
      transform: translateX(3px);
    }
    
    /* テーマ切り替えボタン */
    .theme-toggle {
      background: none;
      border: none;
      color: white;
      font-size: 1.5rem;
      cursor: pointer;
      width: 2rem;
      height: 2rem;
      padding: 0;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 50%;
      transition: all 0.2s;
      background-color: rgba(255, 255, 255, 0.15);
    }
    
    .theme-toggle:hover {
      background-color: rgba(255, 255, 255, 0.3);
      transform: translateY(-2px);
    }
    
    /* レスポンシブデザイン */
    @media (max-width: 768px) {
      .content-grid {
        grid-template-columns: 1fr;
      }
      
      .sidebar {
        order: -1;
      }
      
      .actions {
        flex-direction: column;
        align-items: center;
      }
      
      .button {
        width: 100%;
        text-align: center;
      }
      
      .issue-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>

  <script>
    // ダークモード切り替え機能
    document.addEventListener('DOMContentLoaded', () => {
      const toggleButton = document.getElementById('theme-toggle');
      
      // ローカルストレージからユーザーの設定を取得
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      // テーマの初期設定
      let isDarkTheme = savedTheme === 'dark' || (!savedTheme && prefersDark);
      
      // 初期状態を設定
      document.documentElement.classList.toggle('dark-theme', isDarkTheme);
      updateThemeToggleIcon(isDarkTheme);
      
      // テーマ切り替えボタンのクリックイベント
      toggleButton.addEventListener('click', () => {
        isDarkTheme = !isDarkTheme;
        document.documentElement.classList.toggle('dark-theme', isDarkTheme);
        localStorage.setItem('theme', isDarkTheme ? 'dark' : 'light');
        updateThemeToggleIcon(isDarkTheme);
      });
      
      // アイコン更新関数
      function updateThemeToggleIcon(isDark) {
        toggleButton.textContent = isDark ? '☀️' : '🌙';
        toggleButton.setAttribute('aria-label', isDark ? 'ライトモードに切り替え' : 'ダークモードに切り替え');
      }
    });
  </script>
</body>
</html>
