---
import { getIssues, generateSlug } from '../lib/github';
import { BASE_PATH, SITE_TITLE, SITE_DESCRIPTION, REPO_URL } from '../config';
import { formatDistance } from 'date-fns';
import { ja } from 'date-fns/locale';
import SearchBar from '../components/SearchBar.astro';
import SettingsPanel from '../components/SettingsPanel.astro';

// issueのデータを取得
const issues = await getIssues();

// プルリクエストを除外
const filteredIssues = issues.filter(issue => !issue.pull_request);

// カテゴリーごとのissue一覧を作成
const categorizedIssues = filteredIssues.reduce((acc, issue) => {
  // ラベルでカテゴリわけ
  const labels = issue.labels || [];
  
  labels.forEach(label => {
    const category = label.name;
    if (!acc[category]) {
      acc[category] = [];
    }
    if (!acc[category].includes(issue)) {
      acc[category].push(issue);
    }
  });
  
  // カテゴリーがない場合は「その他」に
  if (labels.length === 0) {
    if (!acc['その他']) {
      acc['その他'] = [];
    }
    acc['その他'].push(issue);
  }
  
  return acc;
}, {});

// カテゴリーを取得
const categories = Object.keys(categorizedIssues);

// 最近の更新一覧を作成（最大5件）
const recentIssues = [...filteredIssues]
  .sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())
  .slice(0, 5);

// 現在の時刻
const now = new Date();

// 人気のあるコンテンツ（ラベルの数が多いもの上位5件）
const popularContent = [...filteredIssues]
  .sort((a, b) => (b.labels?.length || 0) - (a.labels?.length || 0))
  .slice(0, 5);
---

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{SITE_TITLE}</title>
  <meta name="description" content={SITE_DESCRIPTION}>
  <link rel="stylesheet" href={`${BASE_PATH}/styles/global.css`}>
  <link rel="stylesheet" href={`${BASE_PATH}/styles/zettelkasten.css`}>
</head>
<body>
  <header>
    <div class="container">
      <div class="header-content">
        <h1><a href={BASE_PATH + "/"} class="title-link">GitWiki Hub</a></h1>
        <div class="nav-container">
          <nav>
            <a href={BASE_PATH + "/"} class="active">ホーム</a>
            <a href={`${BASE_PATH}/wiki/index`}>ページ一覧</a>
            <a href={`${BASE_PATH}/wiki/welcome`}>はじめに</a>
            <a href={REPO_URL}>GitHub</a>
          </nav>
          <button id="settings-toggle-btn" class="settings-toggle-btn">設定</button>
        </div>
      </div>
    </div>
  </header>

  <div class="hero">
    <div class="container">
      <h1>GitWiki Hub</h1>
      <p>GitHubのissueを動的に取得してWikiとして表示するモダンなWebアプリケーション</p>
      <div class="search-wrapper">
        <SearchBar />
      </div>
      <div class="hero-buttons">
        <a href={`${BASE_PATH}/wiki/welcome`} class="hero-button primary">はじめてみる</a>
        <a href={REPO_URL} class="hero-button secondary">GitHub</a>
      </div>
    </div>
  </div>

  <main class="container">
    <div class="dashboard-layout">
      <div class="timeline-section">
        <h2>最近の更新</h2>
        <ul class="timeline-list">
          {recentIssues.map(issue => {
            const updatedTimeAgo = formatDistance(new Date(issue.updated_at), now, { 
              addSuffix: true,
              locale: ja 
            });
            const slug = generateSlug(issue.title);
            
            return (
              <li class="timeline-item">
                <div class="timeline-meta">
                  <span class="timeline-date">{updatedTimeAgo}</span>
                </div>
                <div class="timeline-content">
                  <h3>
                    <a href={`${BASE_PATH}/wiki/${issue.number}`}>{issue.title}</a>
                  </h3>
                  <div class="timeline-labels">
                    {issue.labels?.map(label => (
                      <a href={`${BASE_PATH}/category/${encodeURIComponent(label.name)}`} 
                         class="timeline-label" 
                         style={`background-color: #${label.color}`}>
                        {label.name}
                      </a>
                    ))}
                  </div>
                </div>
              </li>
            );
          })}
        </ul>
        <div class="view-all">
          <a href={`${BASE_PATH}/wiki/index`}>すべてのページを見る &rarr;</a>
        </div>
      </div>

      <div class="sidebar-section">
        <div class="categories-widget">
          <h2>カテゴリー</h2>
          <ul class="categories-list">
            {categories.map(category => (
              <li class="category-item">
                <a href={`${BASE_PATH}/category/${encodeURIComponent(category)}`}>
                  {category}
                  <span class="category-count">{categorizedIssues[category].length}</span>
                </a>
              </li>
            ))}
          </ul>
        </div>

        <div class="popular-content">
          <h2>人気のコンテンツ</h2>
          <ul class="popular-list">
            {popularContent.map(issue => {
              const slug = generateSlug(issue.title);
              return (
                <li class="popular-item">
                  <a href={`${BASE_PATH}/wiki/${issue.number}`}>{issue.title}</a>
                  <div class="popular-labels">
                    {issue.labels?.slice(0, 3).map(label => (
                      <a href={`${BASE_PATH}/category/${encodeURIComponent(label.name)}`}
                         class="popular-label" 
                         style={`background-color: #${label.color}`}>
                        {label.name}
                      </a>
                    ))}
                  </div>
                </li>
              );
            })}
          </ul>
        </div>
      </div>
    </div>

    <div class="quick-actions">
      <h2>クイックアクセス</h2>
      <div class="action-buttons">
        <a href={`${BASE_PATH}/wiki/welcome`} class="action-button">
          <span class="action-icon">📚</span>
          <span class="action-text">はじめてみる</span>
        </a>
        <a href={`${BASE_PATH}/wiki/index`} class="action-button">
          <span class="action-icon">📋</span>
          <span class="action-text">ページ一覧</span>
        </a>
        <a href={REPO_URL + "/issues/new"} class="action-button">
          <span class="action-icon">✏️</span>
          <span class="action-text">新規ページ作成</span>
        </a>
        <a id="zettelkasten-settings-btn" class="action-button">
          <span class="action-icon">🧠</span>
          <span class="action-text">Zettelkasten設定</span>
        </a>
      </div>
    </div>
  </main>

  <footer>
    <div class="container">
      <p>© 2025 Starlight Issue Wiki</p>
    </div>
  </footer>

  <!-- Zettelkastenインディケーター -->
  <div class="zettelkasten-indicator" title="Zettelkastenモード有効" id="zettelkasten-indicator">Z</div>

  <!-- 設定パネル -->
  <SettingsPanel />

  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      padding: 0;
      line-height: 1.6;
      color: #333;
      background-color: #f9f9f9;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }
    header {
      background-color: #4d1a9e;
      color: white;
      padding: 1rem 0;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .nav-container {
      display: flex;
      align-items: center;
      gap: 1rem;
    }
    header h1 {
      margin: 0;
      font-size: 1.5rem;
    }
    header h1 a {
      color: white !important;
      text-decoration: none;
    }
    nav {
      display: flex;
      gap: 1.5rem;
    }
    nav a {
      color: white;
      text-decoration: none;
      opacity: 0.9;
      padding: 0.5rem;
      border-radius: 4px;
      transition: all 0.2s;
    }
    nav a:hover {
      opacity: 1;
      background-color: rgba(255, 255, 255, 0.1);
    }
    nav a.active {
      background-color: rgba(255, 255, 255, 0.2);
      font-weight: 500;
    }
    nav a.special-link {
      color: #ffeb3b;
      font-weight: 500;
    }
    .hero {
      background-color: #4d1a9e;
      color: white;
      padding: 4rem 0;
      text-align: center;
    }
    .hero h1 {
      font-size: 3rem;
      margin-bottom: 1rem;
      color: white;
    }
    .hero p {
      font-size: 1.2rem;
      margin-bottom: 2rem;
      opacity: 0.9;
    }
    .search-wrapper {
      max-width: 600px;
      margin: 0 auto 2rem;
    }
    
    .hero-buttons {
      display: flex;
      gap: 1rem;
      justify-content: center;
    }
    .hero-button {
      padding: 0.8rem 1.5rem;
      border-radius: 4px;
      text-decoration: none;
      font-weight: 500;
      transition: all 0.3s;
    }
    .hero-button.primary {
      background-color: white;
      color: #4d1a9e;
    }
    .hero-button.primary:hover {
      background-color: #f0f0f0;
      transform: translateY(-2px);
    }
    .hero-button.secondary {
      background-color: rgba(255, 255, 255, 0.1);
      color: white;
      border: 1px solid rgba(255, 255, 255, 0.3);
    }
    .hero-button.secondary:hover {
      background-color: rgba(255, 255, 255, 0.2);
      transform: translateY(-2px);
    }
    main {
      padding: 3rem 0;
    }

    .dashboard-layout {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
      margin-bottom: 3rem;
    }
    
    .timeline-section h2,
    .sidebar-section h2,
    .quick-actions h2 {
      font-size: 1.5rem;
      margin-bottom: 1.5rem;
      color: #333;
      padding-bottom: 0.5rem;
      border-bottom: 2px solid #eee;
    }
    
    .timeline-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    .timeline-item {
      display: flex;
      margin-bottom: 1rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #eee;
    }
    .timeline-meta {
      width: 120px;
      flex-shrink: 0;
    }
    .timeline-date {
      font-size: 0.85rem;
      color: #888;
    }
    .timeline-content {
      flex-grow: 1;
    }
    .timeline-content h3 {
      margin: 0;
      font-size: 1.1rem;
    }
    .timeline-content h3 a {
      color: #4d1a9e;
      text-decoration: none;
    }
    .timeline-content h3 a:hover {
      text-decoration: underline;
    }
    .timeline-labels {
      display: flex;
      gap: 0.5rem;
      margin-top: 0.5rem;
      flex-wrap: wrap;
    }
    .timeline-label {
      font-size: 0.7rem;
      padding: 0.2rem 0.5rem;
      border-radius: 20px;
      color: #fff;
      text-decoration: none;
    }
    
    .view-all {
      margin-top: 1.5rem;
      text-align: right;
    }
    .view-all a {
      color: #4d1a9e;
      text-decoration: none;
      font-size: 0.9rem;
    }
    .view-all a:hover {
      text-decoration: underline;
    }
    
    .popular-content,
    .categories-widget {
      background-color: white;
      padding: 1.5rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      margin-bottom: 2rem;
    }
    
    .popular-list,
    .categories-list {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    
    .popular-item {
      margin-bottom: 1rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid #eee;
    }
    
    .popular-item:last-child {
      margin-bottom: 0;
      padding-bottom: 0;
      border-bottom: none;
    }
    
    .popular-item a {
      color: #4d1a9e;
      text-decoration: none;
      font-weight: 500;
      display: block;
      margin-bottom: 0.3rem;
    }
    
    .popular-item a:hover {
      text-decoration: underline;
    }
    
    .popular-labels {
      display: flex;
      gap: 0.3rem;
      flex-wrap: wrap;
    }
    
    .popular-label {
      font-size: 0.65rem;
      padding: 0.1rem 0.4rem;
      border-radius: 20px;
      color: #fff;
      text-decoration: none;
    }
    
    .category-item {
      margin-bottom: 0.5rem;
    }
    
    .category-item a {
      display: flex;
      justify-content: space-between;
      padding: 0.5rem;
      text-decoration: none;
      color: #333;
      border-radius: 4px;
      transition: background-color 0.2s;
    }
    
    .category-item a:hover {
      background-color: #f5f5f5;
      color: #4d1a9e;
    }
    
    .category-count {
      background-color: #eee;
      padding: 0.1rem 0.5rem;
      border-radius: 20px;
      font-size: 0.8rem;
      color: #666;
    }
    
    .quick-actions {
      margin-top: 2rem;
    }
    
    .action-buttons {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1rem;
    }
    
    .action-button {
      display: flex;
      flex-direction: column;
      align-items: center;
      background-color: white;
      padding: 1.5rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
      transition: all 0.3s;
      text-decoration: none;
      color: #333;
      cursor: pointer;
    }
    
    .action-button:hover {
      transform: translateY(-5px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
    }
    
    .action-icon {
      font-size: 2rem;
      margin-bottom: 0.5rem;
    }
    
    .action-text {
      font-weight: 500;
    }
    
    footer {
      background-color: #f5f5f5;
      padding: 2rem 0;
      text-align: center;
      margin-top: 3rem;
      color: #888;
    }
    
    /* 検索結果のスタイル修正 */
    .search-wrapper :global(.search-results) {
      text-align: left;
    }
    
    /* 設定ボタンのスタイル */
    .settings-toggle-btn {
      background-color: #4f6df5;
      color: white;
      padding: 0.5rem 1rem;
      border: none;
      border-radius: 0.375rem;
      font-weight: 500;
      cursor: pointer;
      transition: all 0.2s;
      white-space: nowrap;
    }

    .settings-toggle-btn:hover {
      background-color: #3a5ad9;
      transform: translateY(-1px);
    }
    
    /* レスポンシブデザイン */
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        align-items: flex-start;
        gap: 1rem;
      }
      .nav-container {
        width: 100%;
        display: flex;
        justify-content: space-between;
      }
      nav {
        display: flex;
        gap: 1rem;
        flex-wrap: nowrap;
        overflow-x: auto;
        max-width: calc(100% - 80px);
        padding-bottom: 0.5rem;
      }
      nav a {
        white-space: nowrap;
      }
      .dashboard-layout {
        grid-template-columns: 1fr;
      }
      .timeline-meta {
        width: 80px;
      }
      .hero h1 {
        font-size: 2rem;
      }
      .hero p {
        font-size: 1rem;
      }
      .action-buttons {
        grid-template-columns: repeat(auto-fill, minmax(100%, 1fr));
      }
    }
    
    @media (max-width: 480px) {
      .action-buttons {
        grid-template-columns: 1fr;
      }
    }
  </style>

  <script is:inline>
    document.addEventListener('DOMContentLoaded', function() {
      // 設定ボタンのイベントリスナー
      const settingsBtn = document.getElementById('settings-toggle-btn');
      const zettelkastenSettingsBtn = document.getElementById('zettelkasten-settings-btn');
      
      if (settingsBtn) {
        settingsBtn.addEventListener('click', openSettingsPanel);
      }
      
      if (zettelkastenSettingsBtn) {
        zettelkastenSettingsBtn.addEventListener('click', openSettingsPanel);
      }
      
      function openSettingsPanel() {
        const settingsPanel = document.getElementById('settings-panel');
        if (settingsPanel) {
          settingsPanel.style.display = 'block';
          window.dispatchEvent(new CustomEvent('settings-panel-open'));
        }
      }
      
      // Zettelkastenモードの設定を読み込み、適用する
      try {
        // ローカルストレージから設定を読み込み
        const savedConfig = localStorage.getItem('zettelkastenConfig');
        if (savedConfig) {
          const config = JSON.parse(savedConfig);
          
          // Zettelkastenモードが有効ならbodyにクラスを追加
          if (config.enabled) {
            document.body.classList.add('zettelkasten-mode');
          } else {
            document.body.classList.remove('zettelkasten-mode');
          }
        }
        
        // Zettelkastenインディケーターのクリックイベント
        const indicator = document.getElementById('zettelkasten-indicator');
        if (indicator) {
          indicator.addEventListener('click', openSettingsPanel);
        }
      } catch (error) {
        console.error('Zettelkasten設定の読み込みに失敗しました:', error);
      }
    });
  </script>
</body>
</html>
