---
import { BASE_PATH, SITE_TITLE, SITE_DESCRIPTION, REPO_URL } from '../config';

// Issueデータを取得
async function fetchIssues() {
  try {
    // GitHub APIを使用してissueを取得
    const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues');
    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error('Error fetching issues:', error);
    return [];
  }
}

const issues = await fetchIssues();

// カテゴリー別グループ化
const categories = {};
issues.forEach(issue => {
  if (issue.labels && issue.labels.length > 0) {
    issue.labels.forEach(label => {
      if (!categories[label.name]) {
        categories[label.name] = [];
      }
      // 重複を避けるために既に追加されていないか確認
      if (!categories[label.name].some(existingIssue => existingIssue.number === issue.number)) {
        categories[label.name].push(issue);
      }
    });
  } else {
    if (!categories['未分類']) {
      categories['未分類'] = [];
    }
    if (!categories['未分類'].some(existingIssue => existingIssue.number === issue.number)) {
      categories['未分類'].push(issue);
    }
  }
});

// カテゴリーをアルファベット順にソート
const sortedCategories = Object.keys(categories).sort();

// 最新の更新順にIssueをソート
const recentIssues = [...issues].sort((a, b) => 
  new Date(b.updated_at) - new Date(a.updated_at)
).slice(0, 5);

// スラッグを生成する関数
function generateSlug(title) {
  if (!title) return '';
  return title
    .toLowerCase()
    .replace(/[\s.,\/#!$%\^&\*;:{}=\-_`~()]/g, '-')
    .replace(/--+/g, '-')
    .replace(/^-+|-+$/g, '');
}
---

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{SITE_TITLE}</title>
  <meta name="description" content={SITE_DESCRIPTION}>
  <link rel="stylesheet" href={`${BASE_PATH}/styles/global.css`}>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap" rel="stylesheet">
</head>
<body>
  <header>
    <div class="container">
      <div class="header-content">
        <h1><a href={BASE_PATH + "/"}>Starlight Issue Wiki</a></h1>
        <nav>
          <a href={BASE_PATH + "/"} class="active">ホーム</a>
          <a href={`${BASE_PATH}/wiki/1`}>はじめに</a>
          <a href={REPO_URL}>GitHub</a>
        </nav>
      </div>
    </div>
  </header>

  <div class="hero">
    <div class="container">
      <h1>{SITE_TITLE}</h1>
      <p>GitHubのissueを使って管理するWikiサイト</p>
      <div class="actions">
        <a href={`${BASE_PATH}/wiki/1`} class="button primary">はじめに</a>
        <a href={REPO_URL + "/issues"} class="button">GitHub Issues</a>
      </div>
    </div>
  </div>

  <main class="container">
    <div class="content-grid">
      <div class="main-content">
        <h2>Starlight Issue Wikiについて</h2>
        <p>
          このサイトは、GitHubのIssueをWikiページとして表示するサンプルアプリケーションです。
          Astroフレームワークを使用して構築されており、シンプルで高速なWikiサイトを実現しています。
        </p>
        
        <h3>特徴</h3>
        <ul>
          <li>GitHubのIssueがそのままWikiページになります</li>
          <li>Markdownで簡単に編集できます</li>
          <li>ラベルでカテゴリ分けができます</li>
          <li>レスポンシブデザインで様々なデバイスに対応</li>
        </ul>
        
        <h3>使い方</h3>
        <ol>
          <li>GitHubでIssueを作成する</li>
          <li>ラベルでカテゴリを設定する</li>
          <li>自動的にWikiに反映される</li>
        </ol>
        
        <p>
          詳しくは<a href={`${BASE_PATH}/wiki/1`}>はじめに</a>をご覧ください。
        </p>

        <h3>Issue一覧</h3>
        <div class="issue-list">
          {issues.length > 0 ? (
            <ul>
              {issues.map(issue => (
                <li class="issue-item">
                  <a href={`${BASE_PATH}/wiki/${issue.number}`} class="issue-link">
                    <span class="issue-number">#{issue.number}</span>
                    <span class="issue-title">{issue.title}</span>
                  </a>
                  <div class="issue-labels">
                    {issue.labels && issue.labels.map(label => (
                      <a href={`${BASE_PATH}/category/${label.name.toLowerCase()}`} class="tag" 
                         style={`background-color: #${label.color}20; color: #${label.color}; border: 1px solid #${label.color}40;`}>
                        {label.name}
                      </a>
                    ))}
                  </div>
                  <div class="issue-date">
                    更新: {new Date(issue.updated_at).toLocaleDateString('ja-JP')}
                  </div>
                </li>
              ))}
            </ul>
          ) : (
            <p>Issueがありません。GitHubでIssueを作成してください。</p>
          )}
        </div>
      </div>
      
      <div class="sidebar">
        <div class="card">
          <h2>カテゴリー</h2>
          
          {sortedCategories.map(category => (
            <div class="category">
              <h3>{category}</h3>
              <ul>
                {categories[category].map(issue => (
                  <li>
                    <a href={`${BASE_PATH}/wiki/${issue.number}`}>
                      {issue.title}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
        
        <div class="card">
          <h2>最近の更新</h2>
          <ul>
            {recentIssues.map(issue => {
              // 日付をフォーマット
              const date = new Date(issue.updated_at);
              const formattedDate = new Intl.DateTimeFormat('ja-JP', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit'
              }).format(date);
              
              return (
                <li>
                  <a href={`${BASE_PATH}/wiki/${issue.number}`}>
                    <span class="title">{issue.title}</span>
                    <span class="date">{formattedDate}</span>
                  </a>
                </li>
              );
            })}
          </ul>
        </div>
      </div>
    </div>
  </main>

  <footer>
    <div class="container">
      <p>&copy; 2025 Starlight Issue Wiki</p>
    </div>
  </footer>

  <style>
    /* ページ特有のスタイル */
    .hero {
      background-color: var(--color-primary);
      color: white;
      padding: 3rem 0;
      text-align: center;
    }
    
    .hero h1 {
      margin: 0;
      font-size: 2.5rem;
    }
    
    .hero p {
      font-size: 1.2rem;
      opacity: 0.9;
      margin: 1rem 0 2rem;
    }
    
    .actions {
      display: flex;
      gap: 1rem;
      justify-content: center;
    }
    
    .button {
      display: inline-block;
      padding: 0.5rem 1.5rem;
      border-radius: 4px;
      background-color: rgba(255, 255, 255, 0.1);
      color: white;
      text-decoration: none;
      font-weight: bold;
      transition: all 0.2s;
    }
    
    .button.primary {
      background-color: white;
      color: var(--color-primary);
    }
    
    .button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    
    .content-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
      margin-top: 2rem;
    }
    
    .main-content {
      background-color: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }
    
    .sidebar {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
    
    .card {
      background-color: white;
      padding: 1.5rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    
    .category h3 {
      font-size: 1rem;
      color: #666;
      margin: 1.5rem 0 0.5rem;
    }
    
    .category:first-child h3 {
      margin-top: 0;
    }
    
    li a {
      display: block;
      padding: 0.5rem;
      text-decoration: none;
      color: #333;
      border-radius: 4px;
      transition: background-color 0.2s;
    }
    
    li a:hover {
      background-color: #f5f5f5;
    }
    
    .title {
      display: block;
    }
    
    .date {
      display: block;
      font-size: 0.8rem;
      color: #666;
    }

    /* Issue一覧のスタイル */
    .issue-list ul {
      list-style: none;
      padding: 0;
    }

    .issue-item {
      border-bottom: 1px solid #eee;
      padding: 1rem 0;
    }

    .issue-item:last-child {
      border-bottom: none;
    }

    .issue-link {
      display: flex;
      align-items: baseline;
      text-decoration: none;
      margin-bottom: 0.5rem;
      font-weight: 500;
      color: var(--color-primary);
    }

    .issue-number {
      color: #666;
      font-size: 0.9rem;
      margin-right: 0.5rem;
    }

    .issue-title {
      font-size: 1.1rem;
    }

    .issue-labels {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin: 0.5rem 0;
    }

    .tag {
      display: inline-block;
      padding: 0.2em 0.5em;
      border-radius: 0.25rem;
      font-size: 0.8rem;
      font-weight: 500;
      text-decoration: none;
      line-height: 1.2;
      white-space: nowrap;
    }

    .issue-date {
      font-size: 0.8rem;
      color: #666;
    }
    
    /* レスポンシブデザイン */
    @media (max-width: 768px) {
      .content-grid {
        grid-template-columns: 1fr;
      }
      
      .sidebar {
        order: -1;
      }
      
      .actions {
        flex-direction: column;
        align-items: center;
      }
      
      .button {
        width: 100%;
        text-align: center;
      }
    }
  </style>
</body>
</html>
