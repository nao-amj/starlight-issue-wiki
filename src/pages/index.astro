---
import { getIssues } from '../lib/github';
import { marked } from 'marked';
import { gfmHeadingId } from 'marked-gfm-heading-id';

// GitHubからissueを取得
const issues = await getIssues();
const welcomeIssue = issues.find(issue => issue.number === 1) || issues[0];

// markedのセットアップ
marked.use(gfmHeadingId());

// issueの内容をHTMLに変換
const content = welcomeIssue ? marked.parse(welcomeIssue.body || '') : '';

const title = welcomeIssue?.title || 'Starlight Issue Wiki';
const description = 'GitHubのissueを使ったWikiサイト';

// サイトのベースパスを設定
const basePath = '/starlight-issue-wiki';

// issueをカテゴリー別にグループ化
const categories = {};
issues.forEach(issue => {
  if (issue.labels && issue.labels.length > 0) {
    issue.labels.forEach(label => {
      if (!categories[label.name]) {
        categories[label.name] = [];
      }
      categories[label.name].push(issue);
    });
  } else {
    if (!categories['未分類']) {
      categories['未分類'] = [];
    }
    categories['未分類'].push(issue);
  }
});
---

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{title}</title>
  <meta name="description" content={description}>
  <link rel="stylesheet" href={`${basePath}/styles/global.css`}>
</head>
<body>
  <header>
    <div class="container">
      <div class="header-content">
        <h1><a href={basePath + "/"}>Starlight Issue Wiki</a></h1>
        <nav>
          <a href={basePath + "/"} class="active">ホーム</a>
          <a href={`${basePath}/wiki`}>ページ一覧</a>
          <a href={`${basePath}/wiki/welcome`}>はじめに</a>
          <a href="https://github.com/nao-amj/starlight-issue-wiki">GitHub</a>
        </nav>
      </div>
    </div>
  </header>

  <div class="hero">
    <div class="container">
      <h1>{title}</h1>
      <p>GitHubのissueを使って管理するWikiサイト</p>
      <div class="actions">
        <a href={`${basePath}/wiki/welcome`} class="button primary">はじめに</a>
        <a href={`${basePath}/wiki`} class="button">ページ一覧</a>
        <a href="https://github.com/nao-amj/starlight-issue-wiki/issues" class="button">GitHub Issues</a>
      </div>
    </div>
  </div>

  <main class="container">
    <div class="content-grid">
      <div class="main-content">
        <div class="wiki-content" set:html={content}></div>
      </div>
      
      <div class="sidebar">
        <div class="card">
          <h2>Wiki Pages</h2>
          
          {Object.keys(categories).map(category => (
            <div class="category">
              <h3>{category}</h3>
              <ul>
                {categories[category].map(issue => {
                  // スラッグを生成
                  const slug = issue.title.toLowerCase()
                    .replace(/[^\w\s-]/g, '')
                    .replace(/\s+/g, '-')
                    .replace(/^-+|-+$/g, '');
                  
                  return (
                    <li>
                      <a href={`${basePath}/wiki/${slug}`}>
                        {issue.title}
                      </a>
                    </li>
                  );
                })}
              </ul>
            </div>
          ))}
        </div>
        
        <div class="card">
          <h2>最近の更新</h2>
          <ul>
            {issues.slice(0, 5).map(issue => {
              // スラッグを生成
              const slug = issue.title.toLowerCase()
                .replace(/[^\w\s-]/g, '')
                .replace(/\s+/g, '-')
                .replace(/^-+|-+$/g, '');
              
              // 日付をフォーマット
              const date = new Date(issue.updated_at);
              const formattedDate = new Intl.DateTimeFormat('ja-JP', {
                year: 'numeric',
                month: '2-digit',
                day: '2-digit'
              }).format(date);
              
              return (
                <li>
                  <a href={`${basePath}/wiki/${slug}`}>
                    <span class="title">{issue.title}</span>
                    <span class="date">{formattedDate}</span>
                  </a>
                </li>
              );
            })}
          </ul>
        </div>
      </div>
    </div>
  </main>

  <footer>
    <div class="container">
      <p>© 2025 Starlight Issue Wiki</p>
    </div>
  </footer>

  <style>
    body {
      font-family: system-ui, sans-serif;
      margin: 0;
      padding: 0;
      line-height: 1.6;
      color: #333;
      background-color: #f9f9f9;
    }
    .container {
      max-width: 1200px;
      margin: 0 auto;
      padding: 0 1rem;
    }
    header {
      background-color: #4d1a9e;
      color: white;
      padding: 1rem 0;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }
    .header-content {
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    header h1 {
      margin: 0;
      font-size: 1.5rem;
    }
    header h1 a {
      color: white;
      text-decoration: none;
    }
    nav {
      display: flex;
      gap: 1.5rem;
    }
    nav a {
      color: white;
      text-decoration: none;
      opacity: 0.9;
      padding: 0.5rem;
      border-radius: 4px;
      transition: all 0.2s;
    }
    nav a:hover {
      opacity: 1;
      background-color: rgba(255, 255, 255, 0.1);
    }
    nav a.active {
      background-color: rgba(255, 255, 255, 0.2);
      font-weight: 500;
    }
    .hero {
      background-color: #4d1a9e;
      color: white;
      padding: 3rem 0;
      text-align: center;
    }
    .hero h1 {
      margin: 0;
      font-size: 2.5rem;
    }
    .hero p {
      font-size: 1.2rem;
      opacity: 0.9;
      margin: 1rem 0 2rem;
    }
    .actions {
      display: flex;
      gap: 1rem;
      justify-content: center;
    }
    .button {
      display: inline-block;
      padding: 0.5rem 1.5rem;
      border-radius: 4px;
      background-color: rgba(255, 255, 255, 0.1);
      color: white;
      text-decoration: none;
      font-weight: bold;
      transition: all 0.2s;
    }
    .button.primary {
      background-color: white;
      color: #4d1a9e;
    }
    .button:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
    main {
      padding: 3rem 0;
    }
    .content-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
    }
    .main-content {
      background-color: white;
      padding: 2rem;
      border-radius: 8px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05);
    }
    .wiki-content {
      max-width: 100%;
    }
    .wiki-content :global(h1) {
      margin-top: 0;
    }
    .wiki-content :global(pre) {
      padding: 1rem;
      border-radius: 0.5rem;
      background-color: #f3f3f3;
      overflow-x: auto;
    }
    .wiki-content :global(img) {
      max-width: 100%;
      height: auto;
    }
    .sidebar {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
    .card {
      background-color: white;
      padding: 1.5rem;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
    }
    .card h2 {
      margin-top: 0;
      font-size: 1.2rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid #eee;
    }
    .category h3 {
      font-size: 1rem;
      color: #666;
      margin: 1.5rem 0 0.5rem;
    }
    .category:first-child h3 {
      margin-top: 0;
    }
    ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }
    li {
      margin-bottom: 0.5rem;
    }
    li a {
      display: block;
      padding: 0.5rem;
      text-decoration: none;
      color: #333;
      border-radius: 4px;
      transition: background-color 0.2s;
    }
    li a:hover {
      background-color: #f5f5f5;
    }
    .title {
      display: block;
    }
    .date {
      display: block;
      font-size: 0.8rem;
      color: #666;
    }
    footer {
      border-top: 1px solid #eee;
      padding: 2rem 0;
      text-align: center;
      color: #666;
    }
    
    /* レスポンシブデザイン */
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        gap: 1rem;
      }
      nav {
        width: 100%;
        justify-content: space-between;
      }
      .content-grid {
        grid-template-columns: 1fr;
      }
      .sidebar {
        order: -1;
      }
      .actions {
        flex-direction: column;
        align-items: center;
      }
      .button {
        width: 100%;
        text-align: center;
      }
    }
  </style>
</body>
</html>