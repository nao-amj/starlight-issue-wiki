---
import { BASE_PATH, SITE_TITLE, SITE_DESCRIPTION, REPO_URL } from '../config';
import SearchBar from '../components/SearchBar.astro';
import TimelineView from '../components/TimelineView.astro';
import CustomFooter from '../components/CustomFooter.astro';

// Issueデータを取得
async function fetchIssues() {
  try {
    // GitHub APIを使用してissueを取得
    const response = await fetch('https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues?state=all&per_page=100');
    if (!response.ok) {
      throw new Error(`GitHub API error: ${response.status}`);
    }
    return await response.json();
  } catch (error) {
    console.error('Error fetching issues:', error);
    return [];
  }
}

const issues = await fetchIssues();

// カテゴリー別グループ化
const categories = {};
issues.forEach(issue => {
  if (issue.labels && issue.labels.length > 0) {
    issue.labels.forEach(label => {
      if (!categories[label.name]) {
        categories[label.name] = [];
      }
      // 重複を避けるために既に追加されていないか確認
      if (!categories[label.name].some(existingIssue => existingIssue.number === issue.number)) {
        categories[label.name].push(issue);
      }
    });
  } else {
    if (!categories['未分類']) {
      categories['未分類'] = [];
    }
    if (!categories['未分類'].some(existingIssue => existingIssue.number === issue.number)) {
      categories['未分類'].push(issue);
    }
  }
});

// カテゴリーをアルファベット順にソート
const sortedCategories = Object.keys(categories).sort();

// 最新の更新順にIssueをソート
const recentIssues = [...issues].sort((a, b) => 
  new Date(b.updated_at) - new Date(a.updated_at)
).slice(0, 5);

// スラッグを生成する関数
function generateSlug(title) {
  if (!title) return '';
  return title
    .toLowerCase()
    .replace(/[\s.,\/#!$%\^&\*;:{}=\-_`~()]/g, '-')
    .replace(/--+/g, '-')
    .replace(/^-+|-+$/g, '');
}
---

<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{SITE_TITLE}</title>
  <meta name="description" content={SITE_DESCRIPTION}>
  <link rel="stylesheet" href={`${BASE_PATH}/styles/global.css`}>
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap" rel="stylesheet">
</head>
<body>
  <header>
    <div class="container">
      <div class="header-content">
        <h1><a href={BASE_PATH + "/"}>GitWiki Hub</a></h1>
        <nav>
          <a href={BASE_PATH + "/"} class="active">ホーム</a>
          <a href={`${BASE_PATH}/wiki/1`}>はじめに</a>
          <a href={`${BASE_PATH}/wiki`}>ページ一覧</a>
          <a href={REPO_URL} target="_blank">GitHub</a>
        </nav>
      </div>
    </div>
  </header>

  <div class="hero">
    <div class="container">
      <h1>{SITE_TITLE}</h1>
      <p>{SITE_DESCRIPTION}</p>
      <div class="actions">
        <a href={`${BASE_PATH}/wiki/1`} class="button primary">はじめに</a>
        <a href={REPO_URL + "/issues/new"} class="button accent" target="_blank">新規ページ作成</a>
      </div>
    </div>
  </div>

  <main class="container">
    <SearchBar />
    
    <div class="content-grid">
      <div class="main-content">
        <div class="alert alert-info">
          <strong>GitWiki Hub</strong> へようこそ！このサイトはGitHubのIssueをWikiページとして活用するプラットフォームです。
        </div>

        <h2>最近の更新</h2>
        <TimelineView issues={issues} limit={5} titleOnly={true} />
        
        <h2>GitWiki Hubについて</h2>
        <p>
          このサイトは、GitHubのIssueをWikiページとして表示する便利なアプリケーションです。
          Astroフレームワークを使用して構築されており、シンプルで高速なWikiサイトを実現しています。
        </p>
        
        <h3>特徴</h3>
        <ul>
          <li>GitHubのIssueがそのままWikiページになります</li>
          <li>Markdownで簡単に編集できます</li>
          <li>ラベルでカテゴリ分けができます</li>
          <li>レスポンシブデザインで様々なデバイスに対応</li>
          <li>インラインで簡単に検索できます</li>
          <li>タイムラインビューでコンテンツを時系列で確認できます</li>
        </ul>
        
        <h3>使い方</h3>
        <ol>
          <li>GitHubで<a href={`${REPO_URL}/issues/new`} target="_blank">新しいIssueを作成</a>する</li>
          <li>ラベルでカテゴリを設定する</li>
          <li>自動的にWikiに反映される</li>
        </ol>
        
        <p>
          詳しくは<a href={`${BASE_PATH}/wiki/1`}>はじめに</a>をご覧ください。
        </p>

        <div class="issue-grid">
          {issues.slice(0, 6).map(issue => (
            <a href={`${BASE_PATH}/wiki/${issue.number}`} class="issue-card">
              <h3>{issue.title}</h3>
              <div class="issue-meta">
                <span class="issue-number">#{issue.number}</span>
                <span class="issue-date">{new Date(issue.updated_at).toLocaleDateString('ja-JP')}</span>
              </div>
              <div class="issue-labels">
                {issue.labels && issue.labels.map(label => (
                  <span class="tag" style={`background-color: #${label.color}20; color: #${label.color}; border: 1px solid #${label.color}40;`}>
                    {label.name}
                  </span>
                ))}
              </div>
              <div class="issue-excerpt">
                {issue.body && issue.body.length > 100 ? `${issue.body.substring(0, 100)}...` : issue.body}
              </div>
            </a>
          ))}
        </div>

        <div class="text-center mt-4">
          <a href={`${BASE_PATH}/wiki`} class="button">すべてのページを見る</a>
        </div>

        <div class="export-feature">
          <h2>Noteに記事を投稿</h2>
          <p>好きなページを選択して、Noteに投稿することができます。</p>
          
          <div class="export-form">
            <div class="select-wrapper">
              <label for="export-select">エクスポートするページを選択:</label>
              <select id="export-select" class="export-select">
                <option value="">選択してください</option>
                {issues.map(issue => (
                  <option value={issue.number}>{issue.title}</option>
                ))}
              </select>
            </div>
            
            <div class="export-options">
              <label class="checkbox-wrapper">
                <input type="checkbox" id="include-meta" checked />
                メタデータを含める（タイトル、日付、カテゴリー）
              </label>
              
              <label class="checkbox-wrapper">
                <input type="checkbox" id="format-markdown" checked />
                Markdown形式を保持する
              </label>
              
              <label class="checkbox-wrapper">
                <input type="checkbox" id="auto-adjust" checked />
                Note形式に最適化する
              </label>
            </div>
            
            <div class="export-buttons">
              <button id="preview-export" class="button secondary">プレビュー</button>
              <button id="export-to-note" class="button accent">エクスポート</button>
            </div>
          </div>
          
          <!-- プレビューモーダル -->
          <div id="preview-modal" class="modal">
            <div class="modal-content">
              <div class="modal-header">
                <h3>エクスポートプレビュー</h3>
                <button class="close-button">&times;</button>
              </div>
              <div class="modal-body">
                <div id="preview-content" class="preview-content"></div>
              </div>
              <div class="modal-footer">
                <button class="button secondary close-modal">閉じる</button>
                <button id="confirm-export" class="button accent">Noteにエクスポート</button>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <div class="sidebar">
        <div class="card">
          <h2>カテゴリー</h2>
          
          {sortedCategories.map(category => (
            <div class="category">
              <h3>{category}</h3>
              <ul>
                {categories[category].map(issue => (
                  <li>
                    <a href={`${BASE_PATH}/wiki/${issue.number}`}>
                      {issue.title}
                    </a>
                  </li>
                ))}
              </ul>
            </div>
          ))}
        </div>
        
        <div class="card">
          <h2>GitHub連携</h2>
          <div class="github-actions">
            <a href={REPO_URL + "/issues"} class="button secondary" style="width: 100%; margin-bottom: 0.5rem;" target="_blank">Issue一覧を見る</a>
            <a href={REPO_URL + "/issues/new"} class="button accent" style="width: 100%;" target="_blank">新規ページを作成</a>
          </div>
          
          <div class="mt-3">
            <h3>最近の更新</h3>
            <ul class="recent-updates">
              {recentIssues.map(issue => {
                // 日付をフォーマット
                const date = new Date(issue.updated_at);
                const formattedDate = new Intl.DateTimeFormat('ja-JP', {
                  year: 'numeric',
                  month: '2-digit',
                  day: '2-digit'
                }).format(date);
                
                return (
                  <li>
                    <a href={`${BASE_PATH}/wiki/${issue.number}`}>
                      <span class="title">{issue.title}</span>
                      <span class="date">{formattedDate}</span>
                    </a>
                  </li>
                );
              })}
            </ul>
          </div>
        </div>
        
        <div class="card">
          <h2>クイックリンク</h2>
          <ul class="quick-links">
            <li><a href={`${BASE_PATH}/wiki`}>全ページ一覧</a></li>
            <li><a href={`${BASE_PATH}/wiki/1`}>使い方ガイド</a></li>
            <li><a href={REPO_URL} target="_blank">GitHubリポジトリ</a></li>
          </ul>
        </div>
      </div>
    </div>
  </main>

  <CustomFooter />

  <style>
    /* ページ特有のスタイル */
    .hero {
      background: linear-gradient(135deg, var(--color-primary), var(--color-primary-dark));
      color: white;
      padding: 3rem 0;
      text-align: center;
      margin-bottom: 2rem;
    }
    
    .hero h1 {
      margin: 0;
      font-size: 2.5rem;
    }
    
    .hero p {
      font-size: 1.2rem;
      opacity: 0.9;
      margin: 1rem 0 2rem;
    }
    
    .actions {
      display: flex;
      gap: 1rem;
      justify-content: center;
    }
    
    .content-grid {
      display: grid;
      grid-template-columns: 2fr 1fr;
      gap: 2rem;
      margin-top: 2rem;
    }
    
    .main-content {
      background-color: var(--color-background-panel);
      padding: 2rem;
      border-radius: var(--border-radius-md);
      box-shadow: var(--box-shadow-md);
      border: 1px solid var(--color-border);
    }
    
    .sidebar {
      display: flex;
      flex-direction: column;
      gap: 2rem;
    }
    
    .category h3 {
      font-size: 1rem;
      color: var(--color-text-light);
      margin: 1.5rem 0 0.5rem;
      padding-bottom: 0.25rem;
      border-bottom: 1px solid var(--color-border);
    }
    
    .category:first-child h3 {
      margin-top: 0;
    }
    
    li a {
      display: block;
      padding: 0.5rem;
      text-decoration: none;
      color: var(--color-text);
      border-radius: var(--border-radius-sm);
      transition: background-color 0.2s, transform 0.2s;
    }
    
    li a:hover {
      background-color: rgba(37, 99, 235, 0.05);
      transform: translateX(3px);
    }
    
    .title {
      display: block;
    }
    
    .date {
      display: block;
      font-size: 0.8rem;
      color: var(--color-text-light);
    }

    /* Issue一覧のスタイル */
    .issue-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
      gap: 1.5rem;
      margin: 2rem 0;
    }

    .issue-card {
      display: flex;
      flex-direction: column;
      padding: 1.5rem;
      background-color: var(--color-background);
      border-radius: var(--border-radius-md);
      border: 1px solid var(--color-border);
      box-shadow: var(--box-shadow-sm);
      transition: all 0.2s;
      text-decoration: none;
      color: var(--color-text);
      height: 100%;
    }

    .issue-card:hover {
      transform: translateY(-3px);
      box-shadow: var(--box-shadow-md);
      text-decoration: none;
      border-color: var(--color-primary-light);
    }

    .issue-card h3 {
      margin-top: 0;
      margin-bottom: 0.75rem;
      font-size: 1.2rem;
      color: var(--color-primary);
    }

    .issue-meta {
      display: flex;
      justify-content: space-between;
      font-size: 0.85rem;
      color: var(--color-text-light);
      margin-bottom: 1rem;
    }

    .issue-labels {
      display: flex;
      flex-wrap: wrap;
      gap: 0.5rem;
      margin-bottom: 1rem;
    }

    .issue-excerpt {
      font-size: 0.9rem;
      color: var(--color-text-light);
      overflow: hidden;
      line-height: 1.5;
      flex-grow: 1;
      white-space: pre-line;
    }

    /* クイックリンク */
    .quick-links {
      list-style: none;
      padding: 0;
    }

    .quick-links li {
      border-bottom: 1px solid var(--color-border);
    }

    .quick-links li:last-child {
      border-bottom: none;
    }

    .quick-links a {
      padding: 0.75rem 0.5rem;
      display: flex;
      align-items: center;
    }

    .quick-links a:before {
      content: '→';
      margin-right: 0.5rem;
      color: var(--color-primary);
    }

    /* 最近の更新リスト */
    .recent-updates {
      list-style: none;
      padding: 0;
    }

    .recent-updates li {
      margin-bottom: 0.75rem;
    }

    .recent-updates li:last-child {
      margin-bottom: 0;
    }

    .recent-updates a {
      display: block;
      padding: 0.75rem;
      background-color: rgba(37, 99, 235, 0.03);
      border-left: 3px solid var(--color-primary-light);
      border-radius: 0 var(--border-radius-sm) var(--border-radius-sm) 0;
    }

    .recent-updates a:hover {
      background-color: rgba(37, 99, 235, 0.08);
      transform: translateX(3px);
    }
    
    /* Noteエクスポート機能のスタイル */
    .export-feature {
      margin-top: 3rem;
      padding-top: 2rem;
      border-top: 1px solid var(--color-border);
    }
    
    .export-form {
      background-color: var(--color-background);
      padding: 1.5rem;
      border-radius: var(--border-radius-md);
      border: 1px solid var(--color-border);
      margin-top: 1.5rem;
    }
    
    .select-wrapper {
      margin-bottom: 1.5rem;
    }
    
    .export-select {
      display: block;
      width: 100%;
      padding: 0.75rem;
      border: 1px solid var(--color-border);
      border-radius: var(--border-radius-sm);
      background-color: var(--color-background-panel);
      margin-top: 0.5rem;
      font-family: var(--font-family);
      font-size: var(--font-size-md);
    }
    
    .export-select:focus {
      outline: none;
      border-color: var(--color-primary);
      box-shadow: 0 0 0 3px rgba(37, 99, 235, 0.2);
    }
    
    .export-options {
      margin-bottom: 1.5rem;
    }
    
    .checkbox-wrapper {
      display: block;
      margin-bottom: 0.75rem;
      display: flex;
      align-items: center;
      cursor: pointer;
    }
    
    .checkbox-wrapper input {
      margin-right: 0.75rem;
    }
    
    .export-buttons {
      display: flex;
      gap: 1rem;
    }
    
    /* モーダルスタイル */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.5);
      z-index: 1000;
      overflow-y: auto;
    }
    
    .modal-content {
      background-color: var(--color-background-panel);
      margin: 2rem auto;
      width: 90%;
      max-width: 800px;
      border-radius: var(--border-radius-md);
      box-shadow: var(--box-shadow-lg);
      overflow: hidden;
    }
    
    .modal-header {
      padding: 1.5rem;
      background-color: var(--color-primary);
      color: white;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    
    .modal-header h3 {
      margin: 0;
      color: white;
    }
    
    .close-button {
      background: none;
      border: none;
      color: white;
      font-size: 1.5rem;
      cursor: pointer;
      padding: 0;
      line-height: 1;
    }
    
    .modal-body {
      padding: 1.5rem;
      max-height: 60vh;
      overflow-y: auto;
    }
    
    .preview-content {
      background-color: white;
      padding: 1.5rem;
      border-radius: var(--border-radius-sm);
      border: 1px solid var(--color-border);
    }
    
    .modal-footer {
      padding: 1.5rem;
      border-top: 1px solid var(--color-border);
      display: flex;
      justify-content: flex-end;
      gap: 1rem;
    }
    
    /* レスポンシブデザイン */
    @media (max-width: 768px) {
      .content-grid {
        grid-template-columns: 1fr;
      }
      
      .sidebar {
        order: -1;
      }
      
      .actions {
        flex-direction: column;
        align-items: center;
      }
      
      .button {
        width: 100%;
        text-align: center;
      }
      
      .issue-grid {
        grid-template-columns: 1fr;
      }
      
      .export-buttons {
        flex-direction: column;
      }
    }
  </style>

  <script>
    // ダークモード切り替え機能
    document.addEventListener('DOMContentLoaded', () => {
      // ローカルストレージからユーザーの設定を取得
      const savedTheme = localStorage.getItem('theme');
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      
      // テーマの設定（保存された設定があればそれを優先、なければシステム設定に従う）
      if (savedTheme) {
        document.documentElement.classList.toggle('dark-theme', savedTheme === 'dark');
      } else if (prefersDark) {
        document.documentElement.classList.add('dark-theme');
      }
      
      // Noteエクスポート機能
      const exportSelect = document.getElementById('export-select');
      const previewBtn = document.getElementById('preview-export');
      const exportBtn = document.getElementById('export-to-note');
      const previewModal = document.getElementById('preview-modal');
      const previewContent = document.getElementById('preview-content');
      const confirmExportBtn = document.getElementById('confirm-export');
      const closeButtons = document.querySelectorAll('.close-button, .close-modal');
      
      // モーダルを閉じる
      closeButtons.forEach(button => {
        button.addEventListener('click', () => {
          previewModal.style.display = 'none';
        });
      });
      
      // モーダル外をクリックして閉じる
      window.addEventListener('click', (e) => {
        if (e.target === previewModal) {
          previewModal.style.display = 'none';
        }
      });
      
      // プレビューボタン
      previewBtn.addEventListener('click', () => {
        const selectedIssueId = exportSelect.value;
        if (!selectedIssueId) {
          alert('エクスポートするページを選択してください。');
          return;
        }
        
        // 選択されたIssueを取得
        fetch(`https://api.github.com/repos/nao-amj/starlight-issue-wiki/issues/${selectedIssueId}`)
          .then(response => response.json())
          .then(issue => {
            const includeMeta = document.getElementById('include-meta').checked;
            const formatMarkdown = document.getElementById('format-markdown').checked;
            const autoAdjust = document.getElementById('auto-adjust').checked;
            
            // Note用にフォーマットする
            let noteContent = '';
            
            if (includeMeta) {
              noteContent += `<h1>${issue.title}</h1>\n\n`;
              noteContent += `<p><small>投稿日: ${new Date(issue.created_at).toLocaleDateString('ja-JP')}</small></p>\n\n`;
              
              if (issue.labels && issue.labels.length > 0) {
                noteContent += '<p>';
                issue.labels.forEach(label => {
                  noteContent += `<span style="display: inline-block; padding: 0.2em 0.5em; background-color: #${label.color}20; color: #${label.color}; border: 1px solid #${label.color}40; border-radius: 0.25rem; margin-right: 0.5rem;">${label.name}</span>`;
                });
                noteContent += '</p>\n\n';
              }
              
              noteContent += '<hr>\n\n';
            }
            
            let bodyContent = issue.body || '';
            
            if (autoAdjust) {
              // 画像リンクの最適化
              bodyContent = bodyContent.replace(/!\[(.*?)\]\((.*?)\)/g, '<img src="$2" alt="$1" style="max-width: 100%; height: auto;">');
              
              // 見出しの最適化
              bodyContent = bodyContent.replace(/^##\s+(.*)$/gm, '<h2 style="font-size: 1.5rem; margin-top: 2rem; margin-bottom: 1rem; padding-bottom: 0.5rem; border-bottom: 1px solid #e5e7eb;">$1</h2>');
              bodyContent = bodyContent.replace(/^###\s+(.*)$/gm, '<h3 style="font-size: 1.25rem; margin-top: 1.5rem; margin-bottom: 0.75rem;">$1</h3>');
              
              // リストの最適化
              bodyContent = bodyContent.replace(/^\s*[-*+]\s+(.*)$/gm, '<li style="margin-bottom: 0.5rem;">$1</li>');
              bodyContent = bodyContent.replace(/(<li[^>]*>.*<\/li>\n)+/gs, '<ul style="padding-left: 1.5rem; margin-bottom: 1.5rem;">$&</ul>');
              
              // 引用の最適化
              bodyContent = bodyContent.replace(/^>\s+(.*)$/gm, '<blockquote style="border-left: 4px solid #60a5fa; padding: 0.5rem 1rem; background-color: #f3f4f6; margin: 1.5rem 0;">$1</blockquote>');
            } else if (!formatMarkdown) {
              // Markdownをプレーンテキストに変換
              bodyContent = bodyContent
                .replace(/^#+\s+(.*)$/gm, '$1')
                .replace(/\*\*(.*)\*\*/g, '$1')
                .replace(/\*(.*)\*/g, '$1')
                .replace(/!\[(.*?)\]\((.*?)\)/g, '[$1]')
                .replace(/\[(.*?)\]\((.*?)\)/g, '$1 ($2)');
            }
            
            noteContent += bodyContent;
            
            // プレビュー表示
            previewContent.innerHTML = noteContent;
            previewModal.style.display = 'block';
          })
          .catch(error => {
            console.error('Error fetching issue:', error);
            alert('エラーが発生しました。もう一度お試しください。');
          });
      });
      
      // エクスポートボタン
      exportBtn.addEventListener('click', () => {
        const selectedIssueId = exportSelect.value;
        if (!selectedIssueId) {
          alert('エクスポートするページを選択してください。');
          return;
        }
        
        // プレビューをスキップしてエクスポートする
        previewBtn.click();
      });
      
      // エクスポート確認ボタン
      confirmExportBtn.addEventListener('click', () => {
        const content = previewContent.innerHTML;
        const title = document.querySelector('#export-select option:checked').text;
        
        // Noteエクスポート用のHTMLを生成
        const exportHtml = `
<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>${title} - Noteエクスポート</title>
  <style>
    body { font-family: sans-serif; line-height: 1.6; color: #333; max-width: 800px; margin: 0 auto; padding: 2rem; }
    img { max-width: 100%; height: auto; }
    pre { background: #f5f5f5; padding: 1rem; overflow-x: auto; border-radius: 0.25rem; }
    blockquote { border-left: 4px solid #ddd; margin-left: 0; padding-left: 1rem; color: #666; }
    h1, h2, h3 { font-weight: 600; line-height: 1.3; }
    .note-header { margin-bottom: 2rem; text-align: center; }
    .note-footer { margin-top: 3rem; text-align: center; font-size: 0.9rem; color: #666; border-top: 1px solid #eee; padding-top: 1rem; }
  </style>
</head>
<body>
  <div class="note-header">
    <h1>${title}</h1>
    <p>エクスポート日時: ${new Date().toLocaleString('ja-JP')}</p>
  </div>
  
  <div class="note-content">
    ${content}
  </div>
  
  <div class="note-footer">
    <p>GitWiki Hubからエクスポートされました</p>
  </div>
</body>
</html>
        `;
        
        // ダウンロード用のテキストファイル生成
        const blob = new Blob([exportHtml], { type: 'text/html' });
        const url = URL.createObjectURL(blob);
        const a = document.createElement('a');
        a.href = url;
        a.download = `${title.replace(/[\s\:\/\?\*\|\<\>\"]/g, '_')}_note.html`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);
        
        // Noteのエディタを開く構成
        setTimeout(() => {
          if (confirm('Noteのエディタを開きますか？')) {
            window.open('https://note.com/new', '_blank');
          }
          previewModal.style.display = 'none';
        }, 1000);
      });
    });
  </script>
</body>
</html>
