---
import SettingsPanel from '../components/SettingsPanel.astro';
import { BASE_PATH, SITE_TITLE } from '../config';

export interface Props {
  title: string;
  description?: string;
}

const { title, description = 'GitHubのIssueを使って管理するドキュメントサイト' } = Astro.props;
---

<!DOCTYPE html>
<html lang="ja">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    <meta name="description" content={description} />
    
    <link rel="stylesheet" href={`${BASE_PATH}/styles/global.css`} />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link href="https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap" rel="stylesheet" />
    
    <!-- テーママネージャーのスクリプト -->
    <script src="../utils/themeManager.js" type="module"></script>
  </head>
  <body>
    <header class="site-header">
      <div class="container">
        <div class="header-content">
          <h1 class="site-title"><a href={BASE_PATH + "/"}>{SITE_TITLE}</a></h1>
          <div class="nav-container">
            <button id="menu-toggle" class="mobile-menu-toggle" aria-label="メニュー">☰</button>
            <nav id="main-nav" class="main-nav">
              <a href={BASE_PATH + "/"}>ホーム</a>
              <a href={`${BASE_PATH}/wiki/1`}>はじめに</a>
              <a href={`${BASE_PATH}/wiki`}>ページ一覧</a>
              <a href={`${BASE_PATH}/data-management`}>データ管理</a>
              <a href={`${BASE_PATH}/analysis`}>分析</a>
              <a href="https://github.com/nao-amj/starlight-issue-wiki" target="_blank">GitHub</a>
            </nav>
            <button id="settings-toggle-btn" class="settings-toggle-btn">設定</button>
          </div>
        </div>
      </div>
    </header>
    
    <main class="container">
      <slot />
    </main>
    
    <footer>
      <div class="container">
        <div class="footer-content">
          <div class="footer-links">
            <a href={BASE_PATH + "/"}>ホーム</a>
            <a href={`${BASE_PATH}/wiki`}>ページ一覧</a>
            <a href={`${BASE_PATH}/data-management`}>データ管理</a>
            <a href={`${BASE_PATH}/analysis`}>分析</a>
            <a href="https://github.com/nao-amj/starlight-issue-wiki" target="_blank">GitHub</a>
          </div>
          <div class="footer-copyright">
            &copy; {new Date().getFullYear()} GitWiki Hub
          </div>
        </div>
      </div>
    </footer>
    
    <SettingsPanel />
    
    <style>
      /* ヘッダーのスタイル */
      .site-header {
        background-color: white;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.05);
        padding: 0.75rem 0;
        position: sticky;
        top: 0;
        z-index: 100;
        transition: all 0.3s ease;
      }
      
      .dark .site-header {
        background-color: #111;
        box-shadow: 0 1px 4px rgba(0, 0, 0, 0.3);
      }
      
      .header-content {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      
      .site-title {
        margin: 0;
        font-size: 1.5rem;
        white-space: nowrap;
      }
      
      .site-title a {
        text-decoration: none;
        color: var(--color-primary);
        transition: all 0.2s;
      }
      
      .site-title a:hover {
        color: var(--color-primary-dark);
      }
      
      .nav-container {
        display: flex;
        align-items: center;
        gap: 1rem;
      }
      
      .main-nav {
        display: flex;
        gap: 1.5rem;
        transition: all 0.3s ease;
      }
      
      .main-nav a {
        color: var(--color-text);
        text-decoration: none;
        padding: 0.5rem 0;
        position: relative;
        transition: color 0.2s;
      }
      
      .main-nav a:hover {
        color: var(--color-primary);
      }
      
      .main-nav a.active {
        color: var(--color-primary);
      }
      
      .main-nav a.active::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 2px;
        background-color: var(--color-primary);
      }
      
      .settings-toggle-btn {
        background-color: var(--color-primary);
        color: white;
        padding: 0.5rem 1rem;
        border: none;
        border-radius: 0.375rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
        white-space: nowrap;
      }
      
      .settings-toggle-btn:hover {
        background-color: var(--color-primary-dark);
        transform: translateY(-1px);
      }
      
      /* モバイルメニュートグルボタン */
      .mobile-menu-toggle {
        display: none;
        background: none;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        color: var(--color-text);
        padding: 0.25rem 0.5rem;
      }
      
      /* フッター */
      footer {
        background-color: #f9f9fb;
        padding: 2rem 0;
        margin-top: 5rem;
        border-top: 1px solid #eee;
      }
      
      .dark footer {
        background-color: #111;
        border-top-color: #333;
      }
      
      .footer-content {
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 1rem;
      }
      
      .footer-links {
        display: flex;
        gap: 1.5rem;
        flex-wrap: wrap;
        justify-content: center;
      }
      
      .footer-links a {
        color: #666;
        text-decoration: none;
        transition: color 0.2s;
      }
      
      .dark .footer-links a {
        color: #aaa;
      }
      
      .footer-links a:hover {
        color: var(--color-primary);
      }
      
      .footer-copyright {
        color: #999;
        font-size: 0.875rem;
      }
      
      .dark .footer-copyright {
        color: #777;
      }
      
      /* レスポンシブデザイン */
      @media (max-width: 768px) {
        /* モバイルでの表示を最適化 */
        .site-header {
          padding: 0.5rem 0;
        }
        
        .header-content {
          position: relative;
        }
        
        .mobile-menu-toggle {
          display: block;
        }
        
        .nav-container {
          flex-grow: 1;
          justify-content: flex-end;
        }
        
        .main-nav {
          position: absolute;
          top: 100%;
          left: 0;
          right: 0;
          background-color: white;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
          padding: 1rem;
          flex-direction: column;
          gap: 0.75rem;
          display: none;
          z-index: 200;
        }
        
        .dark .main-nav {
          background-color: #111;
          box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
        }
        
        .main-nav.active {
          display: flex;
        }
        
        .main-nav a {
          display: block;
          padding: 0.75rem;
          border-radius: 4px;
        }
        
        .main-nav a:hover {
          background-color: rgba(0, 0, 0, 0.05);
        }
        
        .dark .main-nav a:hover {
          background-color: rgba(255, 255, 255, 0.05);
        }
        
        /* アクティブ状態のアンダーラインではなく背景色を変更 */
        .main-nav a.active::after {
          display: none;
        }
        
        .main-nav a.active {
          background-color: rgba(37, 99, 235, 0.1);
        }
        
        .dark .main-nav a.active {
          background-color: rgba(37, 99, 235, 0.2);
        }
        
        /* フッターをシンプルに */
        .footer-links {
          gap: 1rem;
        }
      }
    </style>
    
    <script>
      // ヘッダーのナビゲーションにアクティブクラスを設定
      document.addEventListener('DOMContentLoaded', () => {
        const pathname = window.location.pathname;
        const navLinks = document.querySelectorAll('.main-nav a');
        
        navLinks.forEach(link => {
          const href = link.getAttribute('href');
          if (href && pathname.startsWith(href) && href !== '/') {
            link.classList.add('active');
          } else if (href === '/' && pathname === '/') {
            link.classList.add('active');
          }
        });
        
        // モバイルメニュートグル
        const menuToggle = document.getElementById('menu-toggle');
        const mainNav = document.getElementById('main-nav');
        
        if (menuToggle && mainNav) {
          menuToggle.addEventListener('click', () => {
            mainNav.classList.toggle('active');
          });
          
          // メニュー項目をクリックしたときにメニューを閉じる
          navLinks.forEach(link => {
            link.addEventListener('click', () => {
              mainNav.classList.remove('active');
            });
          });
          
          // 画面外クリックでメニューを閉じる
          document.addEventListener('click', (event) => {
            if (!event.target.closest('.main-nav') && !event.target.closest('.mobile-menu-toggle') && mainNav.classList.contains('active')) {
              mainNav.classList.remove('active');
            }
          });
        }
        
        // 設定パネルの表示トグル
        const settingsBtn = document.getElementById('settings-toggle-btn');
        if (settingsBtn) {
          settingsBtn.addEventListener('click', () => {
            const settingsPanel = document.getElementById('settings-panel');
            if (settingsPanel) {
              settingsPanel.style.display = 'block';
              // カスタムイベントを発火して設定パネルが開いたことを通知
              window.dispatchEvent(new CustomEvent('settings-panel-open'));
            }
          });
        }
      });

      // テーマ変更イベントのリスナー
      window.addEventListener('theme-changed', (event) => {
        console.log('Theme changed:', event.detail);
      });
      
      // スクロール時の動作最適化
      let lastScrollY = 0;
      window.addEventListener('scroll', () => {
        const currentScrollY = window.scrollY;
        const header = document.querySelector('.site-header');
        
        if (currentScrollY > lastScrollY && currentScrollY > 100) {
          // 下スクロール時はヘッダーを隠す
          header.style.transform = 'translateY(-100%)';
        } else {
          // 上スクロール時はヘッダーを表示
          header.style.transform = 'translateY(0)';
        }
        
        lastScrollY = currentScrollY;
      });
    </script>
  </body>
</html>
